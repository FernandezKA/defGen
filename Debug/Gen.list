
Gen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fb0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080010bc  080010bc  000110bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080010cc  080010cc  00020114  2**0
                  CONTENTS
  4 .ARM          00000000  080010cc  080010cc  00020114  2**0
                  CONTENTS
  5 .preinit_array 00000000  080010cc  080010cc  00020114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010cc  080010cc  000110cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080010d0  080010d0  000110d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000114  20000000  080010d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000114  080011e8  00020114  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  080011e8  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
 12 .debug_info   000041a9  00000000  00000000  0002013d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000d97  00000000  00000000  000242e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001e8c  00000000  00000000  0002507d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000000f0  00000000  00000000  00026f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000ac0  00000000  00000000  00027000  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00011c97  00000000  00000000  00027ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000288c  00000000  00000000  00039757  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0005de54  00000000  00000000  0003bfe3  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00099e37  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000434  00000000  00000000  00099eb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000114 	.word	0x20000114
 8000128:	00000000 	.word	0x00000000
 800012c:	080010a4 	.word	0x080010a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000118 	.word	0x20000118
 8000148:	080010a4 	.word	0x080010a4

0800014c <SystemClock_Config>:
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800014c:	4923      	ldr	r1, [pc, #140]	; (80001dc <SystemClock_Config+0x90>)
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800014e:	b508      	push	{r3, lr}
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000150:	460a      	mov	r2, r1
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000152:	680b      	ldr	r3, [r1, #0]
 8000154:	f023 0307 	bic.w	r3, r3, #7
 8000158:	f043 0302 	orr.w	r3, r3, #2
 800015c:	600b      	str	r3, [r1, #0]
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800015e:	6813      	ldr	r3, [r2, #0]
 8000160:	f003 0307 	and.w	r3, r3, #7
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000164:	2b02      	cmp	r3, #2
 8000166:	d1fa      	bne.n	800015e <SystemClock_Config+0x12>
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000168:	4b1d      	ldr	r3, [pc, #116]	; (80001e0 <SystemClock_Config+0x94>)
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 800016a:	461a      	mov	r2, r3
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800016c:	6819      	ldr	r1, [r3, #0]
 800016e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8000172:	6019      	str	r1, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000174:	6813      	ldr	r3, [r2, #0]
  {
  }
  LL_RCC_HSE_Enable();

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000176:	0399      	lsls	r1, r3, #14
 8000178:	d5fc      	bpl.n	8000174 <SystemClock_Config+0x28>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 800017a:	6851      	ldr	r1, [r2, #4]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800017c:	4b18      	ldr	r3, [pc, #96]	; (80001e0 <SystemClock_Config+0x94>)
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 800017e:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
 8000182:	f441 11e8 	orr.w	r1, r1, #1900544	; 0x1d0000
 8000186:	6051      	str	r1, [r2, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000188:	6811      	ldr	r1, [r2, #0]
 800018a:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 800018e:	6011      	str	r1, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000190:	681a      	ldr	r2, [r3, #0]
  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
  LL_RCC_PLL_Enable();

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000192:	0192      	lsls	r2, r2, #6
 8000194:	d5fc      	bpl.n	8000190 <SystemClock_Config+0x44>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000196:	6859      	ldr	r1, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000198:	4a11      	ldr	r2, [pc, #68]	; (80001e0 <SystemClock_Config+0x94>)
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800019a:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 800019e:	6059      	str	r1, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80001a0:	6859      	ldr	r1, [r3, #4]
 80001a2:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80001a6:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80001aa:	6059      	str	r1, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80001ac:	6859      	ldr	r1, [r3, #4]
 80001ae:	f421 5160 	bic.w	r1, r1, #14336	; 0x3800
 80001b2:	6059      	str	r1, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80001b4:	6859      	ldr	r1, [r3, #4]
 80001b6:	f021 0103 	bic.w	r1, r1, #3
 80001ba:	f041 0102 	orr.w	r1, r1, #2
 80001be:	6059      	str	r1, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80001c0:	6853      	ldr	r3, [r2, #4]
 80001c2:	f003 030c 	and.w	r3, r3, #12
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80001c6:	2b08      	cmp	r3, #8
 80001c8:	d1fa      	bne.n	80001c0 <SystemClock_Config+0x74>
  {

  }
  LL_Init1msTick(72000000);
 80001ca:	4806      	ldr	r0, [pc, #24]	; (80001e4 <SystemClock_Config+0x98>)
 80001cc:	f000 fbd6 	bl	800097c <LL_Init1msTick>
  LL_SetSystemCoreClock(72000000);
}
 80001d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LL_SetSystemCoreClock(72000000);
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <SystemClock_Config+0x98>)
 80001d6:	f000 bbf5 	b.w	80009c4 <LL_SetSystemCoreClock>
 80001da:	bf00      	nop
 80001dc:	40022000 	.word	0x40022000
 80001e0:	40021000 	.word	0x40021000
 80001e4:	044aa200 	.word	0x044aa200

080001e8 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80001e8:	b672      	cpsid	i
 80001ea:	e7fe      	b.n	80001ea <Error_Handler+0x2>

080001ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80001ec:	e7fe      	b.n	80001ec <NMI_Handler>
 80001ee:	bf00      	nop

080001f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80001f0:	e7fe      	b.n	80001f0 <HardFault_Handler>
 80001f2:	bf00      	nop

080001f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80001f4:	e7fe      	b.n	80001f4 <MemManage_Handler>
 80001f6:	bf00      	nop

080001f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80001f8:	e7fe      	b.n	80001f8 <BusFault_Handler>
 80001fa:	bf00      	nop

080001fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80001fc:	e7fe      	b.n	80001fc <UsageFault_Handler>
 80001fe:	bf00      	nop

08000200 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop

08000204 <DebugMon_Handler>:
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop

08000208 <PendSV_Handler>:
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop

0800020c <SysTick_Handler>:
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop

08000210 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000210:	b430      	push	{r4, r5}
	//TIM1->ARR = new_time;
	//TIM1->RCR = new_repeat;
	//TIM1->PSC = new_prescale;
	GPIOA->ODR = (new_state<<8);
	processed = true;
	TIM1->SR = ~TIM_SR_UIF;
 8000212:	f06f 0101 	mvn.w	r1, #1
	processed = true;
 8000216:	2401      	movs	r4, #1
	GPIOA->ODR = (new_state<<8);
 8000218:	4b05      	ldr	r3, [pc, #20]	; (8000230 <TIM1_UP_IRQHandler+0x20>)
 800021a:	4d06      	ldr	r5, [pc, #24]	; (8000234 <TIM1_UP_IRQHandler+0x24>)
 800021c:	881b      	ldrh	r3, [r3, #0]
	processed = true;
 800021e:	4806      	ldr	r0, [pc, #24]	; (8000238 <TIM1_UP_IRQHandler+0x28>)
	TIM1->SR = ~TIM_SR_UIF;
 8000220:	4a06      	ldr	r2, [pc, #24]	; (800023c <TIM1_UP_IRQHandler+0x2c>)
	GPIOA->ODR = (new_state<<8);
 8000222:	021b      	lsls	r3, r3, #8
 8000224:	60eb      	str	r3, [r5, #12]
	processed = true;
 8000226:	7004      	strb	r4, [r0, #0]
	TIM1->SR = ~TIM_SR_UIF;
 8000228:	6111      	str	r1, [r2, #16]
}
 800022a:	bc30      	pop	{r4, r5}
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	20000136 	.word	0x20000136
 8000234:	40010800 	.word	0x40010800
 8000238:	20000134 	.word	0x20000134
 800023c:	40012c00 	.word	0x40012c00

08000240 <TIM2_IRQHandler>:
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
/*NOTE: ADD INDICATE WORKING*/
	TIM2->SR = ~TIM_SR_UIF;
 8000240:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000244:	f06f 0201 	mvn.w	r2, #1
 8000248:	611a      	str	r2, [r3, #16]
}
 800024a:	4770      	bx	lr

0800024c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <SystemCoreClockUpdate>:
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000250:	4a11      	ldr	r2, [pc, #68]	; (8000298 <SystemCoreClockUpdate+0x48>)
 8000252:	6853      	ldr	r3, [r2, #4]
 8000254:	f003 030c 	and.w	r3, r3, #12
  
  switch (tmp)
 8000258:	2b08      	cmp	r3, #8
 800025a:	d10e      	bne.n	800027a <SystemCoreClockUpdate+0x2a>
      SystemCoreClock = HSE_VALUE;
      break;
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800025c:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800025e:	6851      	ldr	r1, [r2, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18U) + 2U;
 8000260:	f3c3 4383 	ubfx	r3, r3, #18, #4
      
      if (pllsource == 0x00U)
 8000264:	03c9      	lsls	r1, r1, #15
      pllmull = ( pllmull >> 18U) + 2U;
 8000266:	f103 0302 	add.w	r3, r3, #2
      if (pllsource == 0x00U)
 800026a:	d511      	bpl.n	8000290 <SystemCoreClockUpdate+0x40>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1U;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 800026c:	6852      	ldr	r2, [r2, #4]
 800026e:	0392      	lsls	r2, r2, #14
 8000270:	d40e      	bmi.n	8000290 <SystemCoreClockUpdate+0x40>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
 8000272:	4a0a      	ldr	r2, [pc, #40]	; (800029c <SystemCoreClockUpdate+0x4c>)
 8000274:	fb02 f303 	mul.w	r3, r2, r3
 8000278:	e000      	b.n	800027c <SystemCoreClockUpdate+0x2c>
  switch (tmp)
 800027a:	4b08      	ldr	r3, [pc, #32]	; (800029c <SystemCoreClockUpdate+0x4c>)
      break;
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800027c:	4a06      	ldr	r2, [pc, #24]	; (8000298 <SystemCoreClockUpdate+0x48>)
 800027e:	4808      	ldr	r0, [pc, #32]	; (80002a0 <SystemCoreClockUpdate+0x50>)
 8000280:	6852      	ldr	r2, [r2, #4]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8000282:	4908      	ldr	r1, [pc, #32]	; (80002a4 <SystemCoreClockUpdate+0x54>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000284:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8000288:	5c82      	ldrb	r2, [r0, r2]
  SystemCoreClock >>= tmp;  
 800028a:	40d3      	lsrs	r3, r2
 800028c:	600b      	str	r3, [r1, #0]
}
 800028e:	4770      	bx	lr
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 8000290:	4a05      	ldr	r2, [pc, #20]	; (80002a8 <SystemCoreClockUpdate+0x58>)
 8000292:	fb02 f303 	mul.w	r3, r2, r3
 8000296:	e7f1      	b.n	800027c <SystemCoreClockUpdate+0x2c>
 8000298:	40021000 	.word	0x40021000
 800029c:	007a1200 	.word	0x007a1200
 80002a0:	080010bc 	.word	0x080010bc
 80002a4:	20000110 	.word	0x20000110
 80002a8:	003d0900 	.word	0x003d0900

080002ac <LL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Force and Release reset on clock of GPIOx Port */
  if (GPIOx == GPIOA)
 80002ac:	4b26      	ldr	r3, [pc, #152]	; (8000348 <LL_GPIO_DeInit+0x9c>)
 80002ae:	4298      	cmp	r0, r3
 80002b0:	d00d      	beq.n	80002ce <LL_GPIO_DeInit+0x22>
  {
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_GPIOA);
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_GPIOA);
  }
  else if (GPIOx == GPIOB)
 80002b2:	4b26      	ldr	r3, [pc, #152]	; (800034c <LL_GPIO_DeInit+0xa0>)
 80002b4:	4298      	cmp	r0, r3
 80002b6:	d02e      	beq.n	8000316 <LL_GPIO_DeInit+0x6a>
  {
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_GPIOB);
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_GPIOB);
  }
  else if (GPIOx == GPIOC)
 80002b8:	4b25      	ldr	r3, [pc, #148]	; (8000350 <LL_GPIO_DeInit+0xa4>)
 80002ba:	4298      	cmp	r0, r3
 80002bc:	d013      	beq.n	80002e6 <LL_GPIO_DeInit+0x3a>
  {
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_GPIOC);
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_GPIOC);
  }
  else if (GPIOx == GPIOD)
 80002be:	4b25      	ldr	r3, [pc, #148]	; (8000354 <LL_GPIO_DeInit+0xa8>)
 80002c0:	4298      	cmp	r0, r3
 80002c2:	d034      	beq.n	800032e <LL_GPIO_DeInit+0x82>
  {
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_GPIOD);
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_GPIOD);
  }
#if defined(GPIOE)
  else if (GPIOx == GPIOE)
 80002c4:	4b24      	ldr	r3, [pc, #144]	; (8000358 <LL_GPIO_DeInit+0xac>)
 80002c6:	4298      	cmp	r0, r3
 80002c8:	d019      	beq.n	80002fe <LL_GPIO_DeInit+0x52>
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_GPIOG);
  }
#endif
  else
  {
    status = ERROR;
 80002ca:	2001      	movs	r0, #1
  }

  return (status);
}
 80002cc:	4770      	bx	lr
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
  SET_BIT(RCC->APB2RSTR, Periphs);
 80002ce:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80002d2:	68da      	ldr	r2, [r3, #12]
  ErrorStatus status = SUCCESS;
 80002d4:	2000      	movs	r0, #0
 80002d6:	f042 0204 	orr.w	r2, r2, #4
 80002da:	60da      	str	r2, [r3, #12]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80002dc:	68da      	ldr	r2, [r3, #12]
 80002de:	f022 0204 	bic.w	r2, r2, #4
 80002e2:	60da      	str	r2, [r3, #12]
 80002e4:	4770      	bx	lr
  SET_BIT(RCC->APB2RSTR, Periphs);
 80002e6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80002ea:	68da      	ldr	r2, [r3, #12]
 80002ec:	2000      	movs	r0, #0
 80002ee:	f042 0210 	orr.w	r2, r2, #16
 80002f2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80002f4:	68da      	ldr	r2, [r3, #12]
 80002f6:	f022 0210 	bic.w	r2, r2, #16
 80002fa:	60da      	str	r2, [r3, #12]
 80002fc:	4770      	bx	lr
  SET_BIT(RCC->APB2RSTR, Periphs);
 80002fe:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 8000302:	68da      	ldr	r2, [r3, #12]
 8000304:	2000      	movs	r0, #0
 8000306:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800030a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 800030c:	68da      	ldr	r2, [r3, #12]
 800030e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000312:	60da      	str	r2, [r3, #12]
 8000314:	4770      	bx	lr
  SET_BIT(RCC->APB2RSTR, Periphs);
 8000316:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 800031a:	68da      	ldr	r2, [r3, #12]
 800031c:	2000      	movs	r0, #0
 800031e:	f042 0208 	orr.w	r2, r2, #8
 8000322:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8000324:	68da      	ldr	r2, [r3, #12]
 8000326:	f022 0208 	bic.w	r2, r2, #8
 800032a:	60da      	str	r2, [r3, #12]
 800032c:	4770      	bx	lr
  SET_BIT(RCC->APB2RSTR, Periphs);
 800032e:	f503 437c 	add.w	r3, r3, #64512	; 0xfc00
 8000332:	68da      	ldr	r2, [r3, #12]
 8000334:	2000      	movs	r0, #0
 8000336:	f042 0220 	orr.w	r2, r2, #32
 800033a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 800033c:	68da      	ldr	r2, [r3, #12]
 800033e:	f022 0220 	bic.w	r2, r2, #32
 8000342:	60da      	str	r2, [r3, #12]
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	40010800 	.word	0x40010800
 800034c:	40010c00 	.word	0x40010c00
 8000350:	40011000 	.word	0x40011000
 8000354:	40011400 	.word	0x40011400
 8000358:	40011800 	.word	0x40011800

0800035c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800035c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8000360:	680f      	ldr	r7, [r1, #0]
 8000362:	f3c7 270f 	ubfx	r7, r7, #8, #16
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000366:	fa97 f6a7 	rbit	r6, r7
  pinpos = POSITION_VAL(pinmask);
 800036a:	fab6 f686 	clz	r6, r6

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 800036e:	fa37 f306 	lsrs.w	r3, r7, r6
 8000372:	d06e      	beq.n	8000452 <LL_GPIO_Init+0xf6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8000374:	f04f 0c01 	mov.w	ip, #1
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8000378:	f04f 0e0f 	mov.w	lr, #15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 800037c:	f04f 0803 	mov.w	r8, #3
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8000380:	f04f 0a04 	mov.w	sl, #4
 8000384:	e056      	b.n	8000434 <LL_GPIO_Init+0xd8>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
      {
        currentpin = (0x00000101uL << pinpos);
 8000386:	f240 1301 	movw	r3, #257	; 0x101
 800038a:	40b3      	lsls	r3, r6
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 800038c:	68c2      	ldr	r2, [r0, #12]
 800038e:	ea4f 2913 	mov.w	r9, r3, lsr #8
 8000392:	fa99 f4a9 	rbit	r4, r9
 8000396:	fab4 f584 	clz	r5, r4
 800039a:	690c      	ldr	r4, [r1, #16]
 800039c:	ea22 0209 	bic.w	r2, r2, r9
 80003a0:	40ac      	lsls	r4, r5
 80003a2:	4322      	orrs	r2, r4
 80003a4:	60c2      	str	r2, [r0, #12]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80003a6:	0e1c      	lsrs	r4, r3, #24
 80003a8:	fa93 f5a3 	rbit	r5, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80003ac:	fab5 f585 	clz	r5, r5
 80003b0:	fa93 f2a3 	rbit	r2, r3
 80003b4:	fab2 f282 	clz	r2, r2
 80003b8:	00ad      	lsls	r5, r5, #2
 80003ba:	ea4f 0982 	mov.w	r9, r2, lsl #2
 80003be:	5902      	ldr	r2, [r0, r4]
 80003c0:	fa0e f505 	lsl.w	r5, lr, r5
 80003c4:	ea22 0505 	bic.w	r5, r2, r5
 80003c8:	684a      	ldr	r2, [r1, #4]
 80003ca:	fa02 f209 	lsl.w	r2, r2, r9
 80003ce:	4315      	orrs	r5, r2
 80003d0:	5105      	str	r5, [r0, r4]
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80003d2:	684a      	ldr	r2, [r1, #4]
 80003d4:	f022 0208 	bic.w	r2, r2, #8
 80003d8:	2a01      	cmp	r2, #1
 80003da:	d127      	bne.n	800042c <LL_GPIO_Init+0xd0>
 80003dc:	fa93 f2a3 	rbit	r2, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80003e0:	fab2 f282 	clz	r2, r2
 80003e4:	fa93 f9a3 	rbit	r9, r3
 80003e8:	fab9 f989 	clz	r9, r9
 80003ec:	0092      	lsls	r2, r2, #2
 80003ee:	fa08 f202 	lsl.w	r2, r8, r2
 80003f2:	ea25 0502 	bic.w	r5, r5, r2
 80003f6:	688a      	ldr	r2, [r1, #8]
 80003f8:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80003fc:	fa02 f209 	lsl.w	r2, r2, r9
 8000400:	432a      	orrs	r2, r5
 8000402:	5102      	str	r2, [r0, r4]
 8000404:	fa93 f9a3 	rbit	r9, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8000408:	fab9 f989 	clz	r9, r9
 800040c:	fa93 f3a3 	rbit	r3, r3
 8000410:	fab3 f383 	clz	r3, r3
 8000414:	68cd      	ldr	r5, [r1, #12]
 8000416:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800041a:	009b      	lsls	r3, r3, #2
 800041c:	fa0a f909 	lsl.w	r9, sl, r9
 8000420:	ea22 0209 	bic.w	r2, r2, r9
 8000424:	fa05 f303 	lsl.w	r3, r5, r3
 8000428:	4313      	orrs	r3, r2
 800042a:	5103      	str	r3, [r0, r4]

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
      }
    }
    pinpos++;
 800042c:	3601      	adds	r6, #1
  while ((pinmask  >> pinpos) != 0u)
 800042e:	fa37 f306 	lsrs.w	r3, r7, r6
 8000432:	d00e      	beq.n	8000452 <LL_GPIO_Init+0xf6>
    if ((pinmask & (1u << pinpos)) != 0u)
 8000434:	fa0c f306 	lsl.w	r3, ip, r6
 8000438:	423b      	tst	r3, r7
 800043a:	d0f7      	beq.n	800042c <LL_GPIO_Init+0xd0>
      if (pinpos < GPIO_PIN_MASK_POS)
 800043c:	2e07      	cmp	r6, #7
 800043e:	d9a2      	bls.n	8000386 <LL_GPIO_Init+0x2a>
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8000440:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8000444:	f1a6 0308 	sub.w	r3, r6, #8
 8000448:	fa02 f303 	lsl.w	r3, r2, r3
 800044c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000450:	e79c      	b.n	800038c <LL_GPIO_Init+0x30>
  }
  return (SUCCESS);
}
 8000452:	2000      	movs	r0, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000458 <LL_GPIO_StructInit>:
  *                          whose fields will be set to default values.
  * @retval None
  */

void LL_GPIO_StructInit(LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000458:	b410      	push	{r4}
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->Pin        = LL_GPIO_PIN_ALL;
  GPIO_InitStruct->Mode       = LL_GPIO_MODE_FLOATING;
 800045a:	2304      	movs	r3, #4
  GPIO_InitStruct->Pin        = LL_GPIO_PIN_ALL;
 800045c:	f06f 447b 	mvn.w	r4, #4211081216	; 0xfb000000
  GPIO_InitStruct->Speed      = LL_GPIO_SPEED_FREQ_LOW;
 8000460:	2102      	movs	r1, #2
  GPIO_InitStruct->OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
  GPIO_InitStruct->Pull       = LL_GPIO_PULL_DOWN;
 8000462:	2200      	movs	r2, #0
  GPIO_InitStruct->Pin        = LL_GPIO_PIN_ALL;
 8000464:	6004      	str	r4, [r0, #0]
  GPIO_InitStruct->Speed      = LL_GPIO_SPEED_FREQ_LOW;
 8000466:	6081      	str	r1, [r0, #8]
  GPIO_InitStruct->Pull       = LL_GPIO_PULL_DOWN;
 8000468:	6102      	str	r2, [r0, #16]
  GPIO_InitStruct->Mode       = LL_GPIO_MODE_FLOATING;
 800046a:	6043      	str	r3, [r0, #4]
  GPIO_InitStruct->OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800046c:	60c3      	str	r3, [r0, #12]
}
 800046e:	bc10      	pop	{r4}
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <LL_TIM_DeInit>:
  ErrorStatus result = SUCCESS;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));

  if (TIMx == TIM2)
 8000474:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000478:	d00a      	beq.n	8000490 <LL_TIM_DeInit+0x1c>
  {
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_TIM2);
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_TIM2);
  }
#if defined(TIM1)
  else if (TIMx == TIM1)
 800047a:	4b1d      	ldr	r3, [pc, #116]	; (80004f0 <LL_TIM_DeInit+0x7c>)
 800047c:	4298      	cmp	r0, r3
 800047e:	d01e      	beq.n	80004be <LL_TIM_DeInit+0x4a>
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_TIM1);
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_TIM1);
  }
#endif
#if defined(TIM3)
  else if (TIMx == TIM3)
 8000480:	4b1c      	ldr	r3, [pc, #112]	; (80004f4 <LL_TIM_DeInit+0x80>)
 8000482:	4298      	cmp	r0, r3
 8000484:	d00f      	beq.n	80004a6 <LL_TIM_DeInit+0x32>
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_TIM3);
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_TIM3);
  }
#endif
#if defined(TIM4)
  else if (TIMx == TIM4)
 8000486:	4b1c      	ldr	r3, [pc, #112]	; (80004f8 <LL_TIM_DeInit+0x84>)
 8000488:	4298      	cmp	r0, r3
 800048a:	d024      	beq.n	80004d6 <LL_TIM_DeInit+0x62>
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_TIM17);
  }
#endif
  else
  {
    result = ERROR;
 800048c:	2001      	movs	r0, #1
  }

  return result;
}
 800048e:	4770      	bx	lr
  SET_BIT(RCC->APB1RSTR, Periphs);
 8000490:	4b1a      	ldr	r3, [pc, #104]	; (80004fc <LL_TIM_DeInit+0x88>)
  ErrorStatus result = SUCCESS;
 8000492:	2000      	movs	r0, #0
 8000494:	691a      	ldr	r2, [r3, #16]
 8000496:	f042 0201 	orr.w	r2, r2, #1
 800049a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->APB1RSTR, Periphs);
 800049c:	691a      	ldr	r2, [r3, #16]
 800049e:	f022 0201 	bic.w	r2, r2, #1
 80004a2:	611a      	str	r2, [r3, #16]
 80004a4:	4770      	bx	lr
  SET_BIT(RCC->APB1RSTR, Periphs);
 80004a6:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 80004aa:	691a      	ldr	r2, [r3, #16]
 80004ac:	2000      	movs	r0, #0
 80004ae:	f042 0202 	orr.w	r2, r2, #2
 80004b2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->APB1RSTR, Periphs);
 80004b4:	691a      	ldr	r2, [r3, #16]
 80004b6:	f022 0202 	bic.w	r2, r2, #2
 80004ba:	611a      	str	r2, [r3, #16]
 80004bc:	4770      	bx	lr
  SET_BIT(RCC->APB2RSTR, Periphs);
 80004be:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80004c2:	68da      	ldr	r2, [r3, #12]
 80004c4:	2000      	movs	r0, #0
 80004c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80004ca:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80004cc:	68da      	ldr	r2, [r3, #12]
 80004ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80004d2:	60da      	str	r2, [r3, #12]
 80004d4:	4770      	bx	lr
  SET_BIT(RCC->APB1RSTR, Periphs);
 80004d6:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80004da:	691a      	ldr	r2, [r3, #16]
 80004dc:	2000      	movs	r0, #0
 80004de:	f042 0204 	orr.w	r2, r2, #4
 80004e2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->APB1RSTR, Periphs);
 80004e4:	691a      	ldr	r2, [r3, #16]
 80004e6:	f022 0204 	bic.w	r2, r2, #4
 80004ea:	611a      	str	r2, [r3, #16]
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	40012c00 	.word	0x40012c00
 80004f4:	40000400 	.word	0x40000400
 80004f8:	40000800 	.word	0x40000800
 80004fc:	40021000 	.word	0x40021000

08000500 <LL_TIM_StructInit>:
  * @retval None
  */
void LL_TIM_StructInit(LL_TIM_InitTypeDef *TIM_InitStruct)
{
  /* Set the default configuration */
  TIM_InitStruct->Prescaler         = (uint16_t)0x0000;
 8000500:	2300      	movs	r3, #0
  TIM_InitStruct->CounterMode       = LL_TIM_COUNTERMODE_UP;
  TIM_InitStruct->Autoreload        = 0xFFFFFFFFU;
 8000502:	f04f 32ff 	mov.w	r2, #4294967295
  TIM_InitStruct->Prescaler         = (uint16_t)0x0000;
 8000506:	8003      	strh	r3, [r0, #0]
  TIM_InitStruct->Autoreload        = 0xFFFFFFFFU;
 8000508:	6082      	str	r2, [r0, #8]
  TIM_InitStruct->CounterMode       = LL_TIM_COUNTERMODE_UP;
 800050a:	6043      	str	r3, [r0, #4]
  TIM_InitStruct->ClockDivision     = LL_TIM_CLOCKDIVISION_DIV1;
  TIM_InitStruct->RepetitionCounter = 0x00000000U;
 800050c:	e9c0 3303 	strd	r3, r3, [r0, #12]
}
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8000514:	b430      	push	{r4, r5}
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000516:	4d19      	ldr	r5, [pc, #100]	; (800057c <LL_TIM_Init+0x68>)
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8000518:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800051a:	42a8      	cmp	r0, r5
 800051c:	688a      	ldr	r2, [r1, #8]
 800051e:	880c      	ldrh	r4, [r1, #0]
 8000520:	d01d      	beq.n	800055e <LL_TIM_Init+0x4a>
 8000522:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000526:	d011      	beq.n	800054c <LL_TIM_Init+0x38>
 8000528:	f5a5 3594 	sub.w	r5, r5, #75776	; 0x12800
 800052c:	42a8      	cmp	r0, r5
 800052e:	d00d      	beq.n	800054c <LL_TIM_Init+0x38>
 8000530:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000534:	42a8      	cmp	r0, r5
 8000536:	d009      	beq.n	800054c <LL_TIM_Init+0x38>
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8000538:	6003      	str	r3, [r0, #0]
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
  WRITE_REG(TIMx->ARR, AutoReload);
 800053a:	62c2      	str	r2, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 800053c:	6284      	str	r4, [r0, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800053e:	6943      	ldr	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 8000540:	bc30      	pop	{r4, r5}
 8000542:	f043 0301 	orr.w	r3, r3, #1
 8000546:	6143      	str	r3, [r0, #20]
 8000548:	2000      	movs	r0, #0
 800054a:	4770      	bx	lr
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800054c:	684d      	ldr	r5, [r1, #4]
 800054e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000552:	432b      	orrs	r3, r5
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8000554:	68c9      	ldr	r1, [r1, #12]
 8000556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800055a:	430b      	orrs	r3, r1
 800055c:	e7ec      	b.n	8000538 <LL_TIM_Init+0x24>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800055e:	684d      	ldr	r5, [r1, #4]
 8000560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000564:	432b      	orrs	r3, r5
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8000566:	68cd      	ldr	r5, [r1, #12]
 8000568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800056c:	432b      	orrs	r3, r5
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800056e:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8000570:	62c2      	str	r2, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 8000572:	6284      	str	r4, [r0, #40]	; 0x28
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8000574:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8000576:	6303      	str	r3, [r0, #48]	; 0x30
 8000578:	e7e1      	b.n	800053e <LL_TIM_Init+0x2a>
 800057a:	bf00      	nop
 800057c:	40012c00 	.word	0x40012c00

08000580 <LL_TIM_OC_StructInit>:
  * @retval None
  */
void LL_TIM_OC_StructInit(LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  /* Set the default configuration */
  TIM_OC_InitStruct->OCMode       = LL_TIM_OCMODE_FROZEN;
 8000580:	2300      	movs	r3, #0
  TIM_OC_InitStruct->OCState      = LL_TIM_OCSTATE_DISABLE;
 8000582:	e9c0 3300 	strd	r3, r3, [r0]
  TIM_OC_InitStruct->OCNState     = LL_TIM_OCSTATE_DISABLE;
  TIM_OC_InitStruct->CompareValue = 0x00000000U;
 8000586:	e9c0 3302 	strd	r3, r3, [r0, #8]
  TIM_OC_InitStruct->OCPolarity   = LL_TIM_OCPOLARITY_HIGH;
  TIM_OC_InitStruct->OCNPolarity  = LL_TIM_OCPOLARITY_HIGH;
 800058a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  TIM_OC_InitStruct->OCIdleState  = LL_TIM_OCIDLESTATE_LOW;
  TIM_OC_InitStruct->OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 800058e:	e9c0 3306 	strd	r3, r3, [r0, #24]
}
 8000592:	4770      	bx	lr

08000594 <LL_TIM_OC_Init>:
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  ErrorStatus result = ERROR;

  switch (Channel)
 8000594:	2910      	cmp	r1, #16
{
 8000596:	b470      	push	{r4, r5, r6}
 8000598:	4603      	mov	r3, r0
  switch (Channel)
 800059a:	d06d      	beq.n	8000678 <LL_TIM_OC_Init+0xe4>
 800059c:	d948      	bls.n	8000630 <LL_TIM_OC_Init+0x9c>
 800059e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80005a2:	d024      	beq.n	80005ee <LL_TIM_OC_Init+0x5a>
 80005a4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80005a8:	d163      	bne.n	8000672 <LL_TIM_OC_Init+0xde>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80005aa:	6a00      	ldr	r0, [r0, #32]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80005ac:	6915      	ldr	r5, [r2, #16]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80005ae:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 80005b2:	6218      	str	r0, [r3, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80005b4:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80005b6:	685e      	ldr	r6, [r3, #4]
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80005b8:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 80005bc:	ea41 3105 	orr.w	r1, r1, r5, lsl #12

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80005c0:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80005c4:	e9d2 0500 	ldrd	r0, r5, [r2]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80005c8:	69dc      	ldr	r4, [r3, #28]
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80005ca:	ea41 3105 	orr.w	r1, r1, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80005ce:	4d5d      	ldr	r5, [pc, #372]	; (8000744 <LL_TIM_OC_Init+0x1b0>)
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80005d0:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80005d4:	42ab      	cmp	r3, r5
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80005d6:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80005da:	f000 80ac 	beq.w	8000736 <LL_TIM_OC_Init+0x1a2>

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80005de:	68d2      	ldr	r2, [r2, #12]
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80005e0:	2000      	movs	r0, #0
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80005e2:	605e      	str	r6, [r3, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80005e4:	61dc      	str	r4, [r3, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80005e6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80005e8:	bc70      	pop	{r4, r5, r6}

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80005ea:	6219      	str	r1, [r3, #32]
}
 80005ec:	4770      	bx	lr
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80005ee:	6a00      	ldr	r0, [r0, #32]
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80005f0:	6915      	ldr	r5, [r2, #16]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80005f2:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 80005f6:	6218      	str	r0, [r3, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80005f8:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80005fa:	685e      	ldr	r6, [r3, #4]
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80005fc:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8000600:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8000604:	f421 7180 	bic.w	r1, r1, #256	; 0x100
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8000608:	e9d2 0500 	ldrd	r0, r5, [r2]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800060c:	69dc      	ldr	r4, [r3, #28]
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800060e:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000612:	4d4c      	ldr	r5, [pc, #304]	; (8000744 <LL_TIM_OC_Init+0x1b0>)
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8000614:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000618:	42ab      	cmp	r3, r5
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800061a:	ea44 0400 	orr.w	r4, r4, r0
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800061e:	d075      	beq.n	800070c <LL_TIM_OC_Init+0x178>
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8000620:	68d2      	ldr	r2, [r2, #12]
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8000622:	2000      	movs	r0, #0
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000624:	605e      	str	r6, [r3, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8000626:	61dc      	str	r4, [r3, #28]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8000628:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800062a:	bc70      	pop	{r4, r5, r6}
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800062c:	6219      	str	r1, [r3, #32]
}
 800062e:	4770      	bx	lr
  switch (Channel)
 8000630:	2901      	cmp	r1, #1
 8000632:	d11e      	bne.n	8000672 <LL_TIM_OC_Init+0xde>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8000634:	6a00      	ldr	r0, [r0, #32]
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8000636:	6915      	ldr	r5, [r2, #16]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8000638:	f020 0001 	bic.w	r0, r0, #1
 800063c:	6218      	str	r0, [r3, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800063e:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8000640:	685e      	ldr	r6, [r3, #4]
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8000642:	f021 0102 	bic.w	r1, r1, #2
 8000646:	4329      	orrs	r1, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8000648:	f021 0101 	bic.w	r1, r1, #1
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800064c:	e9d2 0500 	ldrd	r0, r5, [r2]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8000650:	699c      	ldr	r4, [r3, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8000652:	4329      	orrs	r1, r5
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000654:	4d3b      	ldr	r5, [pc, #236]	; (8000744 <LL_TIM_OC_Init+0x1b0>)
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8000656:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800065a:	42ab      	cmp	r3, r5
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800065c:	ea44 0400 	orr.w	r4, r4, r0
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000660:	d040      	beq.n	80006e4 <LL_TIM_OC_Init+0x150>
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8000662:	68d2      	ldr	r2, [r2, #12]
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8000664:	2000      	movs	r0, #0
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000666:	605e      	str	r6, [r3, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8000668:	619c      	str	r4, [r3, #24]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800066a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800066c:	bc70      	pop	{r4, r5, r6}
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800066e:	6219      	str	r1, [r3, #32]
}
 8000670:	4770      	bx	lr
  ErrorStatus result = ERROR;
 8000672:	2001      	movs	r0, #1
}
 8000674:	bc70      	pop	{r4, r5, r6}
 8000676:	4770      	bx	lr
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8000678:	6a00      	ldr	r0, [r0, #32]
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800067a:	6915      	ldr	r5, [r2, #16]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800067c:	f020 0010 	bic.w	r0, r0, #16
 8000680:	6218      	str	r0, [r3, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8000682:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8000684:	685e      	ldr	r6, [r3, #4]
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8000686:	f021 0120 	bic.w	r1, r1, #32
 800068a:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800068e:	f021 0110 	bic.w	r1, r1, #16
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8000692:	e9d2 0500 	ldrd	r0, r5, [r2]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8000696:	699c      	ldr	r4, [r3, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8000698:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800069c:	4d29      	ldr	r5, [pc, #164]	; (8000744 <LL_TIM_OC_Init+0x1b0>)
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800069e:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80006a2:	42ab      	cmp	r3, r5
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80006a4:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80006a8:	d007      	beq.n	80006ba <LL_TIM_OC_Init+0x126>
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80006aa:	68d2      	ldr	r2, [r2, #12]
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80006ac:	2000      	movs	r0, #0
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80006ae:	605e      	str	r6, [r3, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80006b0:	619c      	str	r4, [r3, #24]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80006b2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80006b4:	bc70      	pop	{r4, r5, r6}
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80006b6:	6219      	str	r1, [r3, #32]
}
 80006b8:	4770      	bx	lr
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80006ba:	f021 0180 	bic.w	r1, r1, #128	; 0x80
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80006be:	f426 6680 	bic.w	r6, r6, #1024	; 0x400
 80006c2:	e9d2 5005 	ldrd	r5, r0, [r2, #20]
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80006c6:	ea41 1185 	orr.w	r1, r1, r5, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80006ca:	ea46 0680 	orr.w	r6, r6, r0, lsl #2
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80006ce:	6895      	ldr	r5, [r2, #8]
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80006d0:	69d0      	ldr	r0, [r2, #28]
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80006d2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80006d6:	f426 6600 	bic.w	r6, r6, #2048	; 0x800
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80006da:	ea41 1185 	orr.w	r1, r1, r5, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80006de:	ea46 06c0 	orr.w	r6, r6, r0, lsl #3
 80006e2:	e7e2      	b.n	80006aa <LL_TIM_OC_Init+0x116>
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80006e4:	f021 0108 	bic.w	r1, r1, #8
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80006e8:	f426 7680 	bic.w	r6, r6, #256	; 0x100
 80006ec:	e9d2 5005 	ldrd	r5, r0, [r2, #20]
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80006f0:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80006f4:	4306      	orrs	r6, r0
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80006f6:	6895      	ldr	r5, [r2, #8]
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80006f8:	69d0      	ldr	r0, [r2, #28]
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80006fa:	f021 0104 	bic.w	r1, r1, #4
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80006fe:	f426 7600 	bic.w	r6, r6, #512	; 0x200
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8000702:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8000706:	ea46 0640 	orr.w	r6, r6, r0, lsl #1
 800070a:	e7aa      	b.n	8000662 <LL_TIM_OC_Init+0xce>
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800070c:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8000710:	f426 5680 	bic.w	r6, r6, #4096	; 0x1000
 8000714:	e9d2 5005 	ldrd	r5, r0, [r2, #20]
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8000718:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800071c:	ea46 1600 	orr.w	r6, r6, r0, lsl #4
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8000720:	6895      	ldr	r5, [r2, #8]
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8000722:	69d0      	ldr	r0, [r2, #28]
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8000724:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8000728:	f426 5600 	bic.w	r6, r6, #8192	; 0x2000
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800072c:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8000730:	ea46 1640 	orr.w	r6, r6, r0, lsl #5
 8000734:	e774      	b.n	8000620 <LL_TIM_OC_Init+0x8c>
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8000736:	6990      	ldr	r0, [r2, #24]
 8000738:	f426 4680 	bic.w	r6, r6, #16384	; 0x4000
 800073c:	ea46 1680 	orr.w	r6, r6, r0, lsl #6
 8000740:	e74d      	b.n	80005de <LL_TIM_OC_Init+0x4a>
 8000742:	bf00      	nop
 8000744:	40012c00 	.word	0x40012c00

08000748 <LL_TIM_IC_StructInit>:
  TIM_ICInitStruct->ICPolarity    = LL_TIM_IC_POLARITY_RISING;
 8000748:	2300      	movs	r3, #0
 800074a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  TIM_ICInitStruct->ICFilter      = LL_TIM_IC_FILTER_FDIV1;
 800074e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  TIM_ICInitStruct->ICPolarity    = LL_TIM_IC_POLARITY_RISING;
 8000752:	e9c0 3200 	strd	r3, r2, [r0]
}
 8000756:	4770      	bx	lr

08000758 <LL_TIM_IC_Init>:
  switch (Channel)
 8000758:	2910      	cmp	r1, #16
{
 800075a:	b430      	push	{r4, r5}
  switch (Channel)
 800075c:	d05b      	beq.n	8000816 <LL_TIM_IC_Init+0xbe>
 800075e:	d93b      	bls.n	80007d8 <LL_TIM_IC_Init+0x80>
 8000760:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8000764:	d01d      	beq.n	80007a2 <LL_TIM_IC_Init+0x4a>
 8000766:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800076a:	d151      	bne.n	8000810 <LL_TIM_IC_Init+0xb8>
  assert_param(IS_LL_TIM_ACTIVEINPUT(TIM_ICInitStruct->ICActiveInput));
  assert_param(IS_LL_TIM_ICPSC(TIM_ICInitStruct->ICPrescaler));
  assert_param(IS_LL_TIM_IC_FILTER(TIM_ICInitStruct->ICFilter));

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC4E;
 800076c:	6a03      	ldr	r3, [r0, #32]

  /* Select the Input and set the filter and the prescaler value */
  MODIFY_REG(TIMx->CCMR2,
 800076e:	6851      	ldr	r1, [r2, #4]
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC4E;
 8000770:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000774:	6203      	str	r3, [r0, #32]
  MODIFY_REG(TIMx->CCMR2,
 8000776:	68d5      	ldr	r5, [r2, #12]
 8000778:	69c3      	ldr	r3, [r0, #28]
 800077a:	6894      	ldr	r4, [r2, #8]
 800077c:	4329      	orrs	r1, r5
 800077e:	4321      	orrs	r1, r4
 8000780:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000784:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
 8000788:	61c3      	str	r3, [r0, #28]
             (TIM_CCMR2_CC4S | TIM_CCMR2_IC4F | TIM_CCMR2_IC4PSC),
             (TIM_ICInitStruct->ICActiveInput | TIM_ICInitStruct->ICFilter | TIM_ICInitStruct->ICPrescaler) >> 8U);

  /* Select the Polarity and set the CC4E Bit */
  MODIFY_REG(TIMx->CCER,
 800078a:	6813      	ldr	r3, [r2, #0]
 800078c:	6a02      	ldr	r2, [r0, #32]
 800078e:	031b      	lsls	r3, r3, #12
 8000790:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000794:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000798:	4313      	orrs	r3, r2
 800079a:	6203      	str	r3, [r0, #32]
}
 800079c:	bc30      	pop	{r4, r5}
      result = IC4Config(TIMx, TIM_IC_InitStruct);
 800079e:	2000      	movs	r0, #0
}
 80007a0:	4770      	bx	lr
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC3E;
 80007a2:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(TIMx->CCMR2,
 80007a4:	6851      	ldr	r1, [r2, #4]
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC3E;
 80007a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007aa:	6203      	str	r3, [r0, #32]
  MODIFY_REG(TIMx->CCMR2,
 80007ac:	68d5      	ldr	r5, [r2, #12]
 80007ae:	69c3      	ldr	r3, [r0, #28]
 80007b0:	6894      	ldr	r4, [r2, #8]
 80007b2:	4329      	orrs	r1, r5
 80007b4:	4321      	orrs	r1, r4
 80007b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80007ba:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 80007be:	61c3      	str	r3, [r0, #28]
  MODIFY_REG(TIMx->CCER,
 80007c0:	6813      	ldr	r3, [r2, #0]
 80007c2:	6a02      	ldr	r2, [r0, #32]
 80007c4:	021b      	lsls	r3, r3, #8
 80007c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ca:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 80007ce:	4313      	orrs	r3, r2
 80007d0:	6203      	str	r3, [r0, #32]
}
 80007d2:	bc30      	pop	{r4, r5}
      result = IC3Config(TIMx, TIM_IC_InitStruct);
 80007d4:	2000      	movs	r0, #0
}
 80007d6:	4770      	bx	lr
  switch (Channel)
 80007d8:	2901      	cmp	r1, #1
 80007da:	d119      	bne.n	8000810 <LL_TIM_IC_Init+0xb8>
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC1E;
 80007dc:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(TIMx->CCMR1,
 80007de:	6851      	ldr	r1, [r2, #4]
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC1E;
 80007e0:	f023 0301 	bic.w	r3, r3, #1
 80007e4:	6203      	str	r3, [r0, #32]
  MODIFY_REG(TIMx->CCMR1,
 80007e6:	68d5      	ldr	r5, [r2, #12]
 80007e8:	6983      	ldr	r3, [r0, #24]
 80007ea:	6894      	ldr	r4, [r2, #8]
 80007ec:	4329      	orrs	r1, r5
 80007ee:	4321      	orrs	r1, r4
 80007f0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80007f4:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 80007f8:	6183      	str	r3, [r0, #24]
  MODIFY_REG(TIMx->CCER,
 80007fa:	6813      	ldr	r3, [r2, #0]
 80007fc:	6a02      	ldr	r2, [r0, #32]
 80007fe:	f043 0301 	orr.w	r3, r3, #1
 8000802:	f022 020a 	bic.w	r2, r2, #10
 8000806:	4313      	orrs	r3, r2
 8000808:	6203      	str	r3, [r0, #32]
}
 800080a:	bc30      	pop	{r4, r5}
      result = IC1Config(TIMx, TIM_IC_InitStruct);
 800080c:	2000      	movs	r0, #0
}
 800080e:	4770      	bx	lr
  ErrorStatus result = ERROR;
 8000810:	2001      	movs	r0, #1
}
 8000812:	bc30      	pop	{r4, r5}
 8000814:	4770      	bx	lr
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC2E;
 8000816:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(TIMx->CCMR1,
 8000818:	6851      	ldr	r1, [r2, #4]
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC2E;
 800081a:	f023 0310 	bic.w	r3, r3, #16
 800081e:	6203      	str	r3, [r0, #32]
  MODIFY_REG(TIMx->CCMR1,
 8000820:	68d5      	ldr	r5, [r2, #12]
 8000822:	6983      	ldr	r3, [r0, #24]
 8000824:	6894      	ldr	r4, [r2, #8]
 8000826:	4329      	orrs	r1, r5
 8000828:	4321      	orrs	r1, r4
 800082a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800082e:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
 8000832:	6183      	str	r3, [r0, #24]
  MODIFY_REG(TIMx->CCER,
 8000834:	6813      	ldr	r3, [r2, #0]
 8000836:	6a02      	ldr	r2, [r0, #32]
 8000838:	011b      	lsls	r3, r3, #4
 800083a:	f043 0310 	orr.w	r3, r3, #16
 800083e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8000842:	4313      	orrs	r3, r2
 8000844:	6203      	str	r3, [r0, #32]
}
 8000846:	bc30      	pop	{r4, r5}
      result = IC2Config(TIMx, TIM_IC_InitStruct);
 8000848:	2000      	movs	r0, #0
}
 800084a:	4770      	bx	lr

0800084c <LL_TIM_ENCODER_StructInit>:
  TIM_EncoderInitStruct->IC1Polarity    = LL_TIM_IC_POLARITY_RISING;
 800084c:	2300      	movs	r3, #0
  TIM_EncoderInitStruct->IC1ActiveInput = LL_TIM_ACTIVEINPUT_DIRECTTI;
 800084e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  TIM_EncoderInitStruct->EncoderMode    = LL_TIM_ENCODERMODE_X2_TI1;
 8000852:	2101      	movs	r1, #1
  TIM_EncoderInitStruct->IC1Filter      = LL_TIM_IC_FILTER_FDIV1;
 8000854:	e9c0 3303 	strd	r3, r3, [r0, #12]
  TIM_EncoderInitStruct->IC1Polarity    = LL_TIM_IC_POLARITY_RISING;
 8000858:	e9c0 1300 	strd	r1, r3, [r0]
  TIM_EncoderInitStruct->IC2Polarity    = LL_TIM_IC_POLARITY_RISING;
 800085c:	6143      	str	r3, [r0, #20]
  TIM_EncoderInitStruct->IC2Filter      = LL_TIM_IC_FILTER_FDIV1;
 800085e:	e9c0 3307 	strd	r3, r3, [r0, #28]
  TIM_EncoderInitStruct->IC1ActiveInput = LL_TIM_ACTIVEINPUT_DIRECTTI;
 8000862:	6082      	str	r2, [r0, #8]
  TIM_EncoderInitStruct->IC2ActiveInput = LL_TIM_ACTIVEINPUT_DIRECTTI;
 8000864:	6182      	str	r2, [r0, #24]
}
 8000866:	4770      	bx	lr

08000868 <LL_TIM_ENCODER_Init>:
{
 8000868:	4602      	mov	r2, r0
  TIMx->CCER &= (uint32_t)~(TIM_CCER_CC1E | TIM_CCER_CC2E);
 800086a:	6a03      	ldr	r3, [r0, #32]
{
 800086c:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= (uint32_t)~(TIM_CCER_CC1E | TIM_CCER_CC2E);
 800086e:	f023 0311 	bic.w	r3, r3, #17
  tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC1ActiveInput >> 16U);
 8000872:	894c      	ldrh	r4, [r1, #10]
  TIMx->CCER &= (uint32_t)~(TIM_CCER_CC1E | TIM_CCER_CC2E);
 8000874:	6203      	str	r3, [r0, #32]
  tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC1Filter >> 16U);
 8000876:	8a4b      	ldrh	r3, [r1, #18]
  tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC1Prescaler >> 16U);
 8000878:	89cd      	ldrh	r5, [r1, #14]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800087a:	6980      	ldr	r0, [r0, #24]
  tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC1Prescaler >> 16U);
 800087c:	431c      	orrs	r4, r3
  tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC2Filter >> 8U);
 800087e:	6a0b      	ldr	r3, [r1, #32]
  tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC1Prescaler >> 16U);
 8000880:	432c      	orrs	r4, r5
  tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC2ActiveInput >> 8U);
 8000882:	698d      	ldr	r5, [r1, #24]
  tmpccmr1 &= (uint32_t)~(TIM_CCMR1_CC1S | TIM_CCMR1_IC1F  | TIM_CCMR1_IC1PSC);
 8000884:	f020 0eff 	bic.w	lr, r0, #255	; 0xff
  tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC2Filter >> 8U);
 8000888:	0a1b      	lsrs	r3, r3, #8
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800088a:	f8d2 c020 	ldr.w	ip, [r2, #32]
  tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC1Prescaler >> 16U);
 800088e:	ea44 040e 	orr.w	r4, r4, lr
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 8000892:	6897      	ldr	r7, [r2, #8]
  tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC2Prescaler >> 8U);
 8000894:	f8d1 e01c 	ldr.w	lr, [r1, #28]
 8000898:	ea43 2315 	orr.w	r3, r3, r5, lsr #8
  tmpccer |= (uint32_t)(TIM_EncoderInitStruct->IC2Polarity << 4U);
 800089c:	694d      	ldr	r5, [r1, #20]
 800089e:	e9d1 6000 	ldrd	r6, r0, [r1]
  tmpccer |= (uint32_t)(TIM_CCER_CC1E | TIM_CCER_CC2E);
 80008a2:	f040 0111 	orr.w	r1, r0, #17
  tmpccer &= (uint32_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP | TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80008a6:	f02c 0caa 	bic.w	ip, ip, #170	; 0xaa
 80008aa:	f027 0007 	bic.w	r0, r7, #7
  tmpccmr1 &= (uint32_t)~(TIM_CCMR1_CC2S | TIM_CCMR1_IC2F  | TIM_CCMR1_IC2PSC);
 80008ae:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC2Prescaler >> 8U);
 80008b2:	ea43 231e 	orr.w	r3, r3, lr, lsr #8
  tmpccer |= (uint32_t)(TIM_CCER_CC1E | TIM_CCER_CC2E);
 80008b6:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 80008ba:	4330      	orrs	r0, r6
  tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC2Prescaler >> 8U);
 80008bc:	4323      	orrs	r3, r4
  tmpccer |= (uint32_t)(TIM_CCER_CC1E | TIM_CCER_CC2E);
 80008be:	ea41 010c 	orr.w	r1, r1, ip
 80008c2:	6090      	str	r0, [r2, #8]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80008c4:	6193      	str	r3, [r2, #24]
}
 80008c6:	2000      	movs	r0, #0
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80008c8:	6211      	str	r1, [r2, #32]
}
 80008ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080008cc <LL_TIM_HALLSENSOR_StructInit>:
  TIM_HallSensorInitStruct->IC1Polarity       = LL_TIM_IC_POLARITY_RISING;
 80008cc:	2300      	movs	r3, #0
  TIM_HallSensorInitStruct->IC1Prescaler      = LL_TIM_ICPSC_DIV1;
 80008ce:	e9c0 3300 	strd	r3, r3, [r0]
  TIM_HallSensorInitStruct->CommutationDelay  = 0U;
 80008d2:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
 80008d6:	4770      	bx	lr

080008d8 <LL_TIM_HALLSENSOR_Init>:
{
 80008d8:	4603      	mov	r3, r0
  TIMx->CCER &= (uint32_t)~(TIM_CCER_CC1E | TIM_CCER_CC2E);
 80008da:	6a00      	ldr	r0, [r0, #32]
{
 80008dc:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= (uint32_t)~(TIM_CCER_CC1E | TIM_CCER_CC2E);
 80008de:	f020 0011 	bic.w	r0, r0, #17
  tmpccmr1 |= (uint32_t)(TIM_HallSensorInitStruct->IC1Filter >> 16U);
 80008e2:	894a      	ldrh	r2, [r1, #10]
  TIMx->CCER &= (uint32_t)~(TIM_CCER_CC1E | TIM_CCER_CC2E);
 80008e4:	6218      	str	r0, [r3, #32]
  tmpccmr1 |= (uint32_t)(TIM_HallSensorInitStruct->IC1Prescaler >> 16U);
 80008e6:	88c8      	ldrh	r0, [r1, #6]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80008e8:	685d      	ldr	r5, [r3, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80008ea:	699f      	ldr	r7, [r3, #24]
  tmpccmr1 |= (uint32_t)(TIM_HallSensorInitStruct->IC1Prescaler >> 16U);
 80008ec:	4302      	orrs	r2, r0
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80008ee:	6a1e      	ldr	r6, [r3, #32]
  tmpccer |= (uint32_t)(TIM_CCER_CC1E | TIM_CCER_CC2E);
 80008f0:	6808      	ldr	r0, [r1, #0]
  tmpsmcr = LL_TIM_ReadReg(TIMx, SMCR);
 80008f2:	689c      	ldr	r4, [r3, #8]
  tmpccmr1 &= (uint32_t)~(TIM_CCMR1_CC1S | TIM_CCMR1_IC1F  | TIM_CCMR1_IC1PSC);
 80008f4:	f027 07ff 	bic.w	r7, r7, #255	; 0xff
  tmpccmr1 |= (uint32_t)(TIM_HallSensorInitStruct->IC1Prescaler >> 16U);
 80008f8:	f042 0203 	orr.w	r2, r2, #3
 80008fc:	433a      	orrs	r2, r7
  tmpccer |= (uint32_t)(TIM_CCER_CC1E | TIM_CCER_CC2E);
 80008fe:	f040 0011 	orr.w	r0, r0, #17
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_HallSensorInitStruct->CommutationDelay);
 8000902:	68cf      	ldr	r7, [r1, #12]
  tmpccer &= (uint32_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP | TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000904:	f026 06aa 	bic.w	r6, r6, #170	; 0xaa
  tmpsmcr &= (uint32_t)~(TIM_SMCR_TS | TIM_SMCR_SMS);
 8000908:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  tmpccmr1 &= (uint32_t)~(TIM_CCMR1_OC2M | TIM_CCMR1_OC2FE  | TIM_CCMR1_OC2PE  | TIM_CCMR1_OC2CE);
 800090c:	f422 427c 	bic.w	r2, r2, #64512	; 0xfc00
  tmpccer |= (uint32_t)(TIM_CCER_CC1E | TIM_CCER_CC2E);
 8000910:	4306      	orrs	r6, r0
  tmpcr2 |= LL_TIM_TRGO_OC2REF;
 8000912:	f045 05d0 	orr.w	r5, r5, #208	; 0xd0
  tmpsmcr |= LL_TIM_SLAVEMODE_RESET;
 8000916:	f044 0444 	orr.w	r4, r4, #68	; 0x44
  tmpccmr1 |= (uint32_t)(LL_TIM_OCMODE_PWM2 << 8U);
 800091a:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800091e:	605d      	str	r5, [r3, #4]
}
 8000920:	2000      	movs	r0, #0
  LL_TIM_WriteReg(TIMx, SMCR, tmpsmcr);
 8000922:	609c      	str	r4, [r3, #8]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8000924:	619a      	str	r2, [r3, #24]
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000926:	621e      	str	r6, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8000928:	639f      	str	r7, [r3, #56]	; 0x38
}
 800092a:	bcf0      	pop	{r4, r5, r6, r7}
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop

08000930 <LL_TIM_BDTR_StructInit>:
  TIM_BDTRInitStruct->OSSRState       = LL_TIM_OSSR_DISABLE;
 8000930:	2300      	movs	r3, #0
  TIM_BDTRInitStruct->OSSIState       = LL_TIM_OSSI_DISABLE;
 8000932:	e9c0 3300 	strd	r3, r3, [r0]
  TIM_BDTRInitStruct->LockLevel       = LL_TIM_LOCKLEVEL_OFF;
 8000936:	6083      	str	r3, [r0, #8]
  TIM_BDTRInitStruct->DeadTime        = (uint8_t)0x00;
 8000938:	7303      	strb	r3, [r0, #12]
  TIM_BDTRInitStruct->BreakState      = LL_TIM_BREAK_DISABLE;
 800093a:	81c3      	strh	r3, [r0, #14]
  TIM_BDTRInitStruct->AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 800093c:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop

08000944 <LL_TIM_BDTR_Init>:
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8000944:	7b0b      	ldrb	r3, [r1, #12]
{
 8000946:	b410      	push	{r4}
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8000948:	e9d1 2401 	ldrd	r2, r4, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 800094c:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 800094e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000952:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8000954:	680a      	ldr	r2, [r1, #0]
 8000956:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800095a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 800095c:	89ca      	ldrh	r2, [r1, #14]
 800095e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000962:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8000964:	690a      	ldr	r2, [r1, #16]
 8000966:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800096a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 800096c:	694a      	ldr	r2, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 800096e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000972:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8000974:	6443      	str	r3, [r0, #68]	; 0x44
}
 8000976:	bc10      	pop	{r4}
 8000978:	2000      	movs	r0, #0
 800097a:	4770      	bx	lr

0800097c <LL_Init1msTick>:
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800097c:	2100      	movs	r1, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800097e:	2205      	movs	r2, #5
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000980:	b410      	push	{r4}
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000982:	4c05      	ldr	r4, [pc, #20]	; (8000998 <LL_Init1msTick+0x1c>)
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <LL_Init1msTick+0x20>)
 8000986:	fba4 4000 	umull	r4, r0, r4, r0
 800098a:	0980      	lsrs	r0, r0, #6
 800098c:	3801      	subs	r0, #1
 800098e:	6058      	str	r0, [r3, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 8000990:	bc10      	pop	{r4}
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000992:	6099      	str	r1, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	4770      	bx	lr
 8000998:	10624dd3 	.word	0x10624dd3
 800099c:	e000e010 	.word	0xe000e010

080009a0 <LL_mDelay>:
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80009a0:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <LL_mDelay+0x20>)
{
 80009a2:	b082      	sub	sp, #8
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80009a4:	681b      	ldr	r3, [r3, #0]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80009a6:	1c42      	adds	r2, r0, #1
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80009a8:	9301      	str	r3, [sp, #4]
  ((void)tmp);
 80009aa:	9b01      	ldr	r3, [sp, #4]
    Delay++;
  }

  while (Delay)
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80009ac:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <LL_mDelay+0x20>)
    Delay++;
 80009ae:	bf18      	it	ne
 80009b0:	3001      	addne	r0, #1
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80009b2:	6813      	ldr	r3, [r2, #0]
 80009b4:	03db      	lsls	r3, r3, #15
 80009b6:	d5fc      	bpl.n	80009b2 <LL_mDelay+0x12>
  while (Delay)
 80009b8:	3801      	subs	r0, #1
 80009ba:	d1fa      	bne.n	80009b2 <LL_mDelay+0x12>
    {
      Delay--;
    }
  }
}
 80009bc:	b002      	add	sp, #8
 80009be:	4770      	bx	lr
 80009c0:	e000e010 	.word	0xe000e010

080009c4 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80009c4:	4b01      	ldr	r3, [pc, #4]	; (80009cc <LL_SetSystemCoreClock+0x8>)
 80009c6:	6018      	str	r0, [r3, #0]
}
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	20000110 	.word	0x20000110

080009d0 <LL_SetFlashLatency>:
  uint32_t getlatency;
  uint32_t latency = LL_FLASH_LATENCY_0; /* default value 0WS */
  ErrorStatus status = SUCCESS;

  /* Frequency cannot be equal to 0 */
  if (Frequency == 0U)
 80009d0:	b1d8      	cbz	r0, 8000a0a <LL_SetFlashLatency+0x3a>
  {
    status = ERROR;
  }
  else
  {
    if (Frequency > UTILS_LATENCY2_FREQ)
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <LL_SetFlashLatency+0x44>)
 80009d4:	4298      	cmp	r0, r3
 80009d6:	d912      	bls.n	80009fe <LL_SetFlashLatency+0x2e>
    {
      /* 48 < SYSCLK <= 72 => 2WS (3 CPU cycles) */
      latency = LL_FLASH_LATENCY_2;
 80009d8:	2002      	movs	r0, #2
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80009da:	4a0f      	ldr	r2, [pc, #60]	; (8000a18 <LL_SetFlashLatency+0x48>)
 80009dc:	6813      	ldr	r3, [r2, #0]
 80009de:	f023 0307 	bic.w	r3, r3, #7
 80009e2:	4303      	orrs	r3, r0
 80009e4:	6013      	str	r3, [r2, #0]
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80009e6:	6813      	ldr	r3, [r2, #0]
 80009e8:	f003 0307 	and.w	r3, r3, #7
      do
      {
      /* Wait for Flash latency to be updated */
      getlatency = LL_FLASH_GetLatency();
      timeout--;
      } while ((getlatency != latency) && (timeout > 0));
 80009ec:	4298      	cmp	r0, r3
 80009ee:	d00e      	beq.n	8000a0e <LL_SetFlashLatency+0x3e>
 80009f0:	6813      	ldr	r3, [r2, #0]
 80009f2:	f003 0307 	and.w	r3, r3, #7
    status = ERROR;
 80009f6:	1a18      	subs	r0, r3, r0
 80009f8:	bf18      	it	ne
 80009fa:	2001      	movne	r0, #1
 80009fc:	4770      	bx	lr
      if (Frequency > UTILS_LATENCY1_FREQ)
 80009fe:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <LL_SetFlashLatency+0x4c>)
 8000a00:	4298      	cmp	r0, r3
 8000a02:	bf94      	ite	ls
 8000a04:	2000      	movls	r0, #0
 8000a06:	2001      	movhi	r0, #1
 8000a08:	e7e7      	b.n	80009da <LL_SetFlashLatency+0xa>
    status = ERROR;
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	4770      	bx	lr
      {
        status = ERROR;
      }
      else
      {
        status = SUCCESS;
 8000a0e:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	02dc6c00 	.word	0x02dc6c00
 8000a18:	40022000 	.word	0x40022000
 8000a1c:	016e3600 	.word	0x016e3600

08000a20 <LL_PLL_ConfigSystemClock_HSI>:
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000a20:	4b4d      	ldr	r3, [pc, #308]	; (8000b58 <LL_PLL_ConfigSystemClock_HSI+0x138>)
 8000a22:	681a      	ldr	r2, [r3, #0]
static ErrorStatus UTILS_PLL_IsBusy(void)
{
  ErrorStatus status = SUCCESS;

  /* Check if PLL is busy*/
  if (LL_RCC_PLL_IsReady() != 0U)
 8000a24:	0192      	lsls	r2, r2, #6
 8000a26:	d458      	bmi.n	8000ada <LL_PLL_ConfigSystemClock_HSI+0xba>
    UTILS_PLLInitStruct->Prediv = LL_RCC_PREDIV_DIV_2;
 8000a28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
{
 8000a2c:	b4f0      	push	{r4, r5, r6, r7}
  pllfreq = __LL_RCC_CALC_PLLCLK_FREQ(PLL_InputFrequency / ((UTILS_PLLInitStruct->Prediv >> RCC_CFGR_PLLXTPRE_Pos) + 1U), UTILS_PLLInitStruct->PLLMul);
 8000a2e:	6807      	ldr	r7, [r0, #0]
    UTILS_PLLInitStruct->Prediv = LL_RCC_PREDIV_DIV_2;
 8000a30:	6042      	str	r2, [r0, #4]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000a32:	6818      	ldr	r0, [r3, #0]
  pllfreq = __LL_RCC_CALC_PLLCLK_FREQ(PLL_InputFrequency / ((UTILS_PLLInitStruct->Prediv >> RCC_CFGR_PLLXTPRE_Pos) + 1U), UTILS_PLLInitStruct->PLLMul);
 8000a34:	0cba      	lsrs	r2, r7, #18
 8000a36:	4c49      	ldr	r4, [pc, #292]	; (8000b5c <LL_PLL_ConfigSystemClock_HSI+0x13c>)
 8000a38:	3202      	adds	r2, #2
    if (LL_RCC_HSI_IsReady() != 1U)
 8000a3a:	0785      	lsls	r5, r0, #30
  pllfreq = __LL_RCC_CALC_PLLCLK_FREQ(PLL_InputFrequency / ((UTILS_PLLInitStruct->Prediv >> RCC_CFGR_PLLXTPRE_Pos) + 1U), UTILS_PLLInitStruct->PLLMul);
 8000a3c:	fb04 f402 	mul.w	r4, r4, r2
    if (LL_RCC_HSI_IsReady() != 1U)
 8000a40:	d407      	bmi.n	8000a52 <LL_PLL_ConfigSystemClock_HSI+0x32>
 8000a42:	461a      	mov	r2, r3
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000a44:	6818      	ldr	r0, [r3, #0]
 8000a46:	f040 0001 	orr.w	r0, r0, #1
 8000a4a:	6018      	str	r0, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000a4c:	6813      	ldr	r3, [r2, #0]
      while (LL_RCC_HSI_IsReady() != 1U)
 8000a4e:	0798      	lsls	r0, r3, #30
 8000a50:	d5fc      	bpl.n	8000a4c <LL_PLL_ConfigSystemClock_HSI+0x2c>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8000a52:	4a41      	ldr	r2, [pc, #260]	; (8000b58 <LL_PLL_ConfigSystemClock_HSI+0x138>)
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

#if defined(FLASH_ACR_LATENCY)
  /* Calculate current SYSCLK frequency */
  sysclk_frequency_current = (SystemCoreClock << AHBPrescTable[LL_RCC_GetAHBPrescaler() >> RCC_CFGR_HPRE_Pos]);
 8000a54:	4e42      	ldr	r6, [pc, #264]	; (8000b60 <LL_PLL_ConfigSystemClock_HSI+0x140>)
 8000a56:	6853      	ldr	r3, [r2, #4]
 8000a58:	4d42      	ldr	r5, [pc, #264]	; (8000b64 <LL_PLL_ConfigSystemClock_HSI+0x144>)
 8000a5a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000a5e:	433b      	orrs	r3, r7
 8000a60:	6053      	str	r3, [r2, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000a62:	6853      	ldr	r3, [r2, #4]
 8000a64:	682f      	ldr	r7, [r5, #0]
 8000a66:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000a6a:	5cf3      	ldrb	r3, [r6, r3]
 8000a6c:	409f      	lsls	r7, r3
#endif /* FLASH_ACR_LATENCY */

  /* Increasing the number of wait states because of higher CPU frequency */
#if defined (FLASH_ACR_LATENCY)
  if (sysclk_frequency_current < SYSCLK_Frequency)
 8000a6e:	42bc      	cmp	r4, r7
 8000a70:	d839      	bhi.n	8000ae6 <LL_PLL_ConfigSystemClock_HSI+0xc6>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000a72:	4b39      	ldr	r3, [pc, #228]	; (8000b58 <LL_PLL_ConfigSystemClock_HSI+0x138>)
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000a74:	461a      	mov	r2, r3
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000a76:	6818      	ldr	r0, [r3, #0]
 8000a78:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 8000a7c:	6018      	str	r0, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000a7e:	6813      	ldr	r3, [r2, #0]
      }
    }
#endif /* RCC_PLL2_SUPPORT */
    /* Enable PLL */
    LL_RCC_PLL_Enable();
    while (LL_RCC_PLL_IsReady() != 1U)
 8000a80:	019b      	lsls	r3, r3, #6
 8000a82:	d5fc      	bpl.n	8000a7e <LL_PLL_ConfigSystemClock_HSI+0x5e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000a84:	6853      	ldr	r3, [r2, #4]
    {
      /* Wait for PLL ready */
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
 8000a86:	f8d1 c000 	ldr.w	ip, [r1]
 8000a8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a8e:	ea43 030c 	orr.w	r3, r3, ip
 8000a92:	6053      	str	r3, [r2, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000a94:	6853      	ldr	r3, [r2, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000a96:	4830      	ldr	r0, [pc, #192]	; (8000b58 <LL_PLL_ConfigSystemClock_HSI+0x138>)
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000a98:	f023 0303 	bic.w	r3, r3, #3
 8000a9c:	f043 0302 	orr.w	r3, r3, #2
 8000aa0:	6053      	str	r3, [r2, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000aa2:	6843      	ldr	r3, [r0, #4]
 8000aa4:	f003 030c 	and.w	r3, r3, #12
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000aa8:	2b08      	cmp	r3, #8
 8000aaa:	d1fa      	bne.n	8000aa2 <LL_PLL_ConfigSystemClock_HSI+0x82>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000aac:	6843      	ldr	r3, [r0, #4]
 8000aae:	684a      	ldr	r2, [r1, #4]
 8000ab0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	6043      	str	r3, [r0, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000ab8:	6843      	ldr	r3, [r0, #4]
 8000aba:	688a      	ldr	r2, [r1, #8]
 8000abc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000ac0:	4313      	orrs	r3, r2
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
#if defined (FLASH_ACR_LATENCY)
  if (sysclk_frequency_current > SYSCLK_Frequency)
 8000ac2:	42bc      	cmp	r4, r7
 8000ac4:	6043      	str	r3, [r0, #4]
 8000ac6:	d30a      	bcc.n	8000ade <LL_PLL_ConfigSystemClock_HSI+0xbe>
#endif /* FLASH_ACR_LATENCY */

  /* Update SystemCoreClock variable */
  if (status == SUCCESS)
  {
    LL_SetSystemCoreClock(__LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider));
 8000ac8:	f3cc 1c03 	ubfx	ip, ip, #4, #4
 8000acc:	f816 300c 	ldrb.w	r3, [r6, ip]
  SystemCoreClock = HCLKFrequency;
 8000ad0:	2000      	movs	r0, #0
    LL_SetSystemCoreClock(__LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider));
 8000ad2:	40dc      	lsrs	r4, r3
  SystemCoreClock = HCLKFrequency;
 8000ad4:	602c      	str	r4, [r5, #0]
}
 8000ad6:	bcf0      	pop	{r4, r5, r6, r7}
 8000ad8:	4770      	bx	lr
    status = ERROR;
 8000ada:	2001      	movs	r0, #1
}
 8000adc:	4770      	bx	lr
  if (Frequency == 0U)
 8000ade:	b9e4      	cbnz	r4, 8000b1a <LL_PLL_ConfigSystemClock_HSI+0xfa>
}
 8000ae0:	bcf0      	pop	{r4, r5, r6, r7}
    status = ERROR;
 8000ae2:	2001      	movs	r0, #1
}
 8000ae4:	4770      	bx	lr
    if (Frequency > UTILS_LATENCY2_FREQ)
 8000ae6:	4b20      	ldr	r3, [pc, #128]	; (8000b68 <LL_PLL_ConfigSystemClock_HSI+0x148>)
 8000ae8:	429c      	cmp	r4, r3
 8000aea:	d831      	bhi.n	8000b50 <LL_PLL_ConfigSystemClock_HSI+0x130>
      if (Frequency > UTILS_LATENCY1_FREQ)
 8000aec:	481f      	ldr	r0, [pc, #124]	; (8000b6c <LL_PLL_ConfigSystemClock_HSI+0x14c>)
 8000aee:	4284      	cmp	r4, r0
 8000af0:	bf94      	ite	ls
 8000af2:	2000      	movls	r0, #0
 8000af4:	2001      	movhi	r0, #1
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000af6:	4a1e      	ldr	r2, [pc, #120]	; (8000b70 <LL_PLL_ConfigSystemClock_HSI+0x150>)
 8000af8:	6813      	ldr	r3, [r2, #0]
 8000afa:	f023 0307 	bic.w	r3, r3, #7
 8000afe:	4303      	orrs	r3, r0
 8000b00:	6013      	str	r3, [r2, #0]
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000b02:	6813      	ldr	r3, [r2, #0]
 8000b04:	f003 0307 	and.w	r3, r3, #7
      } while ((getlatency != latency) && (timeout > 0));
 8000b08:	4298      	cmp	r0, r3
 8000b0a:	d0b2      	beq.n	8000a72 <LL_PLL_ConfigSystemClock_HSI+0x52>
 8000b0c:	6813      	ldr	r3, [r2, #0]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
      if(getlatency != latency)
 8000b12:	4283      	cmp	r3, r0
 8000b14:	d0ad      	beq.n	8000a72 <LL_PLL_ConfigSystemClock_HSI+0x52>
  if (sysclk_frequency_current > SYSCLK_Frequency)
 8000b16:	42bc      	cmp	r4, r7
 8000b18:	d2e2      	bcs.n	8000ae0 <LL_PLL_ConfigSystemClock_HSI+0xc0>
    if (Frequency > UTILS_LATENCY2_FREQ)
 8000b1a:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <LL_PLL_ConfigSystemClock_HSI+0x148>)
 8000b1c:	429c      	cmp	r4, r3
 8000b1e:	d819      	bhi.n	8000b54 <LL_PLL_ConfigSystemClock_HSI+0x134>
      if (Frequency > UTILS_LATENCY1_FREQ)
 8000b20:	4a12      	ldr	r2, [pc, #72]	; (8000b6c <LL_PLL_ConfigSystemClock_HSI+0x14c>)
 8000b22:	4294      	cmp	r4, r2
 8000b24:	bf94      	ite	ls
 8000b26:	2200      	movls	r2, #0
 8000b28:	2201      	movhi	r2, #1
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000b2a:	4811      	ldr	r0, [pc, #68]	; (8000b70 <LL_PLL_ConfigSystemClock_HSI+0x150>)
 8000b2c:	6803      	ldr	r3, [r0, #0]
 8000b2e:	f023 0307 	bic.w	r3, r3, #7
 8000b32:	4313      	orrs	r3, r2
 8000b34:	6003      	str	r3, [r0, #0]
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000b36:	6803      	ldr	r3, [r0, #0]
 8000b38:	f003 0307 	and.w	r3, r3, #7
      } while ((getlatency != latency) && (timeout > 0));
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d004      	beq.n	8000b4a <LL_PLL_ConfigSystemClock_HSI+0x12a>
 8000b40:	6803      	ldr	r3, [r0, #0]
 8000b42:	f003 0307 	and.w	r3, r3, #7
      if(getlatency != latency)
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d1ca      	bne.n	8000ae0 <LL_PLL_ConfigSystemClock_HSI+0xc0>
 8000b4a:	f8d1 c000 	ldr.w	ip, [r1]
 8000b4e:	e7bb      	b.n	8000ac8 <LL_PLL_ConfigSystemClock_HSI+0xa8>
      latency = LL_FLASH_LATENCY_2;
 8000b50:	2002      	movs	r0, #2
 8000b52:	e7d0      	b.n	8000af6 <LL_PLL_ConfigSystemClock_HSI+0xd6>
 8000b54:	2202      	movs	r2, #2
 8000b56:	e7e8      	b.n	8000b2a <LL_PLL_ConfigSystemClock_HSI+0x10a>
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	003d0900 	.word	0x003d0900
 8000b60:	080010bc 	.word	0x080010bc
 8000b64:	20000110 	.word	0x20000110
 8000b68:	02dc6c00 	.word	0x02dc6c00
 8000b6c:	016e3600 	.word	0x016e3600
 8000b70:	40022000 	.word	0x40022000

08000b74 <LL_PLL_ConfigSystemClock_HSE>:
{
 8000b74:	b4f0      	push	{r4, r5, r6, r7}
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000b76:	4d54      	ldr	r5, [pc, #336]	; (8000cc8 <LL_PLL_ConfigSystemClock_HSE+0x154>)
 8000b78:	682c      	ldr	r4, [r5, #0]
  if (LL_RCC_PLL_IsReady() != 0U)
 8000b7a:	01a4      	lsls	r4, r4, #6
 8000b7c:	d467      	bmi.n	8000c4e <LL_PLL_ConfigSystemClock_HSE+0xda>
  pllfreq = __LL_RCC_CALC_PLLCLK_FREQ(PLL_InputFrequency / ((UTILS_PLLInitStruct->Prediv >> RCC_CFGR_PLLXTPRE_Pos) + 1U), UTILS_PLLInitStruct->PLLMul);
 8000b7e:	e9d2 7600 	ldrd	r7, r6, [r2]
 8000b82:	0c74      	lsrs	r4, r6, #17
 8000b84:	3401      	adds	r4, #1
 8000b86:	fbb0 f0f4 	udiv	r0, r0, r4
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000b8a:	682a      	ldr	r2, [r5, #0]
 8000b8c:	0cbc      	lsrs	r4, r7, #18
 8000b8e:	3402      	adds	r4, #2
 8000b90:	fb04 f400 	mul.w	r4, r4, r0
    if (LL_RCC_HSE_IsReady() != 1U)
 8000b94:	0390      	lsls	r0, r2, #14
 8000b96:	d410      	bmi.n	8000bba <LL_PLL_ConfigSystemClock_HSE+0x46>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000b98:	682a      	ldr	r2, [r5, #0]
      if (HSEBypass == LL_UTILS_HSEBYPASS_ON)
 8000b9a:	2901      	cmp	r1, #1
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000b9c:	494a      	ldr	r1, [pc, #296]	; (8000cc8 <LL_PLL_ConfigSystemClock_HSE+0x154>)
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000b9e:	bf0c      	ite	eq
 8000ba0:	f442 2280 	orreq.w	r2, r2, #262144	; 0x40000
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000ba4:	f422 2280 	bicne.w	r2, r2, #262144	; 0x40000
 8000ba8:	602a      	str	r2, [r5, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000baa:	460a      	mov	r2, r1
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000bac:	6808      	ldr	r0, [r1, #0]
 8000bae:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8000bb2:	6008      	str	r0, [r1, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000bb4:	6811      	ldr	r1, [r2, #0]
      while (LL_RCC_HSE_IsReady() != 1U)
 8000bb6:	0389      	lsls	r1, r1, #14
 8000bb8:	d5fc      	bpl.n	8000bb4 <LL_PLL_ConfigSystemClock_HSE+0x40>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8000bba:	4943      	ldr	r1, [pc, #268]	; (8000cc8 <LL_PLL_ConfigSystemClock_HSE+0x154>)
 8000bbc:	f406 3640 	and.w	r6, r6, #196608	; 0x30000
 8000bc0:	684a      	ldr	r2, [r1, #4]
  sysclk_frequency_current = (SystemCoreClock << AHBPrescTable[LL_RCC_GetAHBPrescaler() >> RCC_CFGR_HPRE_Pos]);
 8000bc2:	4d42      	ldr	r5, [pc, #264]	; (8000ccc <LL_PLL_ConfigSystemClock_HSE+0x158>)
 8000bc4:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8000bc8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000bcc:	433a      	orrs	r2, r7
 8000bce:	4332      	orrs	r2, r6
 8000bd0:	604a      	str	r2, [r1, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000bd2:	684a      	ldr	r2, [r1, #4]
 8000bd4:	4e3e      	ldr	r6, [pc, #248]	; (8000cd0 <LL_PLL_ConfigSystemClock_HSE+0x15c>)
 8000bd6:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8000bda:	5caa      	ldrb	r2, [r5, r2]
 8000bdc:	6837      	ldr	r7, [r6, #0]
 8000bde:	4097      	lsls	r7, r2
  if (sysclk_frequency_current < SYSCLK_Frequency)
 8000be0:	42bc      	cmp	r4, r7
 8000be2:	d837      	bhi.n	8000c54 <LL_PLL_ConfigSystemClock_HSE+0xe0>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000be4:	4a38      	ldr	r2, [pc, #224]	; (8000cc8 <LL_PLL_ConfigSystemClock_HSE+0x154>)
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000be6:	4611      	mov	r1, r2
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000be8:	6810      	ldr	r0, [r2, #0]
 8000bea:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 8000bee:	6010      	str	r0, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000bf0:	680a      	ldr	r2, [r1, #0]
    while (LL_RCC_PLL_IsReady() != 1U)
 8000bf2:	0192      	lsls	r2, r2, #6
 8000bf4:	d5fc      	bpl.n	8000bf0 <LL_PLL_ConfigSystemClock_HSE+0x7c>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000bf6:	684a      	ldr	r2, [r1, #4]
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
 8000bf8:	f8d3 c000 	ldr.w	ip, [r3]
 8000bfc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000c00:	ea42 020c 	orr.w	r2, r2, ip
 8000c04:	604a      	str	r2, [r1, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000c06:	684a      	ldr	r2, [r1, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000c08:	482f      	ldr	r0, [pc, #188]	; (8000cc8 <LL_PLL_ConfigSystemClock_HSE+0x154>)
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000c0a:	f022 0203 	bic.w	r2, r2, #3
 8000c0e:	f042 0202 	orr.w	r2, r2, #2
 8000c12:	604a      	str	r2, [r1, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000c14:	6842      	ldr	r2, [r0, #4]
 8000c16:	f002 020c 	and.w	r2, r2, #12
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000c1a:	2a08      	cmp	r2, #8
 8000c1c:	d1fa      	bne.n	8000c14 <LL_PLL_ConfigSystemClock_HSE+0xa0>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000c1e:	6842      	ldr	r2, [r0, #4]
 8000c20:	6859      	ldr	r1, [r3, #4]
 8000c22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000c26:	430a      	orrs	r2, r1
 8000c28:	6042      	str	r2, [r0, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000c2a:	6842      	ldr	r2, [r0, #4]
 8000c2c:	6899      	ldr	r1, [r3, #8]
 8000c2e:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 8000c32:	430a      	orrs	r2, r1
  if (sysclk_frequency_current > SYSCLK_Frequency)
 8000c34:	42bc      	cmp	r4, r7
 8000c36:	6042      	str	r2, [r0, #4]
 8000c38:	d308      	bcc.n	8000c4c <LL_PLL_ConfigSystemClock_HSE+0xd8>
    LL_SetSystemCoreClock(__LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider));
 8000c3a:	f3cc 1c03 	ubfx	ip, ip, #4, #4
 8000c3e:	f815 300c 	ldrb.w	r3, [r5, ip]
  SystemCoreClock = HCLKFrequency;
 8000c42:	2000      	movs	r0, #0
    LL_SetSystemCoreClock(__LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider));
 8000c44:	40dc      	lsrs	r4, r3
  SystemCoreClock = HCLKFrequency;
 8000c46:	6034      	str	r4, [r6, #0]
}
 8000c48:	bcf0      	pop	{r4, r5, r6, r7}
 8000c4a:	4770      	bx	lr
  if (Frequency == 0U)
 8000c4c:	b9e4      	cbnz	r4, 8000c88 <LL_PLL_ConfigSystemClock_HSE+0x114>
}
 8000c4e:	bcf0      	pop	{r4, r5, r6, r7}
    status = ERROR;
 8000c50:	2001      	movs	r0, #1
}
 8000c52:	4770      	bx	lr
    if (Frequency > UTILS_LATENCY2_FREQ)
 8000c54:	4a1f      	ldr	r2, [pc, #124]	; (8000cd4 <LL_PLL_ConfigSystemClock_HSE+0x160>)
 8000c56:	4294      	cmp	r4, r2
 8000c58:	d831      	bhi.n	8000cbe <LL_PLL_ConfigSystemClock_HSE+0x14a>
      if (Frequency > UTILS_LATENCY1_FREQ)
 8000c5a:	481f      	ldr	r0, [pc, #124]	; (8000cd8 <LL_PLL_ConfigSystemClock_HSE+0x164>)
 8000c5c:	4284      	cmp	r4, r0
 8000c5e:	bf94      	ite	ls
 8000c60:	2000      	movls	r0, #0
 8000c62:	2001      	movhi	r0, #1
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000c64:	491d      	ldr	r1, [pc, #116]	; (8000cdc <LL_PLL_ConfigSystemClock_HSE+0x168>)
 8000c66:	680a      	ldr	r2, [r1, #0]
 8000c68:	f022 0207 	bic.w	r2, r2, #7
 8000c6c:	4302      	orrs	r2, r0
 8000c6e:	600a      	str	r2, [r1, #0]
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000c70:	680a      	ldr	r2, [r1, #0]
 8000c72:	f002 0207 	and.w	r2, r2, #7
      } while ((getlatency != latency) && (timeout > 0));
 8000c76:	4290      	cmp	r0, r2
 8000c78:	d0b4      	beq.n	8000be4 <LL_PLL_ConfigSystemClock_HSE+0x70>
 8000c7a:	680a      	ldr	r2, [r1, #0]
 8000c7c:	f002 0207 	and.w	r2, r2, #7
      if(getlatency != latency)
 8000c80:	4282      	cmp	r2, r0
 8000c82:	d0af      	beq.n	8000be4 <LL_PLL_ConfigSystemClock_HSE+0x70>
  if (sysclk_frequency_current > SYSCLK_Frequency)
 8000c84:	42bc      	cmp	r4, r7
 8000c86:	d2e2      	bcs.n	8000c4e <LL_PLL_ConfigSystemClock_HSE+0xda>
    if (Frequency > UTILS_LATENCY2_FREQ)
 8000c88:	4a12      	ldr	r2, [pc, #72]	; (8000cd4 <LL_PLL_ConfigSystemClock_HSE+0x160>)
 8000c8a:	4294      	cmp	r4, r2
 8000c8c:	d819      	bhi.n	8000cc2 <LL_PLL_ConfigSystemClock_HSE+0x14e>
      if (Frequency > UTILS_LATENCY1_FREQ)
 8000c8e:	4912      	ldr	r1, [pc, #72]	; (8000cd8 <LL_PLL_ConfigSystemClock_HSE+0x164>)
 8000c90:	428c      	cmp	r4, r1
 8000c92:	bf94      	ite	ls
 8000c94:	2100      	movls	r1, #0
 8000c96:	2101      	movhi	r1, #1
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000c98:	4810      	ldr	r0, [pc, #64]	; (8000cdc <LL_PLL_ConfigSystemClock_HSE+0x168>)
 8000c9a:	6802      	ldr	r2, [r0, #0]
 8000c9c:	f022 0207 	bic.w	r2, r2, #7
 8000ca0:	430a      	orrs	r2, r1
 8000ca2:	6002      	str	r2, [r0, #0]
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000ca4:	6802      	ldr	r2, [r0, #0]
 8000ca6:	f002 0207 	and.w	r2, r2, #7
      } while ((getlatency != latency) && (timeout > 0));
 8000caa:	4291      	cmp	r1, r2
 8000cac:	d004      	beq.n	8000cb8 <LL_PLL_ConfigSystemClock_HSE+0x144>
 8000cae:	6802      	ldr	r2, [r0, #0]
 8000cb0:	f002 0207 	and.w	r2, r2, #7
      if(getlatency != latency)
 8000cb4:	4291      	cmp	r1, r2
 8000cb6:	d1ca      	bne.n	8000c4e <LL_PLL_ConfigSystemClock_HSE+0xda>
 8000cb8:	f8d3 c000 	ldr.w	ip, [r3]
 8000cbc:	e7bd      	b.n	8000c3a <LL_PLL_ConfigSystemClock_HSE+0xc6>
      latency = LL_FLASH_LATENCY_2;
 8000cbe:	2002      	movs	r0, #2
 8000cc0:	e7d0      	b.n	8000c64 <LL_PLL_ConfigSystemClock_HSE+0xf0>
 8000cc2:	2102      	movs	r1, #2
 8000cc4:	e7e8      	b.n	8000c98 <LL_PLL_ConfigSystemClock_HSE+0x124>
 8000cc6:	bf00      	nop
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	080010bc 	.word	0x080010bc
 8000cd0:	20000110 	.word	0x20000110
 8000cd4:	02dc6c00 	.word	0x02dc6c00
 8000cd8:	016e3600 	.word	0x016e3600
 8000cdc:	40022000 	.word	0x40022000

08000ce0 <main>:
{
 8000ce0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
	TIM1->ARR = 0x01U;
 8000ce4:	f04f 0b01 	mov.w	fp, #1
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce8:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
  SET_BIT(RCC->APB2ENR, Periphs);
 8000cec:	4db8      	ldr	r5, [pc, #736]	; (8000fd0 <main+0x2f0>)
	countSend = 0x00U;
 8000cee:	2600      	movs	r6, #0
 8000cf0:	69ab      	ldr	r3, [r5, #24]
	TIM1->PSC = 71U;
 8000cf2:	f04f 0a47 	mov.w	sl, #71	; 0x47
 8000cf6:	ea43 030b 	orr.w	r3, r3, fp
 8000cfa:	61ab      	str	r3, [r5, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000cfc:	69ab      	ldr	r3, [r5, #24]
{
 8000cfe:	b091      	sub	sp, #68	; 0x44
 8000d00:	ea03 030b 	and.w	r3, r3, fp
 8000d04:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 8000d06:	9b05      	ldr	r3, [sp, #20]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000d08:	69eb      	ldr	r3, [r5, #28]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d0a:	f8df 92f8 	ldr.w	r9, [pc, #760]	; 8001004 <main+0x324>
 8000d0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d12:	61eb      	str	r3, [r5, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000d14:	69eb      	ldr	r3, [r5, #28]
  reg_value  =  (reg_value                                   |
 8000d16:	4aaf      	ldr	r2, [pc, #700]	; (8000fd4 <main+0x2f4>)
 8000d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1c:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 8000d1e:	9b04      	ldr	r3, [sp, #16]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d20:	f8d9 100c 	ldr.w	r1, [r9, #12]
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 8000d24:	4bac      	ldr	r3, [pc, #688]	; (8000fd8 <main+0x2f8>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d26:	4001      	ands	r1, r0
  reg_value  =  (reg_value                                   |
 8000d28:	430a      	orrs	r2, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8000d2a:	f8c9 200c 	str.w	r2, [r9, #12]
 8000d2e:	685a      	ldr	r2, [r3, #4]
	TIM1->ARR = 0x01U;
 8000d30:	4faa      	ldr	r7, [pc, #680]	; (8000fdc <main+0x2fc>)
 8000d32:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8000d36:	605a      	str	r2, [r3, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8000d38:	685a      	ldr	r2, [r3, #4]
	countSend = 0x00U;
 8000d3a:	4ca9      	ldr	r4, [pc, #676]	; (8000fe0 <main+0x300>)
 8000d3c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000d40:	605a      	str	r2, [r3, #4]
  SystemClock_Config();
 8000d42:	f7ff fa03 	bl	800014c <SystemClock_Config>
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000d46:	f44f 5e00 	mov.w	lr, #8192	; 0x2000
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000d4a:	f44f 7c80 	mov.w	ip, #256	; 0x100
  LL_GPIO_SetOutputPin(Out_GPIO_Port, Out_Pin);

  /**/
  GPIO_InitStruct.Pin = Led_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d4e:	2102      	movs	r1, #2
	new_state = 0x00U;
 8000d50:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 8001008 <main+0x328>
	countSend = 0x00U;
 8000d54:	8026      	strh	r6, [r4, #0]
	TIM1->ARR = 0x01U;
 8000d56:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
	new_state = 0x00U;
 8000d5a:	f8a8 6000 	strh.w	r6, [r8]
	TIM1->RCR = 0x00U;
 8000d5e:	633e      	str	r6, [r7, #48]	; 0x30
	TIM1->PSC = 71U;
 8000d60:	f8c7 a028 	str.w	sl, [r7, #40]	; 0x28
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	e9cd 660e 	strd	r6, r6, [sp, #56]	; 0x38
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d68:	69ab      	ldr	r3, [r5, #24]
 8000d6a:	4a9e      	ldr	r2, [pc, #632]	; (8000fe4 <main+0x304>)
 8000d6c:	f043 0310 	orr.w	r3, r3, #16
 8000d70:	61ab      	str	r3, [r5, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d72:	69ab      	ldr	r3, [r5, #24]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000d74:	489c      	ldr	r0, [pc, #624]	; (8000fe8 <main+0x308>)
 8000d76:	f003 0310 	and.w	r3, r3, #16
 8000d7a:	9308      	str	r3, [sp, #32]
  (void)tmpreg;
 8000d7c:	9b08      	ldr	r3, [sp, #32]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d7e:	69ab      	ldr	r3, [r5, #24]
 8000d80:	f043 0320 	orr.w	r3, r3, #32
 8000d84:	61ab      	str	r3, [r5, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d86:	69ab      	ldr	r3, [r5, #24]
 8000d88:	f003 0320 	and.w	r3, r3, #32
 8000d8c:	9309      	str	r3, [sp, #36]	; 0x24
  (void)tmpreg;
 8000d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d90:	69ab      	ldr	r3, [r5, #24]
 8000d92:	f043 0304 	orr.w	r3, r3, #4
 8000d96:	61ab      	str	r3, [r5, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d98:	69ab      	ldr	r3, [r5, #24]
 8000d9a:	f003 0304 	and.w	r3, r3, #4
 8000d9e:	930a      	str	r3, [sp, #40]	; 0x28
  (void)tmpreg;
 8000da0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = Led_Pin;
 8000da2:	4b92      	ldr	r3, [pc, #584]	; (8000fec <main+0x30c>)
 8000da4:	f8c0 e014 	str.w	lr, [r0, #20]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000da8:	f8c2 c010 	str.w	ip, [r2, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000dac:	e9cd b10c 	strd	fp, r1, [sp, #48]	; 0x30
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  LL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 8000db0:	a90b      	add	r1, sp, #44	; 0x2c
 8000db2:	9201      	str	r2, [sp, #4]
  GPIO_InitStruct.Pin = Led_Pin;
 8000db4:	930b      	str	r3, [sp, #44]	; 0x2c
  LL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 8000db6:	f7ff fad1 	bl	800035c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Out_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000dba:	f04f 0c03 	mov.w	ip, #3
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  LL_GPIO_Init(Out_GPIO_Port, &GPIO_InitStruct);
 8000dbe:	9a01      	ldr	r2, [sp, #4]
  GPIO_InitStruct.Pin = Out_Pin;
 8000dc0:	4b8b      	ldr	r3, [pc, #556]	; (8000ff0 <main+0x310>)
  LL_GPIO_Init(Out_GPIO_Port, &GPIO_InitStruct);
 8000dc2:	4610      	mov	r0, r2
 8000dc4:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000dc6:	e9cd c60d 	strd	ip, r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000dca:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = Out_Pin;
 8000dce:	930b      	str	r3, [sp, #44]	; 0x2c
  LL_GPIO_Init(Out_GPIO_Port, &GPIO_InitStruct);
 8000dd0:	f7ff fac4 	bl	800035c <LL_GPIO_Init>
  TIM_InitStruct.Autoreload = 10;
 8000dd4:	220a      	movs	r2, #10
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000dd6:	f8cd 6032 	str.w	r6, [sp, #50]	; 0x32
 8000dda:	f8cd 6036 	str.w	r6, [sp, #54]	; 0x36
 8000dde:	f8cd 602e 	str.w	r6, [sp, #46]	; 0x2e
 8000de2:	f8cd 603a 	str.w	r6, [sp, #58]	; 0x3a
 8000de6:	f8ad 603e 	strh.w	r6, [sp, #62]	; 0x3e
  SET_BIT(RCC->APB2ENR, Periphs);
 8000dea:	69ab      	ldr	r3, [r5, #24]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8000dec:	a90b      	add	r1, sp, #44	; 0x2c
 8000dee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000df2:	61ab      	str	r3, [r5, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000df4:	69ab      	ldr	r3, [r5, #24]
 8000df6:	4638      	mov	r0, r7
 8000df8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dfc:	9307      	str	r3, [sp, #28]
  (void)tmpreg;
 8000dfe:	9b07      	ldr	r3, [sp, #28]
  TIM_InitStruct.Autoreload = 10;
 8000e00:	920d      	str	r2, [sp, #52]	; 0x34
  TIM_InitStruct.Prescaler = 71;
 8000e02:	f8ad a02c 	strh.w	sl, [sp, #44]	; 0x2c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8000e06:	f7ff fb85 	bl	8000514 <LL_TIM_Init>
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e0c:	f04f 5c80 	mov.w	ip, #268435456	; 0x10000000
 8000e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e14:	603b      	str	r3, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000e16:	68bb      	ldr	r3, [r7, #8]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000e18:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e20:	f023 0307 	bic.w	r3, r3, #7
 8000e24:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e2c:	607b      	str	r3, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000e34:	60bb      	str	r3, [r7, #8]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	ea43 030b 	orr.w	r3, r3, fp
 8000e3c:	60fb      	str	r3, [r7, #12]
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000e3e:	f8cd 6032 	str.w	r6, [sp, #50]	; 0x32
 8000e42:	f8cd 6036 	str.w	r6, [sp, #54]	; 0x36
 8000e46:	f8cd 602e 	str.w	r6, [sp, #46]	; 0x2e
 8000e4a:	f8cd 603a 	str.w	r6, [sp, #58]	; 0x3a
 8000e4e:	f8ad 603e 	strh.w	r6, [sp, #62]	; 0x3e
  SET_BIT(RCC->APB1ENR, Periphs);
 8000e52:	69eb      	ldr	r3, [r5, #28]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e54:	4f67      	ldr	r7, [pc, #412]	; (8000ff4 <main+0x314>)
 8000e56:	ea43 030b 	orr.w	r3, r3, fp
 8000e5a:	61eb      	str	r3, [r5, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000e5c:	69eb      	ldr	r3, [r5, #28]
  TIM_InitStruct.Prescaler = 71;
 8000e5e:	2547      	movs	r5, #71	; 0x47
 8000e60:	ea03 030b 	and.w	r3, r3, fp
 8000e64:	9306      	str	r3, [sp, #24]
  (void)tmpreg;
 8000e66:	9b06      	ldr	r3, [sp, #24]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e68:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8000e6c:	f8df b194 	ldr.w	fp, [pc, #404]	; 8001004 <main+0x324>
 8000e70:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e74:	f1c3 0207 	rsb	r2, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e78:	1d19      	adds	r1, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e7a:	2a04      	cmp	r2, #4
 8000e7c:	bf28      	it	cs
 8000e7e:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e80:	2906      	cmp	r1, #6
 8000e82:	bf88      	it	hi
 8000e84:	1ede      	subhi	r6, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e86:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8a:	4093      	lsls	r3, r2
 8000e8c:	43db      	mvns	r3, r3
  TIM_InitStruct.Autoreload = 10000;
 8000e8e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	40b3      	lsls	r3, r6
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e98:	011b      	lsls	r3, r3, #4
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	f887 331c 	strb.w	r3, [r7, #796]	; 0x31c
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000ea0:	a90b      	add	r1, sp, #44	; 0x2c
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ea2:	f8c7 c000 	str.w	ip, [r7]
  TIM_InitStruct.Prescaler = 71;
 8000ea6:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
  TIM_InitStruct.Autoreload = 10000;
 8000eaa:	920d      	str	r2, [sp, #52]	; 0x34
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000eac:	f7ff fb32 	bl	8000514 <LL_TIM_Init>
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000eb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb4:	2000      	movs	r0, #0
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb6:	f04f 7e00 	mov.w	lr, #33554432	; 0x2000000
 8000eba:	6819      	ldr	r1, [r3, #0]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000ebc:	4a47      	ldr	r2, [pc, #284]	; (8000fdc <main+0x2fc>)
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000ebe:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8000ec2:	6019      	str	r1, [r3, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000ec4:	6899      	ldr	r1, [r3, #8]
		  processed = false;
 8000ec6:	4605      	mov	r5, r0
 8000ec8:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8000ecc:	f021 0107 	bic.w	r1, r1, #7
 8000ed0:	6099      	str	r1, [r3, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000ed2:	6859      	ldr	r1, [r3, #4]
			TIM1->ARR = (temp%0xFFFFU)-0x01U;
 8000ed4:	4616      	mov	r6, r2
 8000ed6:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8000eda:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000edc:	6899      	ldr	r1, [r3, #8]
		countSend = 0x04U;
 8000ede:	f04f 0904 	mov.w	r9, #4
 8000ee2:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8000ee6:	6099      	str	r1, [r3, #8]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee8:	f8db 300c 	ldr.w	r3, [fp, #12]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eec:	f887 0319 	strb.w	r0, [r7, #793]	; 0x319
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ef0:	f8c7 e000 	str.w	lr, [r7]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000ef4:	6813      	ldr	r3, [r2, #0]
			TIM1->ARR = 0xFFFFU - 0x01U;
 8000ef6:	f64f 7cfe 	movw	ip, #65534	; 0xfffe
 8000efa:	f043 0301 	orr.w	r3, r3, #1
 8000efe:	6013      	str	r3, [r2, #0]
 8000f00:	493d      	ldr	r1, [pc, #244]	; (8000ff8 <main+0x318>)
 8000f02:	483e      	ldr	r0, [pc, #248]	; (8000ffc <main+0x31c>)
 8000f04:	4f3e      	ldr	r7, [pc, #248]	; (8001000 <main+0x320>)
			TIM1->ARR = (temp%0xFFFFU)-0x01U;
 8000f06:	f8df e104 	ldr.w	lr, [pc, #260]	; 800100c <main+0x32c>
	  GPIOC->ODR^=(1U<<13);
 8000f0a:	f5a2 52e0 	sub.w	r2, r2, #7168	; 0x1c00
 8000f0e:	e003      	b.n	8000f18 <main+0x238>
 8000f10:	68d3      	ldr	r3, [r2, #12]
 8000f12:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000f16:	60d3      	str	r3, [r2, #12]
	  if(processed){
 8000f18:	780b      	ldrb	r3, [r1, #0]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d0f8      	beq.n	8000f10 <main+0x230>
	volatile uint32_t temp = array[countSend][0];
 8000f1e:	8823      	ldrh	r3, [r4, #0]
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
 8000f26:	930b      	str	r3, [sp, #44]	; 0x2c
	volatile uint16_t state = (uint32_t) array[countSend][1];
 8000f28:	8823      	ldrh	r3, [r4, #0]
 8000f2a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8000f2e:	889b      	ldrh	r3, [r3, #4]
 8000f30:	f8ad 300e 	strh.w	r3, [sp, #14]
	if(temp < 0x02U){
 8000f34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000f36:	2b01      	cmp	r3, #1
		if(temp == 0x00U){
 8000f38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	if(temp < 0x02U){
 8000f3a:	d930      	bls.n	8000f9e <main+0x2be>
	else if(temp > 0x02U &&temp < 0xFFFFU){
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d911      	bls.n	8000f64 <main+0x284>
 8000f40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000f42:	4563      	cmp	r3, ip
 8000f44:	d80e      	bhi.n	8000f64 <main+0x284>
		new_state = state;
 8000f46:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	f8a8 3000 	strh.w	r3, [r8]
		TIM1->ARR = temp -1U;
 8000f50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000f52:	3b01      	subs	r3, #1
 8000f54:	62f3      	str	r3, [r6, #44]	; 0x2c
	if(countSend < LENGHT - 1){
 8000f56:	8823      	ldrh	r3, [r4, #0]
 8000f58:	2b20      	cmp	r3, #32
 8000f5a:	d91a      	bls.n	8000f92 <main+0x2b2>
		countSend = 0x04U;
 8000f5c:	f8a4 9000 	strh.w	r9, [r4]
		  processed = false;
 8000f60:	700d      	strb	r5, [r1, #0]
 8000f62:	e7d5      	b.n	8000f10 <main+0x230>
		if(!repeat){
 8000f64:	783b      	ldrb	r3, [r7, #0]
 8000f66:	b303      	cbz	r3, 8000faa <main+0x2ca>
			repeat = false;
 8000f68:	703d      	strb	r5, [r7, #0]
			TIM1->ARR = (temp%0xFFFFU)-0x01U;
 8000f6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000f6c:	fbae ab03 	umull	sl, fp, lr, r3
 8000f70:	ea4f 3bdb 	mov.w	fp, fp, lsr #15
 8000f74:	ebcb 4b0b 	rsb	fp, fp, fp, lsl #16
 8000f78:	eba3 030b 	sub.w	r3, r3, fp
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	62f3      	str	r3, [r6, #44]	; 0x2c
			TIM1->RCR = 0x00U;
 8000f80:	6335      	str	r5, [r6, #48]	; 0x30
			new_state = state;//array[countSend][1];
 8000f82:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	f8a8 3000 	strh.w	r3, [r8]
	if(countSend < LENGHT - 1){
 8000f8c:	8823      	ldrh	r3, [r4, #0]
 8000f8e:	2b20      	cmp	r3, #32
 8000f90:	d8e4      	bhi.n	8000f5c <main+0x27c>
		++countSend;
 8000f92:	8823      	ldrh	r3, [r4, #0]
 8000f94:	3301      	adds	r3, #1
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	8023      	strh	r3, [r4, #0]
		  processed = false;
 8000f9a:	700d      	strb	r5, [r1, #0]
 8000f9c:	e7b8      	b.n	8000f10 <main+0x230>
		if(temp == 0x00U){
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d0f4      	beq.n	8000f8c <main+0x2ac>
			TIM1->ARR = temp;
 8000fa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000fa4:	62f3      	str	r3, [r6, #44]	; 0x2c
		  processed = false;
 8000fa6:	700d      	strb	r5, [r1, #0]
 8000fa8:	e7b2      	b.n	8000f10 <main+0x230>
			repeat = true;
 8000faa:	f04f 0301 	mov.w	r3, #1
 8000fae:	703b      	strb	r3, [r7, #0]
			TIM1->ARR = 0xFFFFU - 0x01U;
 8000fb0:	f8c6 c02c 	str.w	ip, [r6, #44]	; 0x2c
			TIM1->RCR = (temp/0xFFFFU)-0x01U;
 8000fb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000fb6:	fbae a303 	umull	sl, r3, lr, r3
 8000fba:	0bdb      	lsrs	r3, r3, #15
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	6333      	str	r3, [r6, #48]	; 0x30
			new_state = state;//array[countSend][1];
 8000fc0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	f8a8 3000 	strh.w	r3, [r8]
		  processed = false;
 8000fca:	700d      	strb	r5, [r1, #0]
 8000fcc:	e7a0      	b.n	8000f10 <main+0x230>
 8000fce:	bf00      	nop
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	05fa0300 	.word	0x05fa0300
 8000fd8:	40010000 	.word	0x40010000
 8000fdc:	40012c00 	.word	0x40012c00
 8000fe0:	20000132 	.word	0x20000132
 8000fe4:	40010800 	.word	0x40010800
 8000fe8:	40011000 	.word	0x40011000
 8000fec:	04200020 	.word	0x04200020
 8000ff0:	04010001 	.word	0x04010001
 8000ff4:	e000e100 	.word	0xe000e100
 8000ff8:	20000134 	.word	0x20000134
 8000ffc:	20000000 	.word	0x20000000
 8001000:	20000130 	.word	0x20000130
 8001004:	e000ed00 	.word	0xe000ed00
 8001008:	20000136 	.word	0x20000136
 800100c:	80008001 	.word	0x80008001

08001010 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001010:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001012:	e003      	b.n	800101c <LoopCopyDataInit>

08001014 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001014:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001016:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001018:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800101a:	3104      	adds	r1, #4

0800101c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800101c:	480a      	ldr	r0, [pc, #40]	; (8001048 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001020:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001022:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001024:	d3f6      	bcc.n	8001014 <CopyDataInit>
  ldr r2, =_sbss
 8001026:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001028:	e002      	b.n	8001030 <LoopFillZerobss>

0800102a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800102a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800102c:	f842 3b04 	str.w	r3, [r2], #4

08001030 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001030:	4b08      	ldr	r3, [pc, #32]	; (8001054 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001032:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001034:	d3f9      	bcc.n	800102a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001036:	f7ff f909 	bl	800024c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800103a:	f000 f80f 	bl	800105c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800103e:	f7ff fe4f 	bl	8000ce0 <main>
  bx lr
 8001042:	4770      	bx	lr
  ldr r3, =_sidata
 8001044:	080010d4 	.word	0x080010d4
  ldr r0, =_sdata
 8001048:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800104c:	20000114 	.word	0x20000114
  ldr r2, =_sbss
 8001050:	20000114 	.word	0x20000114
  ldr r3, = _ebss
 8001054:	20000138 	.word	0x20000138

08001058 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001058:	e7fe      	b.n	8001058 <ADC1_2_IRQHandler>
	...

0800105c <__libc_init_array>:
 800105c:	b570      	push	{r4, r5, r6, lr}
 800105e:	2500      	movs	r5, #0
 8001060:	4e0c      	ldr	r6, [pc, #48]	; (8001094 <__libc_init_array+0x38>)
 8001062:	4c0d      	ldr	r4, [pc, #52]	; (8001098 <__libc_init_array+0x3c>)
 8001064:	1ba4      	subs	r4, r4, r6
 8001066:	10a4      	asrs	r4, r4, #2
 8001068:	42a5      	cmp	r5, r4
 800106a:	d109      	bne.n	8001080 <__libc_init_array+0x24>
 800106c:	f000 f81a 	bl	80010a4 <_init>
 8001070:	2500      	movs	r5, #0
 8001072:	4e0a      	ldr	r6, [pc, #40]	; (800109c <__libc_init_array+0x40>)
 8001074:	4c0a      	ldr	r4, [pc, #40]	; (80010a0 <__libc_init_array+0x44>)
 8001076:	1ba4      	subs	r4, r4, r6
 8001078:	10a4      	asrs	r4, r4, #2
 800107a:	42a5      	cmp	r5, r4
 800107c:	d105      	bne.n	800108a <__libc_init_array+0x2e>
 800107e:	bd70      	pop	{r4, r5, r6, pc}
 8001080:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001084:	4798      	blx	r3
 8001086:	3501      	adds	r5, #1
 8001088:	e7ee      	b.n	8001068 <__libc_init_array+0xc>
 800108a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800108e:	4798      	blx	r3
 8001090:	3501      	adds	r5, #1
 8001092:	e7f2      	b.n	800107a <__libc_init_array+0x1e>
 8001094:	080010cc 	.word	0x080010cc
 8001098:	080010cc 	.word	0x080010cc
 800109c:	080010cc 	.word	0x080010cc
 80010a0:	080010d0 	.word	0x080010d0

080010a4 <_init>:
 80010a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010a6:	bf00      	nop
 80010a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010aa:	bc08      	pop	{r3}
 80010ac:	469e      	mov	lr, r3
 80010ae:	4770      	bx	lr

080010b0 <_fini>:
 80010b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010b2:	bf00      	nop
 80010b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010b6:	bc08      	pop	{r3}
 80010b8:	469e      	mov	lr, r3
 80010ba:	4770      	bx	lr
