
Gen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001038  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001144  08001144  00011144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001154  08001154  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08001154  08001154  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001154  08001154  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001154  08001154  00011154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001158  08001158  00011158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800115c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000014  08001170  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08001170  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000421f  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000d79  00000000  00000000  0002425c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001f58  00000000  00000000  00024fd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000000f0  00000000  00000000  00026f30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000ae0  00000000  00000000  00027020  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00011c97  00000000  00000000  00027b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000028c9  00000000  00000000  00039797  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0005de6d  00000000  00000000  0003c060  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00099ecd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000434  00000000  00000000  00099f48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	0800112c 	.word	0x0800112c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	0800112c 	.word	0x0800112c

0800014c <SystemClock_Config>:
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800014c:	4923      	ldr	r1, [pc, #140]	; (80001dc <SystemClock_Config+0x90>)
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800014e:	b508      	push	{r3, lr}
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000150:	460a      	mov	r2, r1
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000152:	680b      	ldr	r3, [r1, #0]
 8000154:	f023 0307 	bic.w	r3, r3, #7
 8000158:	f043 0302 	orr.w	r3, r3, #2
 800015c:	600b      	str	r3, [r1, #0]
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800015e:	6813      	ldr	r3, [r2, #0]
 8000160:	f003 0307 	and.w	r3, r3, #7
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000164:	2b02      	cmp	r3, #2
 8000166:	d1fa      	bne.n	800015e <SystemClock_Config+0x12>
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000168:	4b1d      	ldr	r3, [pc, #116]	; (80001e0 <SystemClock_Config+0x94>)
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 800016a:	461a      	mov	r2, r3
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800016c:	6819      	ldr	r1, [r3, #0]
 800016e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8000172:	6019      	str	r1, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000174:	6813      	ldr	r3, [r2, #0]
  {
  }
  LL_RCC_HSE_Enable();

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000176:	0399      	lsls	r1, r3, #14
 8000178:	d5fc      	bpl.n	8000174 <SystemClock_Config+0x28>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 800017a:	6851      	ldr	r1, [r2, #4]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800017c:	4b18      	ldr	r3, [pc, #96]	; (80001e0 <SystemClock_Config+0x94>)
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 800017e:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
 8000182:	f441 11e8 	orr.w	r1, r1, #1900544	; 0x1d0000
 8000186:	6051      	str	r1, [r2, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000188:	6811      	ldr	r1, [r2, #0]
 800018a:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 800018e:	6011      	str	r1, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000190:	681a      	ldr	r2, [r3, #0]
  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
  LL_RCC_PLL_Enable();

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000192:	0192      	lsls	r2, r2, #6
 8000194:	d5fc      	bpl.n	8000190 <SystemClock_Config+0x44>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000196:	6859      	ldr	r1, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000198:	4a11      	ldr	r2, [pc, #68]	; (80001e0 <SystemClock_Config+0x94>)
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800019a:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 800019e:	6059      	str	r1, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80001a0:	6859      	ldr	r1, [r3, #4]
 80001a2:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80001a6:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80001aa:	6059      	str	r1, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80001ac:	6859      	ldr	r1, [r3, #4]
 80001ae:	f421 5160 	bic.w	r1, r1, #14336	; 0x3800
 80001b2:	6059      	str	r1, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80001b4:	6859      	ldr	r1, [r3, #4]
 80001b6:	f021 0103 	bic.w	r1, r1, #3
 80001ba:	f041 0102 	orr.w	r1, r1, #2
 80001be:	6059      	str	r1, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80001c0:	6853      	ldr	r3, [r2, #4]
 80001c2:	f003 030c 	and.w	r3, r3, #12
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80001c6:	2b08      	cmp	r3, #8
 80001c8:	d1fa      	bne.n	80001c0 <SystemClock_Config+0x74>
  {

  }
  LL_Init1msTick(72000000);
 80001ca:	4806      	ldr	r0, [pc, #24]	; (80001e4 <SystemClock_Config+0x98>)
 80001cc:	f000 fbe4 	bl	8000998 <LL_Init1msTick>
  LL_SetSystemCoreClock(72000000);
}
 80001d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LL_SetSystemCoreClock(72000000);
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <SystemClock_Config+0x98>)
 80001d6:	f000 bc03 	b.w	80009e0 <LL_SetSystemCoreClock>
 80001da:	bf00      	nop
 80001dc:	40022000 	.word	0x40022000
 80001e0:	40021000 	.word	0x40021000
 80001e4:	044aa200 	.word	0x044aa200

080001e8 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80001e8:	b672      	cpsid	i
 80001ea:	e7fe      	b.n	80001ea <Error_Handler+0x2>

080001ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80001ec:	e7fe      	b.n	80001ec <NMI_Handler>
 80001ee:	bf00      	nop

080001f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80001f0:	e7fe      	b.n	80001f0 <HardFault_Handler>
 80001f2:	bf00      	nop

080001f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80001f4:	e7fe      	b.n	80001f4 <MemManage_Handler>
 80001f6:	bf00      	nop

080001f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80001f8:	e7fe      	b.n	80001f8 <BusFault_Handler>
 80001fa:	bf00      	nop

080001fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80001fc:	e7fe      	b.n	80001fc <UsageFault_Handler>
 80001fe:	bf00      	nop

08000200 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop

08000204 <DebugMon_Handler>:
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop

08000208 <PendSV_Handler>:
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop

0800020c <SysTick_Handler>:
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop

08000210 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000210:	b430      	push	{r4, r5}
	TIM1->ARR = new_time;
	TIM1->RCR = new_repeat;
	TIM1->PSC = new_prescale;
	processed = true;
 8000212:	2501      	movs	r5, #1
	GPIOA->ODR = (new_state<<8);
	TIM1->SR = ~TIM_SR_UIF;
 8000214:	f06f 0101 	mvn.w	r1, #1
	TIM1->ARR = new_time;
 8000218:	4a0b      	ldr	r2, [pc, #44]	; (8000248 <TIM1_UP_IRQHandler+0x38>)
 800021a:	4b0c      	ldr	r3, [pc, #48]	; (800024c <TIM1_UP_IRQHandler+0x3c>)
 800021c:	8812      	ldrh	r2, [r2, #0]
	TIM1->RCR = new_repeat;
 800021e:	480c      	ldr	r0, [pc, #48]	; (8000250 <TIM1_UP_IRQHandler+0x40>)
	TIM1->ARR = new_time;
 8000220:	b292      	uxth	r2, r2
 8000222:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->RCR = new_repeat;
 8000224:	8802      	ldrh	r2, [r0, #0]
	TIM1->PSC = new_prescale;
 8000226:	480b      	ldr	r0, [pc, #44]	; (8000254 <TIM1_UP_IRQHandler+0x44>)
	TIM1->RCR = new_repeat;
 8000228:	b292      	uxth	r2, r2
 800022a:	631a      	str	r2, [r3, #48]	; 0x30
	TIM1->PSC = new_prescale;
 800022c:	8802      	ldrh	r2, [r0, #0]
	processed = true;
 800022e:	4c0a      	ldr	r4, [pc, #40]	; (8000258 <TIM1_UP_IRQHandler+0x48>)
	TIM1->PSC = new_prescale;
 8000230:	b292      	uxth	r2, r2
	GPIOA->ODR = (new_state<<8);
 8000232:	480a      	ldr	r0, [pc, #40]	; (800025c <TIM1_UP_IRQHandler+0x4c>)
	TIM1->PSC = new_prescale;
 8000234:	629a      	str	r2, [r3, #40]	; 0x28
	processed = true;
 8000236:	7025      	strb	r5, [r4, #0]
	GPIOA->ODR = (new_state<<8);
 8000238:	8802      	ldrh	r2, [r0, #0]
 800023a:	4809      	ldr	r0, [pc, #36]	; (8000260 <TIM1_UP_IRQHandler+0x50>)
 800023c:	0212      	lsls	r2, r2, #8
 800023e:	60c2      	str	r2, [r0, #12]
}
 8000240:	bc30      	pop	{r4, r5}
	TIM1->SR = ~TIM_SR_UIF;
 8000242:	6119      	str	r1, [r3, #16]
}
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	20000036 	.word	0x20000036
 800024c:	40012c00 	.word	0x40012c00
 8000250:	2000003c 	.word	0x2000003c
 8000254:	2000003a 	.word	0x2000003a
 8000258:	20000034 	.word	0x20000034
 800025c:	20000038 	.word	0x20000038
 8000260:	40010800 	.word	0x40010800

08000264 <TIM2_IRQHandler>:
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop

08000268 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop

0800026c <SystemCoreClockUpdate>:
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800026c:	4a11      	ldr	r2, [pc, #68]	; (80002b4 <SystemCoreClockUpdate+0x48>)
 800026e:	6853      	ldr	r3, [r2, #4]
 8000270:	f003 030c 	and.w	r3, r3, #12
  
  switch (tmp)
 8000274:	2b08      	cmp	r3, #8
 8000276:	d10e      	bne.n	8000296 <SystemCoreClockUpdate+0x2a>
      SystemCoreClock = HSE_VALUE;
      break;
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000278:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800027a:	6851      	ldr	r1, [r2, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18U) + 2U;
 800027c:	f3c3 4383 	ubfx	r3, r3, #18, #4
      
      if (pllsource == 0x00U)
 8000280:	03c9      	lsls	r1, r1, #15
      pllmull = ( pllmull >> 18U) + 2U;
 8000282:	f103 0302 	add.w	r3, r3, #2
      if (pllsource == 0x00U)
 8000286:	d511      	bpl.n	80002ac <SystemCoreClockUpdate+0x40>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1U;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 8000288:	6852      	ldr	r2, [r2, #4]
 800028a:	0392      	lsls	r2, r2, #14
 800028c:	d40e      	bmi.n	80002ac <SystemCoreClockUpdate+0x40>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
 800028e:	4a0a      	ldr	r2, [pc, #40]	; (80002b8 <SystemCoreClockUpdate+0x4c>)
 8000290:	fb02 f303 	mul.w	r3, r2, r3
 8000294:	e000      	b.n	8000298 <SystemCoreClockUpdate+0x2c>
  switch (tmp)
 8000296:	4b08      	ldr	r3, [pc, #32]	; (80002b8 <SystemCoreClockUpdate+0x4c>)
      break;
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000298:	4a06      	ldr	r2, [pc, #24]	; (80002b4 <SystemCoreClockUpdate+0x48>)
 800029a:	4808      	ldr	r0, [pc, #32]	; (80002bc <SystemCoreClockUpdate+0x50>)
 800029c:	6852      	ldr	r2, [r2, #4]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 800029e:	4908      	ldr	r1, [pc, #32]	; (80002c0 <SystemCoreClockUpdate+0x54>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80002a0:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80002a4:	5c82      	ldrb	r2, [r0, r2]
  SystemCoreClock >>= tmp;  
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	600b      	str	r3, [r1, #0]
}
 80002aa:	4770      	bx	lr
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 80002ac:	4a05      	ldr	r2, [pc, #20]	; (80002c4 <SystemCoreClockUpdate+0x58>)
 80002ae:	fb02 f303 	mul.w	r3, r2, r3
 80002b2:	e7f1      	b.n	8000298 <SystemCoreClockUpdate+0x2c>
 80002b4:	40021000 	.word	0x40021000
 80002b8:	007a1200 	.word	0x007a1200
 80002bc:	08001144 	.word	0x08001144
 80002c0:	20000010 	.word	0x20000010
 80002c4:	003d0900 	.word	0x003d0900

080002c8 <LL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Force and Release reset on clock of GPIOx Port */
  if (GPIOx == GPIOA)
 80002c8:	4b26      	ldr	r3, [pc, #152]	; (8000364 <LL_GPIO_DeInit+0x9c>)
 80002ca:	4298      	cmp	r0, r3
 80002cc:	d00d      	beq.n	80002ea <LL_GPIO_DeInit+0x22>
  {
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_GPIOA);
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_GPIOA);
  }
  else if (GPIOx == GPIOB)
 80002ce:	4b26      	ldr	r3, [pc, #152]	; (8000368 <LL_GPIO_DeInit+0xa0>)
 80002d0:	4298      	cmp	r0, r3
 80002d2:	d02e      	beq.n	8000332 <LL_GPIO_DeInit+0x6a>
  {
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_GPIOB);
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_GPIOB);
  }
  else if (GPIOx == GPIOC)
 80002d4:	4b25      	ldr	r3, [pc, #148]	; (800036c <LL_GPIO_DeInit+0xa4>)
 80002d6:	4298      	cmp	r0, r3
 80002d8:	d013      	beq.n	8000302 <LL_GPIO_DeInit+0x3a>
  {
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_GPIOC);
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_GPIOC);
  }
  else if (GPIOx == GPIOD)
 80002da:	4b25      	ldr	r3, [pc, #148]	; (8000370 <LL_GPIO_DeInit+0xa8>)
 80002dc:	4298      	cmp	r0, r3
 80002de:	d034      	beq.n	800034a <LL_GPIO_DeInit+0x82>
  {
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_GPIOD);
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_GPIOD);
  }
#if defined(GPIOE)
  else if (GPIOx == GPIOE)
 80002e0:	4b24      	ldr	r3, [pc, #144]	; (8000374 <LL_GPIO_DeInit+0xac>)
 80002e2:	4298      	cmp	r0, r3
 80002e4:	d019      	beq.n	800031a <LL_GPIO_DeInit+0x52>
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_GPIOG);
  }
#endif
  else
  {
    status = ERROR;
 80002e6:	2001      	movs	r0, #1
  }

  return (status);
}
 80002e8:	4770      	bx	lr
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
  SET_BIT(RCC->APB2RSTR, Periphs);
 80002ea:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80002ee:	68da      	ldr	r2, [r3, #12]
  ErrorStatus status = SUCCESS;
 80002f0:	2000      	movs	r0, #0
 80002f2:	f042 0204 	orr.w	r2, r2, #4
 80002f6:	60da      	str	r2, [r3, #12]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80002f8:	68da      	ldr	r2, [r3, #12]
 80002fa:	f022 0204 	bic.w	r2, r2, #4
 80002fe:	60da      	str	r2, [r3, #12]
 8000300:	4770      	bx	lr
  SET_BIT(RCC->APB2RSTR, Periphs);
 8000302:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000306:	68da      	ldr	r2, [r3, #12]
 8000308:	2000      	movs	r0, #0
 800030a:	f042 0210 	orr.w	r2, r2, #16
 800030e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8000310:	68da      	ldr	r2, [r3, #12]
 8000312:	f022 0210 	bic.w	r2, r2, #16
 8000316:	60da      	str	r2, [r3, #12]
 8000318:	4770      	bx	lr
  SET_BIT(RCC->APB2RSTR, Periphs);
 800031a:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 800031e:	68da      	ldr	r2, [r3, #12]
 8000320:	2000      	movs	r0, #0
 8000322:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000326:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8000328:	68da      	ldr	r2, [r3, #12]
 800032a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800032e:	60da      	str	r2, [r3, #12]
 8000330:	4770      	bx	lr
  SET_BIT(RCC->APB2RSTR, Periphs);
 8000332:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 8000336:	68da      	ldr	r2, [r3, #12]
 8000338:	2000      	movs	r0, #0
 800033a:	f042 0208 	orr.w	r2, r2, #8
 800033e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8000340:	68da      	ldr	r2, [r3, #12]
 8000342:	f022 0208 	bic.w	r2, r2, #8
 8000346:	60da      	str	r2, [r3, #12]
 8000348:	4770      	bx	lr
  SET_BIT(RCC->APB2RSTR, Periphs);
 800034a:	f503 437c 	add.w	r3, r3, #64512	; 0xfc00
 800034e:	68da      	ldr	r2, [r3, #12]
 8000350:	2000      	movs	r0, #0
 8000352:	f042 0220 	orr.w	r2, r2, #32
 8000356:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8000358:	68da      	ldr	r2, [r3, #12]
 800035a:	f022 0220 	bic.w	r2, r2, #32
 800035e:	60da      	str	r2, [r3, #12]
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	40010800 	.word	0x40010800
 8000368:	40010c00 	.word	0x40010c00
 800036c:	40011000 	.word	0x40011000
 8000370:	40011400 	.word	0x40011400
 8000374:	40011800 	.word	0x40011800

08000378 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 800037c:	680f      	ldr	r7, [r1, #0]
 800037e:	f3c7 270f 	ubfx	r7, r7, #8, #16
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000382:	fa97 f6a7 	rbit	r6, r7
  pinpos = POSITION_VAL(pinmask);
 8000386:	fab6 f686 	clz	r6, r6

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 800038a:	fa37 f306 	lsrs.w	r3, r7, r6
 800038e:	d06e      	beq.n	800046e <LL_GPIO_Init+0xf6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8000390:	f04f 0c01 	mov.w	ip, #1
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8000394:	f04f 0e0f 	mov.w	lr, #15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8000398:	f04f 0803 	mov.w	r8, #3
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 800039c:	f04f 0a04 	mov.w	sl, #4
 80003a0:	e056      	b.n	8000450 <LL_GPIO_Init+0xd8>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
      {
        currentpin = (0x00000101uL << pinpos);
 80003a2:	f240 1301 	movw	r3, #257	; 0x101
 80003a6:	40b3      	lsls	r3, r6
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80003a8:	68c2      	ldr	r2, [r0, #12]
 80003aa:	ea4f 2913 	mov.w	r9, r3, lsr #8
 80003ae:	fa99 f4a9 	rbit	r4, r9
 80003b2:	fab4 f584 	clz	r5, r4
 80003b6:	690c      	ldr	r4, [r1, #16]
 80003b8:	ea22 0209 	bic.w	r2, r2, r9
 80003bc:	40ac      	lsls	r4, r5
 80003be:	4322      	orrs	r2, r4
 80003c0:	60c2      	str	r2, [r0, #12]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80003c2:	0e1c      	lsrs	r4, r3, #24
 80003c4:	fa93 f5a3 	rbit	r5, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80003c8:	fab5 f585 	clz	r5, r5
 80003cc:	fa93 f2a3 	rbit	r2, r3
 80003d0:	fab2 f282 	clz	r2, r2
 80003d4:	00ad      	lsls	r5, r5, #2
 80003d6:	ea4f 0982 	mov.w	r9, r2, lsl #2
 80003da:	5902      	ldr	r2, [r0, r4]
 80003dc:	fa0e f505 	lsl.w	r5, lr, r5
 80003e0:	ea22 0505 	bic.w	r5, r2, r5
 80003e4:	684a      	ldr	r2, [r1, #4]
 80003e6:	fa02 f209 	lsl.w	r2, r2, r9
 80003ea:	4315      	orrs	r5, r2
 80003ec:	5105      	str	r5, [r0, r4]
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80003ee:	684a      	ldr	r2, [r1, #4]
 80003f0:	f022 0208 	bic.w	r2, r2, #8
 80003f4:	2a01      	cmp	r2, #1
 80003f6:	d127      	bne.n	8000448 <LL_GPIO_Init+0xd0>
 80003f8:	fa93 f2a3 	rbit	r2, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	fa93 f9a3 	rbit	r9, r3
 8000404:	fab9 f989 	clz	r9, r9
 8000408:	0092      	lsls	r2, r2, #2
 800040a:	fa08 f202 	lsl.w	r2, r8, r2
 800040e:	ea25 0502 	bic.w	r5, r5, r2
 8000412:	688a      	ldr	r2, [r1, #8]
 8000414:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8000418:	fa02 f209 	lsl.w	r2, r2, r9
 800041c:	432a      	orrs	r2, r5
 800041e:	5102      	str	r2, [r0, r4]
 8000420:	fa93 f9a3 	rbit	r9, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8000424:	fab9 f989 	clz	r9, r9
 8000428:	fa93 f3a3 	rbit	r3, r3
 800042c:	fab3 f383 	clz	r3, r3
 8000430:	68cd      	ldr	r5, [r1, #12]
 8000432:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8000436:	009b      	lsls	r3, r3, #2
 8000438:	fa0a f909 	lsl.w	r9, sl, r9
 800043c:	ea22 0209 	bic.w	r2, r2, r9
 8000440:	fa05 f303 	lsl.w	r3, r5, r3
 8000444:	4313      	orrs	r3, r2
 8000446:	5103      	str	r3, [r0, r4]

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
      }
    }
    pinpos++;
 8000448:	3601      	adds	r6, #1
  while ((pinmask  >> pinpos) != 0u)
 800044a:	fa37 f306 	lsrs.w	r3, r7, r6
 800044e:	d00e      	beq.n	800046e <LL_GPIO_Init+0xf6>
    if ((pinmask & (1u << pinpos)) != 0u)
 8000450:	fa0c f306 	lsl.w	r3, ip, r6
 8000454:	423b      	tst	r3, r7
 8000456:	d0f7      	beq.n	8000448 <LL_GPIO_Init+0xd0>
      if (pinpos < GPIO_PIN_MASK_POS)
 8000458:	2e07      	cmp	r6, #7
 800045a:	d9a2      	bls.n	80003a2 <LL_GPIO_Init+0x2a>
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 800045c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8000460:	f1a6 0308 	sub.w	r3, r6, #8
 8000464:	fa02 f303 	lsl.w	r3, r2, r3
 8000468:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800046c:	e79c      	b.n	80003a8 <LL_GPIO_Init+0x30>
  }
  return (SUCCESS);
}
 800046e:	2000      	movs	r0, #0
 8000470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000474 <LL_GPIO_StructInit>:
  *                          whose fields will be set to default values.
  * @retval None
  */

void LL_GPIO_StructInit(LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000474:	b410      	push	{r4}
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->Pin        = LL_GPIO_PIN_ALL;
  GPIO_InitStruct->Mode       = LL_GPIO_MODE_FLOATING;
 8000476:	2304      	movs	r3, #4
  GPIO_InitStruct->Pin        = LL_GPIO_PIN_ALL;
 8000478:	f06f 447b 	mvn.w	r4, #4211081216	; 0xfb000000
  GPIO_InitStruct->Speed      = LL_GPIO_SPEED_FREQ_LOW;
 800047c:	2102      	movs	r1, #2
  GPIO_InitStruct->OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
  GPIO_InitStruct->Pull       = LL_GPIO_PULL_DOWN;
 800047e:	2200      	movs	r2, #0
  GPIO_InitStruct->Pin        = LL_GPIO_PIN_ALL;
 8000480:	6004      	str	r4, [r0, #0]
  GPIO_InitStruct->Speed      = LL_GPIO_SPEED_FREQ_LOW;
 8000482:	6081      	str	r1, [r0, #8]
  GPIO_InitStruct->Pull       = LL_GPIO_PULL_DOWN;
 8000484:	6102      	str	r2, [r0, #16]
  GPIO_InitStruct->Mode       = LL_GPIO_MODE_FLOATING;
 8000486:	6043      	str	r3, [r0, #4]
  GPIO_InitStruct->OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000488:	60c3      	str	r3, [r0, #12]
}
 800048a:	bc10      	pop	{r4}
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop

08000490 <LL_TIM_DeInit>:
  ErrorStatus result = SUCCESS;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));

  if (TIMx == TIM2)
 8000490:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000494:	d00a      	beq.n	80004ac <LL_TIM_DeInit+0x1c>
  {
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_TIM2);
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_TIM2);
  }
#if defined(TIM1)
  else if (TIMx == TIM1)
 8000496:	4b1d      	ldr	r3, [pc, #116]	; (800050c <LL_TIM_DeInit+0x7c>)
 8000498:	4298      	cmp	r0, r3
 800049a:	d01e      	beq.n	80004da <LL_TIM_DeInit+0x4a>
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_TIM1);
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_TIM1);
  }
#endif
#if defined(TIM3)
  else if (TIMx == TIM3)
 800049c:	4b1c      	ldr	r3, [pc, #112]	; (8000510 <LL_TIM_DeInit+0x80>)
 800049e:	4298      	cmp	r0, r3
 80004a0:	d00f      	beq.n	80004c2 <LL_TIM_DeInit+0x32>
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_TIM3);
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_TIM3);
  }
#endif
#if defined(TIM4)
  else if (TIMx == TIM4)
 80004a2:	4b1c      	ldr	r3, [pc, #112]	; (8000514 <LL_TIM_DeInit+0x84>)
 80004a4:	4298      	cmp	r0, r3
 80004a6:	d024      	beq.n	80004f2 <LL_TIM_DeInit+0x62>
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_TIM17);
  }
#endif
  else
  {
    result = ERROR;
 80004a8:	2001      	movs	r0, #1
  }

  return result;
}
 80004aa:	4770      	bx	lr
  SET_BIT(RCC->APB1RSTR, Periphs);
 80004ac:	4b1a      	ldr	r3, [pc, #104]	; (8000518 <LL_TIM_DeInit+0x88>)
  ErrorStatus result = SUCCESS;
 80004ae:	2000      	movs	r0, #0
 80004b0:	691a      	ldr	r2, [r3, #16]
 80004b2:	f042 0201 	orr.w	r2, r2, #1
 80004b6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->APB1RSTR, Periphs);
 80004b8:	691a      	ldr	r2, [r3, #16]
 80004ba:	f022 0201 	bic.w	r2, r2, #1
 80004be:	611a      	str	r2, [r3, #16]
 80004c0:	4770      	bx	lr
  SET_BIT(RCC->APB1RSTR, Periphs);
 80004c2:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 80004c6:	691a      	ldr	r2, [r3, #16]
 80004c8:	2000      	movs	r0, #0
 80004ca:	f042 0202 	orr.w	r2, r2, #2
 80004ce:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->APB1RSTR, Periphs);
 80004d0:	691a      	ldr	r2, [r3, #16]
 80004d2:	f022 0202 	bic.w	r2, r2, #2
 80004d6:	611a      	str	r2, [r3, #16]
 80004d8:	4770      	bx	lr
  SET_BIT(RCC->APB2RSTR, Periphs);
 80004da:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80004de:	68da      	ldr	r2, [r3, #12]
 80004e0:	2000      	movs	r0, #0
 80004e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80004e6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80004e8:	68da      	ldr	r2, [r3, #12]
 80004ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80004ee:	60da      	str	r2, [r3, #12]
 80004f0:	4770      	bx	lr
  SET_BIT(RCC->APB1RSTR, Periphs);
 80004f2:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80004f6:	691a      	ldr	r2, [r3, #16]
 80004f8:	2000      	movs	r0, #0
 80004fa:	f042 0204 	orr.w	r2, r2, #4
 80004fe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->APB1RSTR, Periphs);
 8000500:	691a      	ldr	r2, [r3, #16]
 8000502:	f022 0204 	bic.w	r2, r2, #4
 8000506:	611a      	str	r2, [r3, #16]
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	40012c00 	.word	0x40012c00
 8000510:	40000400 	.word	0x40000400
 8000514:	40000800 	.word	0x40000800
 8000518:	40021000 	.word	0x40021000

0800051c <LL_TIM_StructInit>:
  * @retval None
  */
void LL_TIM_StructInit(LL_TIM_InitTypeDef *TIM_InitStruct)
{
  /* Set the default configuration */
  TIM_InitStruct->Prescaler         = (uint16_t)0x0000;
 800051c:	2300      	movs	r3, #0
  TIM_InitStruct->CounterMode       = LL_TIM_COUNTERMODE_UP;
  TIM_InitStruct->Autoreload        = 0xFFFFFFFFU;
 800051e:	f04f 32ff 	mov.w	r2, #4294967295
  TIM_InitStruct->Prescaler         = (uint16_t)0x0000;
 8000522:	8003      	strh	r3, [r0, #0]
  TIM_InitStruct->Autoreload        = 0xFFFFFFFFU;
 8000524:	6082      	str	r2, [r0, #8]
  TIM_InitStruct->CounterMode       = LL_TIM_COUNTERMODE_UP;
 8000526:	6043      	str	r3, [r0, #4]
  TIM_InitStruct->ClockDivision     = LL_TIM_CLOCKDIVISION_DIV1;
  TIM_InitStruct->RepetitionCounter = 0x00000000U;
 8000528:	e9c0 3303 	strd	r3, r3, [r0, #12]
}
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8000530:	b430      	push	{r4, r5}
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000532:	4d19      	ldr	r5, [pc, #100]	; (8000598 <LL_TIM_Init+0x68>)
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8000534:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000536:	42a8      	cmp	r0, r5
 8000538:	688a      	ldr	r2, [r1, #8]
 800053a:	880c      	ldrh	r4, [r1, #0]
 800053c:	d01d      	beq.n	800057a <LL_TIM_Init+0x4a>
 800053e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000542:	d011      	beq.n	8000568 <LL_TIM_Init+0x38>
 8000544:	f5a5 3594 	sub.w	r5, r5, #75776	; 0x12800
 8000548:	42a8      	cmp	r0, r5
 800054a:	d00d      	beq.n	8000568 <LL_TIM_Init+0x38>
 800054c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000550:	42a8      	cmp	r0, r5
 8000552:	d009      	beq.n	8000568 <LL_TIM_Init+0x38>
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8000554:	6003      	str	r3, [r0, #0]
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
  WRITE_REG(TIMx->ARR, AutoReload);
 8000556:	62c2      	str	r2, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 8000558:	6284      	str	r4, [r0, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800055a:	6943      	ldr	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 800055c:	bc30      	pop	{r4, r5}
 800055e:	f043 0301 	orr.w	r3, r3, #1
 8000562:	6143      	str	r3, [r0, #20]
 8000564:	2000      	movs	r0, #0
 8000566:	4770      	bx	lr
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8000568:	684d      	ldr	r5, [r1, #4]
 800056a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800056e:	432b      	orrs	r3, r5
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8000570:	68c9      	ldr	r1, [r1, #12]
 8000572:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000576:	430b      	orrs	r3, r1
 8000578:	e7ec      	b.n	8000554 <LL_TIM_Init+0x24>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800057a:	684d      	ldr	r5, [r1, #4]
 800057c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000580:	432b      	orrs	r3, r5
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8000582:	68cd      	ldr	r5, [r1, #12]
 8000584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000588:	432b      	orrs	r3, r5
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800058a:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800058c:	62c2      	str	r2, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 800058e:	6284      	str	r4, [r0, #40]	; 0x28
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8000590:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8000592:	6303      	str	r3, [r0, #48]	; 0x30
 8000594:	e7e1      	b.n	800055a <LL_TIM_Init+0x2a>
 8000596:	bf00      	nop
 8000598:	40012c00 	.word	0x40012c00

0800059c <LL_TIM_OC_StructInit>:
  * @retval None
  */
void LL_TIM_OC_StructInit(LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  /* Set the default configuration */
  TIM_OC_InitStruct->OCMode       = LL_TIM_OCMODE_FROZEN;
 800059c:	2300      	movs	r3, #0
  TIM_OC_InitStruct->OCState      = LL_TIM_OCSTATE_DISABLE;
 800059e:	e9c0 3300 	strd	r3, r3, [r0]
  TIM_OC_InitStruct->OCNState     = LL_TIM_OCSTATE_DISABLE;
  TIM_OC_InitStruct->CompareValue = 0x00000000U;
 80005a2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  TIM_OC_InitStruct->OCPolarity   = LL_TIM_OCPOLARITY_HIGH;
  TIM_OC_InitStruct->OCNPolarity  = LL_TIM_OCPOLARITY_HIGH;
 80005a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
  TIM_OC_InitStruct->OCIdleState  = LL_TIM_OCIDLESTATE_LOW;
  TIM_OC_InitStruct->OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 80005aa:	e9c0 3306 	strd	r3, r3, [r0, #24]
}
 80005ae:	4770      	bx	lr

080005b0 <LL_TIM_OC_Init>:
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  ErrorStatus result = ERROR;

  switch (Channel)
 80005b0:	2910      	cmp	r1, #16
{
 80005b2:	b470      	push	{r4, r5, r6}
 80005b4:	4603      	mov	r3, r0
  switch (Channel)
 80005b6:	d06d      	beq.n	8000694 <LL_TIM_OC_Init+0xe4>
 80005b8:	d948      	bls.n	800064c <LL_TIM_OC_Init+0x9c>
 80005ba:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80005be:	d024      	beq.n	800060a <LL_TIM_OC_Init+0x5a>
 80005c0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80005c4:	d163      	bne.n	800068e <LL_TIM_OC_Init+0xde>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80005c6:	6a00      	ldr	r0, [r0, #32]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80005c8:	6915      	ldr	r5, [r2, #16]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80005ca:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 80005ce:	6218      	str	r0, [r3, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80005d0:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80005d2:	685e      	ldr	r6, [r3, #4]
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80005d4:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 80005d8:	ea41 3105 	orr.w	r1, r1, r5, lsl #12

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80005dc:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80005e0:	e9d2 0500 	ldrd	r0, r5, [r2]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80005e4:	69dc      	ldr	r4, [r3, #28]
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80005e6:	ea41 3105 	orr.w	r1, r1, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80005ea:	4d5d      	ldr	r5, [pc, #372]	; (8000760 <LL_TIM_OC_Init+0x1b0>)
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80005ec:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80005f0:	42ab      	cmp	r3, r5
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80005f2:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80005f6:	f000 80ac 	beq.w	8000752 <LL_TIM_OC_Init+0x1a2>

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80005fa:	68d2      	ldr	r2, [r2, #12]
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80005fc:	2000      	movs	r0, #0
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80005fe:	605e      	str	r6, [r3, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8000600:	61dc      	str	r4, [r3, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8000602:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000604:	bc70      	pop	{r4, r5, r6}

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000606:	6219      	str	r1, [r3, #32]
}
 8000608:	4770      	bx	lr
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800060a:	6a00      	ldr	r0, [r0, #32]
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800060c:	6915      	ldr	r5, [r2, #16]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800060e:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8000612:	6218      	str	r0, [r3, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8000614:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8000616:	685e      	ldr	r6, [r3, #4]
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8000618:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 800061c:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8000620:	f421 7180 	bic.w	r1, r1, #256	; 0x100
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8000624:	e9d2 0500 	ldrd	r0, r5, [r2]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8000628:	69dc      	ldr	r4, [r3, #28]
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800062a:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800062e:	4d4c      	ldr	r5, [pc, #304]	; (8000760 <LL_TIM_OC_Init+0x1b0>)
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8000630:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000634:	42ab      	cmp	r3, r5
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8000636:	ea44 0400 	orr.w	r4, r4, r0
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800063a:	d075      	beq.n	8000728 <LL_TIM_OC_Init+0x178>
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800063c:	68d2      	ldr	r2, [r2, #12]
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800063e:	2000      	movs	r0, #0
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000640:	605e      	str	r6, [r3, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8000642:	61dc      	str	r4, [r3, #28]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8000644:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000646:	bc70      	pop	{r4, r5, r6}
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000648:	6219      	str	r1, [r3, #32]
}
 800064a:	4770      	bx	lr
  switch (Channel)
 800064c:	2901      	cmp	r1, #1
 800064e:	d11e      	bne.n	800068e <LL_TIM_OC_Init+0xde>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8000650:	6a00      	ldr	r0, [r0, #32]
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8000652:	6915      	ldr	r5, [r2, #16]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8000654:	f020 0001 	bic.w	r0, r0, #1
 8000658:	6218      	str	r0, [r3, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800065a:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800065c:	685e      	ldr	r6, [r3, #4]
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800065e:	f021 0102 	bic.w	r1, r1, #2
 8000662:	4329      	orrs	r1, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8000664:	f021 0101 	bic.w	r1, r1, #1
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8000668:	e9d2 0500 	ldrd	r0, r5, [r2]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800066c:	699c      	ldr	r4, [r3, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800066e:	4329      	orrs	r1, r5
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000670:	4d3b      	ldr	r5, [pc, #236]	; (8000760 <LL_TIM_OC_Init+0x1b0>)
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8000672:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000676:	42ab      	cmp	r3, r5
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8000678:	ea44 0400 	orr.w	r4, r4, r0
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800067c:	d040      	beq.n	8000700 <LL_TIM_OC_Init+0x150>
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800067e:	68d2      	ldr	r2, [r2, #12]
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8000680:	2000      	movs	r0, #0
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000682:	605e      	str	r6, [r3, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8000684:	619c      	str	r4, [r3, #24]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000686:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000688:	bc70      	pop	{r4, r5, r6}
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800068a:	6219      	str	r1, [r3, #32]
}
 800068c:	4770      	bx	lr
  ErrorStatus result = ERROR;
 800068e:	2001      	movs	r0, #1
}
 8000690:	bc70      	pop	{r4, r5, r6}
 8000692:	4770      	bx	lr
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8000694:	6a00      	ldr	r0, [r0, #32]
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8000696:	6915      	ldr	r5, [r2, #16]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8000698:	f020 0010 	bic.w	r0, r0, #16
 800069c:	6218      	str	r0, [r3, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800069e:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80006a0:	685e      	ldr	r6, [r3, #4]
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80006a2:	f021 0120 	bic.w	r1, r1, #32
 80006a6:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80006aa:	f021 0110 	bic.w	r1, r1, #16
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80006ae:	e9d2 0500 	ldrd	r0, r5, [r2]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80006b2:	699c      	ldr	r4, [r3, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80006b4:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80006b8:	4d29      	ldr	r5, [pc, #164]	; (8000760 <LL_TIM_OC_Init+0x1b0>)
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80006ba:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80006be:	42ab      	cmp	r3, r5
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80006c0:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80006c4:	d007      	beq.n	80006d6 <LL_TIM_OC_Init+0x126>
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80006c6:	68d2      	ldr	r2, [r2, #12]
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80006c8:	2000      	movs	r0, #0
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80006ca:	605e      	str	r6, [r3, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80006cc:	619c      	str	r4, [r3, #24]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80006ce:	639a      	str	r2, [r3, #56]	; 0x38
}
 80006d0:	bc70      	pop	{r4, r5, r6}
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80006d2:	6219      	str	r1, [r3, #32]
}
 80006d4:	4770      	bx	lr
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80006d6:	f021 0180 	bic.w	r1, r1, #128	; 0x80
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80006da:	f426 6680 	bic.w	r6, r6, #1024	; 0x400
 80006de:	e9d2 5005 	ldrd	r5, r0, [r2, #20]
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80006e2:	ea41 1185 	orr.w	r1, r1, r5, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80006e6:	ea46 0680 	orr.w	r6, r6, r0, lsl #2
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80006ea:	6895      	ldr	r5, [r2, #8]
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80006ec:	69d0      	ldr	r0, [r2, #28]
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80006ee:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80006f2:	f426 6600 	bic.w	r6, r6, #2048	; 0x800
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80006f6:	ea41 1185 	orr.w	r1, r1, r5, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80006fa:	ea46 06c0 	orr.w	r6, r6, r0, lsl #3
 80006fe:	e7e2      	b.n	80006c6 <LL_TIM_OC_Init+0x116>
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8000700:	f021 0108 	bic.w	r1, r1, #8
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8000704:	f426 7680 	bic.w	r6, r6, #256	; 0x100
 8000708:	e9d2 5005 	ldrd	r5, r0, [r2, #20]
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800070c:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8000710:	4306      	orrs	r6, r0
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8000712:	6895      	ldr	r5, [r2, #8]
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8000714:	69d0      	ldr	r0, [r2, #28]
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8000716:	f021 0104 	bic.w	r1, r1, #4
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800071a:	f426 7600 	bic.w	r6, r6, #512	; 0x200
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800071e:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8000722:	ea46 0640 	orr.w	r6, r6, r0, lsl #1
 8000726:	e7aa      	b.n	800067e <LL_TIM_OC_Init+0xce>
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8000728:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800072c:	f426 5680 	bic.w	r6, r6, #4096	; 0x1000
 8000730:	e9d2 5005 	ldrd	r5, r0, [r2, #20]
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8000734:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8000738:	ea46 1600 	orr.w	r6, r6, r0, lsl #4
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800073c:	6895      	ldr	r5, [r2, #8]
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800073e:	69d0      	ldr	r0, [r2, #28]
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8000740:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8000744:	f426 5600 	bic.w	r6, r6, #8192	; 0x2000
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8000748:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800074c:	ea46 1640 	orr.w	r6, r6, r0, lsl #5
 8000750:	e774      	b.n	800063c <LL_TIM_OC_Init+0x8c>
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8000752:	6990      	ldr	r0, [r2, #24]
 8000754:	f426 4680 	bic.w	r6, r6, #16384	; 0x4000
 8000758:	ea46 1680 	orr.w	r6, r6, r0, lsl #6
 800075c:	e74d      	b.n	80005fa <LL_TIM_OC_Init+0x4a>
 800075e:	bf00      	nop
 8000760:	40012c00 	.word	0x40012c00

08000764 <LL_TIM_IC_StructInit>:
  TIM_ICInitStruct->ICPolarity    = LL_TIM_IC_POLARITY_RISING;
 8000764:	2300      	movs	r3, #0
 8000766:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  TIM_ICInitStruct->ICFilter      = LL_TIM_IC_FILTER_FDIV1;
 800076a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  TIM_ICInitStruct->ICPolarity    = LL_TIM_IC_POLARITY_RISING;
 800076e:	e9c0 3200 	strd	r3, r2, [r0]
}
 8000772:	4770      	bx	lr

08000774 <LL_TIM_IC_Init>:
  switch (Channel)
 8000774:	2910      	cmp	r1, #16
{
 8000776:	b430      	push	{r4, r5}
  switch (Channel)
 8000778:	d05b      	beq.n	8000832 <LL_TIM_IC_Init+0xbe>
 800077a:	d93b      	bls.n	80007f4 <LL_TIM_IC_Init+0x80>
 800077c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8000780:	d01d      	beq.n	80007be <LL_TIM_IC_Init+0x4a>
 8000782:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8000786:	d151      	bne.n	800082c <LL_TIM_IC_Init+0xb8>
  assert_param(IS_LL_TIM_ACTIVEINPUT(TIM_ICInitStruct->ICActiveInput));
  assert_param(IS_LL_TIM_ICPSC(TIM_ICInitStruct->ICPrescaler));
  assert_param(IS_LL_TIM_IC_FILTER(TIM_ICInitStruct->ICFilter));

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC4E;
 8000788:	6a03      	ldr	r3, [r0, #32]

  /* Select the Input and set the filter and the prescaler value */
  MODIFY_REG(TIMx->CCMR2,
 800078a:	6851      	ldr	r1, [r2, #4]
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC4E;
 800078c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000790:	6203      	str	r3, [r0, #32]
  MODIFY_REG(TIMx->CCMR2,
 8000792:	68d5      	ldr	r5, [r2, #12]
 8000794:	69c3      	ldr	r3, [r0, #28]
 8000796:	6894      	ldr	r4, [r2, #8]
 8000798:	4329      	orrs	r1, r5
 800079a:	4321      	orrs	r1, r4
 800079c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80007a0:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
 80007a4:	61c3      	str	r3, [r0, #28]
             (TIM_CCMR2_CC4S | TIM_CCMR2_IC4F | TIM_CCMR2_IC4PSC),
             (TIM_ICInitStruct->ICActiveInput | TIM_ICInitStruct->ICFilter | TIM_ICInitStruct->ICPrescaler) >> 8U);

  /* Select the Polarity and set the CC4E Bit */
  MODIFY_REG(TIMx->CCER,
 80007a6:	6813      	ldr	r3, [r2, #0]
 80007a8:	6a02      	ldr	r2, [r0, #32]
 80007aa:	031b      	lsls	r3, r3, #12
 80007ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80007b4:	4313      	orrs	r3, r2
 80007b6:	6203      	str	r3, [r0, #32]
}
 80007b8:	bc30      	pop	{r4, r5}
      result = IC4Config(TIMx, TIM_IC_InitStruct);
 80007ba:	2000      	movs	r0, #0
}
 80007bc:	4770      	bx	lr
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC3E;
 80007be:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(TIMx->CCMR2,
 80007c0:	6851      	ldr	r1, [r2, #4]
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC3E;
 80007c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007c6:	6203      	str	r3, [r0, #32]
  MODIFY_REG(TIMx->CCMR2,
 80007c8:	68d5      	ldr	r5, [r2, #12]
 80007ca:	69c3      	ldr	r3, [r0, #28]
 80007cc:	6894      	ldr	r4, [r2, #8]
 80007ce:	4329      	orrs	r1, r5
 80007d0:	4321      	orrs	r1, r4
 80007d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80007d6:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 80007da:	61c3      	str	r3, [r0, #28]
  MODIFY_REG(TIMx->CCER,
 80007dc:	6813      	ldr	r3, [r2, #0]
 80007de:	6a02      	ldr	r2, [r0, #32]
 80007e0:	021b      	lsls	r3, r3, #8
 80007e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007e6:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 80007ea:	4313      	orrs	r3, r2
 80007ec:	6203      	str	r3, [r0, #32]
}
 80007ee:	bc30      	pop	{r4, r5}
      result = IC3Config(TIMx, TIM_IC_InitStruct);
 80007f0:	2000      	movs	r0, #0
}
 80007f2:	4770      	bx	lr
  switch (Channel)
 80007f4:	2901      	cmp	r1, #1
 80007f6:	d119      	bne.n	800082c <LL_TIM_IC_Init+0xb8>
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC1E;
 80007f8:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(TIMx->CCMR1,
 80007fa:	6851      	ldr	r1, [r2, #4]
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC1E;
 80007fc:	f023 0301 	bic.w	r3, r3, #1
 8000800:	6203      	str	r3, [r0, #32]
  MODIFY_REG(TIMx->CCMR1,
 8000802:	68d5      	ldr	r5, [r2, #12]
 8000804:	6983      	ldr	r3, [r0, #24]
 8000806:	6894      	ldr	r4, [r2, #8]
 8000808:	4329      	orrs	r1, r5
 800080a:	4321      	orrs	r1, r4
 800080c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000810:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8000814:	6183      	str	r3, [r0, #24]
  MODIFY_REG(TIMx->CCER,
 8000816:	6813      	ldr	r3, [r2, #0]
 8000818:	6a02      	ldr	r2, [r0, #32]
 800081a:	f043 0301 	orr.w	r3, r3, #1
 800081e:	f022 020a 	bic.w	r2, r2, #10
 8000822:	4313      	orrs	r3, r2
 8000824:	6203      	str	r3, [r0, #32]
}
 8000826:	bc30      	pop	{r4, r5}
      result = IC1Config(TIMx, TIM_IC_InitStruct);
 8000828:	2000      	movs	r0, #0
}
 800082a:	4770      	bx	lr
  ErrorStatus result = ERROR;
 800082c:	2001      	movs	r0, #1
}
 800082e:	bc30      	pop	{r4, r5}
 8000830:	4770      	bx	lr
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC2E;
 8000832:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(TIMx->CCMR1,
 8000834:	6851      	ldr	r1, [r2, #4]
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC2E;
 8000836:	f023 0310 	bic.w	r3, r3, #16
 800083a:	6203      	str	r3, [r0, #32]
  MODIFY_REG(TIMx->CCMR1,
 800083c:	68d5      	ldr	r5, [r2, #12]
 800083e:	6983      	ldr	r3, [r0, #24]
 8000840:	6894      	ldr	r4, [r2, #8]
 8000842:	4329      	orrs	r1, r5
 8000844:	4321      	orrs	r1, r4
 8000846:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800084a:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
 800084e:	6183      	str	r3, [r0, #24]
  MODIFY_REG(TIMx->CCER,
 8000850:	6813      	ldr	r3, [r2, #0]
 8000852:	6a02      	ldr	r2, [r0, #32]
 8000854:	011b      	lsls	r3, r3, #4
 8000856:	f043 0310 	orr.w	r3, r3, #16
 800085a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800085e:	4313      	orrs	r3, r2
 8000860:	6203      	str	r3, [r0, #32]
}
 8000862:	bc30      	pop	{r4, r5}
      result = IC2Config(TIMx, TIM_IC_InitStruct);
 8000864:	2000      	movs	r0, #0
}
 8000866:	4770      	bx	lr

08000868 <LL_TIM_ENCODER_StructInit>:
  TIM_EncoderInitStruct->IC1Polarity    = LL_TIM_IC_POLARITY_RISING;
 8000868:	2300      	movs	r3, #0
  TIM_EncoderInitStruct->IC1ActiveInput = LL_TIM_ACTIVEINPUT_DIRECTTI;
 800086a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  TIM_EncoderInitStruct->EncoderMode    = LL_TIM_ENCODERMODE_X2_TI1;
 800086e:	2101      	movs	r1, #1
  TIM_EncoderInitStruct->IC1Filter      = LL_TIM_IC_FILTER_FDIV1;
 8000870:	e9c0 3303 	strd	r3, r3, [r0, #12]
  TIM_EncoderInitStruct->IC1Polarity    = LL_TIM_IC_POLARITY_RISING;
 8000874:	e9c0 1300 	strd	r1, r3, [r0]
  TIM_EncoderInitStruct->IC2Polarity    = LL_TIM_IC_POLARITY_RISING;
 8000878:	6143      	str	r3, [r0, #20]
  TIM_EncoderInitStruct->IC2Filter      = LL_TIM_IC_FILTER_FDIV1;
 800087a:	e9c0 3307 	strd	r3, r3, [r0, #28]
  TIM_EncoderInitStruct->IC1ActiveInput = LL_TIM_ACTIVEINPUT_DIRECTTI;
 800087e:	6082      	str	r2, [r0, #8]
  TIM_EncoderInitStruct->IC2ActiveInput = LL_TIM_ACTIVEINPUT_DIRECTTI;
 8000880:	6182      	str	r2, [r0, #24]
}
 8000882:	4770      	bx	lr

08000884 <LL_TIM_ENCODER_Init>:
{
 8000884:	4602      	mov	r2, r0
  TIMx->CCER &= (uint32_t)~(TIM_CCER_CC1E | TIM_CCER_CC2E);
 8000886:	6a03      	ldr	r3, [r0, #32]
{
 8000888:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= (uint32_t)~(TIM_CCER_CC1E | TIM_CCER_CC2E);
 800088a:	f023 0311 	bic.w	r3, r3, #17
  tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC1ActiveInput >> 16U);
 800088e:	894c      	ldrh	r4, [r1, #10]
  TIMx->CCER &= (uint32_t)~(TIM_CCER_CC1E | TIM_CCER_CC2E);
 8000890:	6203      	str	r3, [r0, #32]
  tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC1Filter >> 16U);
 8000892:	8a4b      	ldrh	r3, [r1, #18]
  tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC1Prescaler >> 16U);
 8000894:	89cd      	ldrh	r5, [r1, #14]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8000896:	6980      	ldr	r0, [r0, #24]
  tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC1Prescaler >> 16U);
 8000898:	431c      	orrs	r4, r3
  tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC2Filter >> 8U);
 800089a:	6a0b      	ldr	r3, [r1, #32]
  tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC1Prescaler >> 16U);
 800089c:	432c      	orrs	r4, r5
  tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC2ActiveInput >> 8U);
 800089e:	698d      	ldr	r5, [r1, #24]
  tmpccmr1 &= (uint32_t)~(TIM_CCMR1_CC1S | TIM_CCMR1_IC1F  | TIM_CCMR1_IC1PSC);
 80008a0:	f020 0eff 	bic.w	lr, r0, #255	; 0xff
  tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC2Filter >> 8U);
 80008a4:	0a1b      	lsrs	r3, r3, #8
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80008a6:	f8d2 c020 	ldr.w	ip, [r2, #32]
  tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC1Prescaler >> 16U);
 80008aa:	ea44 040e 	orr.w	r4, r4, lr
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 80008ae:	6897      	ldr	r7, [r2, #8]
  tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC2Prescaler >> 8U);
 80008b0:	f8d1 e01c 	ldr.w	lr, [r1, #28]
 80008b4:	ea43 2315 	orr.w	r3, r3, r5, lsr #8
  tmpccer |= (uint32_t)(TIM_EncoderInitStruct->IC2Polarity << 4U);
 80008b8:	694d      	ldr	r5, [r1, #20]
 80008ba:	e9d1 6000 	ldrd	r6, r0, [r1]
  tmpccer |= (uint32_t)(TIM_CCER_CC1E | TIM_CCER_CC2E);
 80008be:	f040 0111 	orr.w	r1, r0, #17
  tmpccer &= (uint32_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP | TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80008c2:	f02c 0caa 	bic.w	ip, ip, #170	; 0xaa
 80008c6:	f027 0007 	bic.w	r0, r7, #7
  tmpccmr1 &= (uint32_t)~(TIM_CCMR1_CC2S | TIM_CCMR1_IC2F  | TIM_CCMR1_IC2PSC);
 80008ca:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC2Prescaler >> 8U);
 80008ce:	ea43 231e 	orr.w	r3, r3, lr, lsr #8
  tmpccer |= (uint32_t)(TIM_CCER_CC1E | TIM_CCER_CC2E);
 80008d2:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 80008d6:	4330      	orrs	r0, r6
  tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC2Prescaler >> 8U);
 80008d8:	4323      	orrs	r3, r4
  tmpccer |= (uint32_t)(TIM_CCER_CC1E | TIM_CCER_CC2E);
 80008da:	ea41 010c 	orr.w	r1, r1, ip
 80008de:	6090      	str	r0, [r2, #8]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80008e0:	6193      	str	r3, [r2, #24]
}
 80008e2:	2000      	movs	r0, #0
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80008e4:	6211      	str	r1, [r2, #32]
}
 80008e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080008e8 <LL_TIM_HALLSENSOR_StructInit>:
  TIM_HallSensorInitStruct->IC1Polarity       = LL_TIM_IC_POLARITY_RISING;
 80008e8:	2300      	movs	r3, #0
  TIM_HallSensorInitStruct->IC1Prescaler      = LL_TIM_ICPSC_DIV1;
 80008ea:	e9c0 3300 	strd	r3, r3, [r0]
  TIM_HallSensorInitStruct->CommutationDelay  = 0U;
 80008ee:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
 80008f2:	4770      	bx	lr

080008f4 <LL_TIM_HALLSENSOR_Init>:
{
 80008f4:	4603      	mov	r3, r0
  TIMx->CCER &= (uint32_t)~(TIM_CCER_CC1E | TIM_CCER_CC2E);
 80008f6:	6a00      	ldr	r0, [r0, #32]
{
 80008f8:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= (uint32_t)~(TIM_CCER_CC1E | TIM_CCER_CC2E);
 80008fa:	f020 0011 	bic.w	r0, r0, #17
  tmpccmr1 |= (uint32_t)(TIM_HallSensorInitStruct->IC1Filter >> 16U);
 80008fe:	894a      	ldrh	r2, [r1, #10]
  TIMx->CCER &= (uint32_t)~(TIM_CCER_CC1E | TIM_CCER_CC2E);
 8000900:	6218      	str	r0, [r3, #32]
  tmpccmr1 |= (uint32_t)(TIM_HallSensorInitStruct->IC1Prescaler >> 16U);
 8000902:	88c8      	ldrh	r0, [r1, #6]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8000904:	685d      	ldr	r5, [r3, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8000906:	699f      	ldr	r7, [r3, #24]
  tmpccmr1 |= (uint32_t)(TIM_HallSensorInitStruct->IC1Prescaler >> 16U);
 8000908:	4302      	orrs	r2, r0
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800090a:	6a1e      	ldr	r6, [r3, #32]
  tmpccer |= (uint32_t)(TIM_CCER_CC1E | TIM_CCER_CC2E);
 800090c:	6808      	ldr	r0, [r1, #0]
  tmpsmcr = LL_TIM_ReadReg(TIMx, SMCR);
 800090e:	689c      	ldr	r4, [r3, #8]
  tmpccmr1 &= (uint32_t)~(TIM_CCMR1_CC1S | TIM_CCMR1_IC1F  | TIM_CCMR1_IC1PSC);
 8000910:	f027 07ff 	bic.w	r7, r7, #255	; 0xff
  tmpccmr1 |= (uint32_t)(TIM_HallSensorInitStruct->IC1Prescaler >> 16U);
 8000914:	f042 0203 	orr.w	r2, r2, #3
 8000918:	433a      	orrs	r2, r7
  tmpccer |= (uint32_t)(TIM_CCER_CC1E | TIM_CCER_CC2E);
 800091a:	f040 0011 	orr.w	r0, r0, #17
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_HallSensorInitStruct->CommutationDelay);
 800091e:	68cf      	ldr	r7, [r1, #12]
  tmpccer &= (uint32_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP | TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000920:	f026 06aa 	bic.w	r6, r6, #170	; 0xaa
  tmpsmcr &= (uint32_t)~(TIM_SMCR_TS | TIM_SMCR_SMS);
 8000924:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  tmpccmr1 &= (uint32_t)~(TIM_CCMR1_OC2M | TIM_CCMR1_OC2FE  | TIM_CCMR1_OC2PE  | TIM_CCMR1_OC2CE);
 8000928:	f422 427c 	bic.w	r2, r2, #64512	; 0xfc00
  tmpccer |= (uint32_t)(TIM_CCER_CC1E | TIM_CCER_CC2E);
 800092c:	4306      	orrs	r6, r0
  tmpcr2 |= LL_TIM_TRGO_OC2REF;
 800092e:	f045 05d0 	orr.w	r5, r5, #208	; 0xd0
  tmpsmcr |= LL_TIM_SLAVEMODE_RESET;
 8000932:	f044 0444 	orr.w	r4, r4, #68	; 0x44
  tmpccmr1 |= (uint32_t)(LL_TIM_OCMODE_PWM2 << 8U);
 8000936:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800093a:	605d      	str	r5, [r3, #4]
}
 800093c:	2000      	movs	r0, #0
  LL_TIM_WriteReg(TIMx, SMCR, tmpsmcr);
 800093e:	609c      	str	r4, [r3, #8]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8000940:	619a      	str	r2, [r3, #24]
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000942:	621e      	str	r6, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8000944:	639f      	str	r7, [r3, #56]	; 0x38
}
 8000946:	bcf0      	pop	{r4, r5, r6, r7}
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <LL_TIM_BDTR_StructInit>:
  TIM_BDTRInitStruct->OSSRState       = LL_TIM_OSSR_DISABLE;
 800094c:	2300      	movs	r3, #0
  TIM_BDTRInitStruct->OSSIState       = LL_TIM_OSSI_DISABLE;
 800094e:	e9c0 3300 	strd	r3, r3, [r0]
  TIM_BDTRInitStruct->LockLevel       = LL_TIM_LOCKLEVEL_OFF;
 8000952:	6083      	str	r3, [r0, #8]
  TIM_BDTRInitStruct->DeadTime        = (uint8_t)0x00;
 8000954:	7303      	strb	r3, [r0, #12]
  TIM_BDTRInitStruct->BreakState      = LL_TIM_BREAK_DISABLE;
 8000956:	81c3      	strh	r3, [r0, #14]
  TIM_BDTRInitStruct->AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8000958:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop

08000960 <LL_TIM_BDTR_Init>:
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8000960:	7b0b      	ldrb	r3, [r1, #12]
{
 8000962:	b410      	push	{r4}
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8000964:	e9d1 2401 	ldrd	r2, r4, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8000968:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 800096a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800096e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8000970:	680a      	ldr	r2, [r1, #0]
 8000972:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000976:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8000978:	89ca      	ldrh	r2, [r1, #14]
 800097a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800097e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8000980:	690a      	ldr	r2, [r1, #16]
 8000982:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000986:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8000988:	694a      	ldr	r2, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 800098a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800098e:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8000990:	6443      	str	r3, [r0, #68]	; 0x44
}
 8000992:	bc10      	pop	{r4}
 8000994:	2000      	movs	r0, #0
 8000996:	4770      	bx	lr

08000998 <LL_Init1msTick>:
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000998:	2100      	movs	r1, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800099a:	2205      	movs	r2, #5
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800099c:	b410      	push	{r4}
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800099e:	4c05      	ldr	r4, [pc, #20]	; (80009b4 <LL_Init1msTick+0x1c>)
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <LL_Init1msTick+0x20>)
 80009a2:	fba4 4000 	umull	r4, r0, r4, r0
 80009a6:	0980      	lsrs	r0, r0, #6
 80009a8:	3801      	subs	r0, #1
 80009aa:	6058      	str	r0, [r3, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 80009ac:	bc10      	pop	{r4}
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80009ae:	6099      	str	r1, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	4770      	bx	lr
 80009b4:	10624dd3 	.word	0x10624dd3
 80009b8:	e000e010 	.word	0xe000e010

080009bc <LL_mDelay>:
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80009bc:	4b07      	ldr	r3, [pc, #28]	; (80009dc <LL_mDelay+0x20>)
{
 80009be:	b082      	sub	sp, #8
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80009c0:	681b      	ldr	r3, [r3, #0]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80009c2:	1c42      	adds	r2, r0, #1
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80009c4:	9301      	str	r3, [sp, #4]
  ((void)tmp);
 80009c6:	9b01      	ldr	r3, [sp, #4]
    Delay++;
  }

  while (Delay)
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80009c8:	4a04      	ldr	r2, [pc, #16]	; (80009dc <LL_mDelay+0x20>)
    Delay++;
 80009ca:	bf18      	it	ne
 80009cc:	3001      	addne	r0, #1
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80009ce:	6813      	ldr	r3, [r2, #0]
 80009d0:	03db      	lsls	r3, r3, #15
 80009d2:	d5fc      	bpl.n	80009ce <LL_mDelay+0x12>
  while (Delay)
 80009d4:	3801      	subs	r0, #1
 80009d6:	d1fa      	bne.n	80009ce <LL_mDelay+0x12>
    {
      Delay--;
    }
  }
}
 80009d8:	b002      	add	sp, #8
 80009da:	4770      	bx	lr
 80009dc:	e000e010 	.word	0xe000e010

080009e0 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80009e0:	4b01      	ldr	r3, [pc, #4]	; (80009e8 <LL_SetSystemCoreClock+0x8>)
 80009e2:	6018      	str	r0, [r3, #0]
}
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	20000010 	.word	0x20000010

080009ec <LL_SetFlashLatency>:
  uint32_t getlatency;
  uint32_t latency = LL_FLASH_LATENCY_0; /* default value 0WS */
  ErrorStatus status = SUCCESS;

  /* Frequency cannot be equal to 0 */
  if (Frequency == 0U)
 80009ec:	b1d8      	cbz	r0, 8000a26 <LL_SetFlashLatency+0x3a>
  {
    status = ERROR;
  }
  else
  {
    if (Frequency > UTILS_LATENCY2_FREQ)
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <LL_SetFlashLatency+0x44>)
 80009f0:	4298      	cmp	r0, r3
 80009f2:	d912      	bls.n	8000a1a <LL_SetFlashLatency+0x2e>
    {
      /* 48 < SYSCLK <= 72 => 2WS (3 CPU cycles) */
      latency = LL_FLASH_LATENCY_2;
 80009f4:	2002      	movs	r0, #2
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80009f6:	4a0f      	ldr	r2, [pc, #60]	; (8000a34 <LL_SetFlashLatency+0x48>)
 80009f8:	6813      	ldr	r3, [r2, #0]
 80009fa:	f023 0307 	bic.w	r3, r3, #7
 80009fe:	4303      	orrs	r3, r0
 8000a00:	6013      	str	r3, [r2, #0]
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000a02:	6813      	ldr	r3, [r2, #0]
 8000a04:	f003 0307 	and.w	r3, r3, #7
      do
      {
      /* Wait for Flash latency to be updated */
      getlatency = LL_FLASH_GetLatency();
      timeout--;
      } while ((getlatency != latency) && (timeout > 0));
 8000a08:	4298      	cmp	r0, r3
 8000a0a:	d00e      	beq.n	8000a2a <LL_SetFlashLatency+0x3e>
 8000a0c:	6813      	ldr	r3, [r2, #0]
 8000a0e:	f003 0307 	and.w	r3, r3, #7
    status = ERROR;
 8000a12:	1a18      	subs	r0, r3, r0
 8000a14:	bf18      	it	ne
 8000a16:	2001      	movne	r0, #1
 8000a18:	4770      	bx	lr
      if (Frequency > UTILS_LATENCY1_FREQ)
 8000a1a:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <LL_SetFlashLatency+0x4c>)
 8000a1c:	4298      	cmp	r0, r3
 8000a1e:	bf94      	ite	ls
 8000a20:	2000      	movls	r0, #0
 8000a22:	2001      	movhi	r0, #1
 8000a24:	e7e7      	b.n	80009f6 <LL_SetFlashLatency+0xa>
    status = ERROR;
 8000a26:	2001      	movs	r0, #1
 8000a28:	4770      	bx	lr
      {
        status = ERROR;
      }
      else
      {
        status = SUCCESS;
 8000a2a:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	02dc6c00 	.word	0x02dc6c00
 8000a34:	40022000 	.word	0x40022000
 8000a38:	016e3600 	.word	0x016e3600

08000a3c <LL_PLL_ConfigSystemClock_HSI>:
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000a3c:	4b4d      	ldr	r3, [pc, #308]	; (8000b74 <LL_PLL_ConfigSystemClock_HSI+0x138>)
 8000a3e:	681a      	ldr	r2, [r3, #0]
static ErrorStatus UTILS_PLL_IsBusy(void)
{
  ErrorStatus status = SUCCESS;

  /* Check if PLL is busy*/
  if (LL_RCC_PLL_IsReady() != 0U)
 8000a40:	0192      	lsls	r2, r2, #6
 8000a42:	d458      	bmi.n	8000af6 <LL_PLL_ConfigSystemClock_HSI+0xba>
    UTILS_PLLInitStruct->Prediv = LL_RCC_PREDIV_DIV_2;
 8000a44:	f44f 3200 	mov.w	r2, #131072	; 0x20000
{
 8000a48:	b4f0      	push	{r4, r5, r6, r7}
  pllfreq = __LL_RCC_CALC_PLLCLK_FREQ(PLL_InputFrequency / ((UTILS_PLLInitStruct->Prediv >> RCC_CFGR_PLLXTPRE_Pos) + 1U), UTILS_PLLInitStruct->PLLMul);
 8000a4a:	6807      	ldr	r7, [r0, #0]
    UTILS_PLLInitStruct->Prediv = LL_RCC_PREDIV_DIV_2;
 8000a4c:	6042      	str	r2, [r0, #4]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000a4e:	6818      	ldr	r0, [r3, #0]
  pllfreq = __LL_RCC_CALC_PLLCLK_FREQ(PLL_InputFrequency / ((UTILS_PLLInitStruct->Prediv >> RCC_CFGR_PLLXTPRE_Pos) + 1U), UTILS_PLLInitStruct->PLLMul);
 8000a50:	0cba      	lsrs	r2, r7, #18
 8000a52:	4c49      	ldr	r4, [pc, #292]	; (8000b78 <LL_PLL_ConfigSystemClock_HSI+0x13c>)
 8000a54:	3202      	adds	r2, #2
    if (LL_RCC_HSI_IsReady() != 1U)
 8000a56:	0785      	lsls	r5, r0, #30
  pllfreq = __LL_RCC_CALC_PLLCLK_FREQ(PLL_InputFrequency / ((UTILS_PLLInitStruct->Prediv >> RCC_CFGR_PLLXTPRE_Pos) + 1U), UTILS_PLLInitStruct->PLLMul);
 8000a58:	fb04 f402 	mul.w	r4, r4, r2
    if (LL_RCC_HSI_IsReady() != 1U)
 8000a5c:	d407      	bmi.n	8000a6e <LL_PLL_ConfigSystemClock_HSI+0x32>
 8000a5e:	461a      	mov	r2, r3
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000a60:	6818      	ldr	r0, [r3, #0]
 8000a62:	f040 0001 	orr.w	r0, r0, #1
 8000a66:	6018      	str	r0, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000a68:	6813      	ldr	r3, [r2, #0]
      while (LL_RCC_HSI_IsReady() != 1U)
 8000a6a:	0798      	lsls	r0, r3, #30
 8000a6c:	d5fc      	bpl.n	8000a68 <LL_PLL_ConfigSystemClock_HSI+0x2c>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8000a6e:	4a41      	ldr	r2, [pc, #260]	; (8000b74 <LL_PLL_ConfigSystemClock_HSI+0x138>)
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

#if defined(FLASH_ACR_LATENCY)
  /* Calculate current SYSCLK frequency */
  sysclk_frequency_current = (SystemCoreClock << AHBPrescTable[LL_RCC_GetAHBPrescaler() >> RCC_CFGR_HPRE_Pos]);
 8000a70:	4e42      	ldr	r6, [pc, #264]	; (8000b7c <LL_PLL_ConfigSystemClock_HSI+0x140>)
 8000a72:	6853      	ldr	r3, [r2, #4]
 8000a74:	4d42      	ldr	r5, [pc, #264]	; (8000b80 <LL_PLL_ConfigSystemClock_HSI+0x144>)
 8000a76:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000a7a:	433b      	orrs	r3, r7
 8000a7c:	6053      	str	r3, [r2, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000a7e:	6853      	ldr	r3, [r2, #4]
 8000a80:	682f      	ldr	r7, [r5, #0]
 8000a82:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000a86:	5cf3      	ldrb	r3, [r6, r3]
 8000a88:	409f      	lsls	r7, r3
#endif /* FLASH_ACR_LATENCY */

  /* Increasing the number of wait states because of higher CPU frequency */
#if defined (FLASH_ACR_LATENCY)
  if (sysclk_frequency_current < SYSCLK_Frequency)
 8000a8a:	42bc      	cmp	r4, r7
 8000a8c:	d839      	bhi.n	8000b02 <LL_PLL_ConfigSystemClock_HSI+0xc6>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000a8e:	4b39      	ldr	r3, [pc, #228]	; (8000b74 <LL_PLL_ConfigSystemClock_HSI+0x138>)
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000a90:	461a      	mov	r2, r3
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000a92:	6818      	ldr	r0, [r3, #0]
 8000a94:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 8000a98:	6018      	str	r0, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000a9a:	6813      	ldr	r3, [r2, #0]
      }
    }
#endif /* RCC_PLL2_SUPPORT */
    /* Enable PLL */
    LL_RCC_PLL_Enable();
    while (LL_RCC_PLL_IsReady() != 1U)
 8000a9c:	019b      	lsls	r3, r3, #6
 8000a9e:	d5fc      	bpl.n	8000a9a <LL_PLL_ConfigSystemClock_HSI+0x5e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000aa0:	6853      	ldr	r3, [r2, #4]
    {
      /* Wait for PLL ready */
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
 8000aa2:	f8d1 c000 	ldr.w	ip, [r1]
 8000aa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000aaa:	ea43 030c 	orr.w	r3, r3, ip
 8000aae:	6053      	str	r3, [r2, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000ab0:	6853      	ldr	r3, [r2, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000ab2:	4830      	ldr	r0, [pc, #192]	; (8000b74 <LL_PLL_ConfigSystemClock_HSI+0x138>)
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000ab4:	f023 0303 	bic.w	r3, r3, #3
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	6053      	str	r3, [r2, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000abe:	6843      	ldr	r3, [r0, #4]
 8000ac0:	f003 030c 	and.w	r3, r3, #12
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000ac4:	2b08      	cmp	r3, #8
 8000ac6:	d1fa      	bne.n	8000abe <LL_PLL_ConfigSystemClock_HSI+0x82>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000ac8:	6843      	ldr	r3, [r0, #4]
 8000aca:	684a      	ldr	r2, [r1, #4]
 8000acc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	6043      	str	r3, [r0, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000ad4:	6843      	ldr	r3, [r0, #4]
 8000ad6:	688a      	ldr	r2, [r1, #8]
 8000ad8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000adc:	4313      	orrs	r3, r2
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
#if defined (FLASH_ACR_LATENCY)
  if (sysclk_frequency_current > SYSCLK_Frequency)
 8000ade:	42bc      	cmp	r4, r7
 8000ae0:	6043      	str	r3, [r0, #4]
 8000ae2:	d30a      	bcc.n	8000afa <LL_PLL_ConfigSystemClock_HSI+0xbe>
#endif /* FLASH_ACR_LATENCY */

  /* Update SystemCoreClock variable */
  if (status == SUCCESS)
  {
    LL_SetSystemCoreClock(__LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider));
 8000ae4:	f3cc 1c03 	ubfx	ip, ip, #4, #4
 8000ae8:	f816 300c 	ldrb.w	r3, [r6, ip]
  SystemCoreClock = HCLKFrequency;
 8000aec:	2000      	movs	r0, #0
    LL_SetSystemCoreClock(__LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider));
 8000aee:	40dc      	lsrs	r4, r3
  SystemCoreClock = HCLKFrequency;
 8000af0:	602c      	str	r4, [r5, #0]
}
 8000af2:	bcf0      	pop	{r4, r5, r6, r7}
 8000af4:	4770      	bx	lr
    status = ERROR;
 8000af6:	2001      	movs	r0, #1
}
 8000af8:	4770      	bx	lr
  if (Frequency == 0U)
 8000afa:	b9e4      	cbnz	r4, 8000b36 <LL_PLL_ConfigSystemClock_HSI+0xfa>
}
 8000afc:	bcf0      	pop	{r4, r5, r6, r7}
    status = ERROR;
 8000afe:	2001      	movs	r0, #1
}
 8000b00:	4770      	bx	lr
    if (Frequency > UTILS_LATENCY2_FREQ)
 8000b02:	4b20      	ldr	r3, [pc, #128]	; (8000b84 <LL_PLL_ConfigSystemClock_HSI+0x148>)
 8000b04:	429c      	cmp	r4, r3
 8000b06:	d831      	bhi.n	8000b6c <LL_PLL_ConfigSystemClock_HSI+0x130>
      if (Frequency > UTILS_LATENCY1_FREQ)
 8000b08:	481f      	ldr	r0, [pc, #124]	; (8000b88 <LL_PLL_ConfigSystemClock_HSI+0x14c>)
 8000b0a:	4284      	cmp	r4, r0
 8000b0c:	bf94      	ite	ls
 8000b0e:	2000      	movls	r0, #0
 8000b10:	2001      	movhi	r0, #1
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000b12:	4a1e      	ldr	r2, [pc, #120]	; (8000b8c <LL_PLL_ConfigSystemClock_HSI+0x150>)
 8000b14:	6813      	ldr	r3, [r2, #0]
 8000b16:	f023 0307 	bic.w	r3, r3, #7
 8000b1a:	4303      	orrs	r3, r0
 8000b1c:	6013      	str	r3, [r2, #0]
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000b1e:	6813      	ldr	r3, [r2, #0]
 8000b20:	f003 0307 	and.w	r3, r3, #7
      } while ((getlatency != latency) && (timeout > 0));
 8000b24:	4298      	cmp	r0, r3
 8000b26:	d0b2      	beq.n	8000a8e <LL_PLL_ConfigSystemClock_HSI+0x52>
 8000b28:	6813      	ldr	r3, [r2, #0]
 8000b2a:	f003 0307 	and.w	r3, r3, #7
      if(getlatency != latency)
 8000b2e:	4283      	cmp	r3, r0
 8000b30:	d0ad      	beq.n	8000a8e <LL_PLL_ConfigSystemClock_HSI+0x52>
  if (sysclk_frequency_current > SYSCLK_Frequency)
 8000b32:	42bc      	cmp	r4, r7
 8000b34:	d2e2      	bcs.n	8000afc <LL_PLL_ConfigSystemClock_HSI+0xc0>
    if (Frequency > UTILS_LATENCY2_FREQ)
 8000b36:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <LL_PLL_ConfigSystemClock_HSI+0x148>)
 8000b38:	429c      	cmp	r4, r3
 8000b3a:	d819      	bhi.n	8000b70 <LL_PLL_ConfigSystemClock_HSI+0x134>
      if (Frequency > UTILS_LATENCY1_FREQ)
 8000b3c:	4a12      	ldr	r2, [pc, #72]	; (8000b88 <LL_PLL_ConfigSystemClock_HSI+0x14c>)
 8000b3e:	4294      	cmp	r4, r2
 8000b40:	bf94      	ite	ls
 8000b42:	2200      	movls	r2, #0
 8000b44:	2201      	movhi	r2, #1
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000b46:	4811      	ldr	r0, [pc, #68]	; (8000b8c <LL_PLL_ConfigSystemClock_HSI+0x150>)
 8000b48:	6803      	ldr	r3, [r0, #0]
 8000b4a:	f023 0307 	bic.w	r3, r3, #7
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	6003      	str	r3, [r0, #0]
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000b52:	6803      	ldr	r3, [r0, #0]
 8000b54:	f003 0307 	and.w	r3, r3, #7
      } while ((getlatency != latency) && (timeout > 0));
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d004      	beq.n	8000b66 <LL_PLL_ConfigSystemClock_HSI+0x12a>
 8000b5c:	6803      	ldr	r3, [r0, #0]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
      if(getlatency != latency)
 8000b62:	429a      	cmp	r2, r3
 8000b64:	d1ca      	bne.n	8000afc <LL_PLL_ConfigSystemClock_HSI+0xc0>
 8000b66:	f8d1 c000 	ldr.w	ip, [r1]
 8000b6a:	e7bb      	b.n	8000ae4 <LL_PLL_ConfigSystemClock_HSI+0xa8>
      latency = LL_FLASH_LATENCY_2;
 8000b6c:	2002      	movs	r0, #2
 8000b6e:	e7d0      	b.n	8000b12 <LL_PLL_ConfigSystemClock_HSI+0xd6>
 8000b70:	2202      	movs	r2, #2
 8000b72:	e7e8      	b.n	8000b46 <LL_PLL_ConfigSystemClock_HSI+0x10a>
 8000b74:	40021000 	.word	0x40021000
 8000b78:	003d0900 	.word	0x003d0900
 8000b7c:	08001144 	.word	0x08001144
 8000b80:	20000010 	.word	0x20000010
 8000b84:	02dc6c00 	.word	0x02dc6c00
 8000b88:	016e3600 	.word	0x016e3600
 8000b8c:	40022000 	.word	0x40022000

08000b90 <LL_PLL_ConfigSystemClock_HSE>:
{
 8000b90:	b4f0      	push	{r4, r5, r6, r7}
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000b92:	4d54      	ldr	r5, [pc, #336]	; (8000ce4 <LL_PLL_ConfigSystemClock_HSE+0x154>)
 8000b94:	682c      	ldr	r4, [r5, #0]
  if (LL_RCC_PLL_IsReady() != 0U)
 8000b96:	01a4      	lsls	r4, r4, #6
 8000b98:	d467      	bmi.n	8000c6a <LL_PLL_ConfigSystemClock_HSE+0xda>
  pllfreq = __LL_RCC_CALC_PLLCLK_FREQ(PLL_InputFrequency / ((UTILS_PLLInitStruct->Prediv >> RCC_CFGR_PLLXTPRE_Pos) + 1U), UTILS_PLLInitStruct->PLLMul);
 8000b9a:	e9d2 7600 	ldrd	r7, r6, [r2]
 8000b9e:	0c74      	lsrs	r4, r6, #17
 8000ba0:	3401      	adds	r4, #1
 8000ba2:	fbb0 f0f4 	udiv	r0, r0, r4
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000ba6:	682a      	ldr	r2, [r5, #0]
 8000ba8:	0cbc      	lsrs	r4, r7, #18
 8000baa:	3402      	adds	r4, #2
 8000bac:	fb04 f400 	mul.w	r4, r4, r0
    if (LL_RCC_HSE_IsReady() != 1U)
 8000bb0:	0390      	lsls	r0, r2, #14
 8000bb2:	d410      	bmi.n	8000bd6 <LL_PLL_ConfigSystemClock_HSE+0x46>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000bb4:	682a      	ldr	r2, [r5, #0]
      if (HSEBypass == LL_UTILS_HSEBYPASS_ON)
 8000bb6:	2901      	cmp	r1, #1
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000bb8:	494a      	ldr	r1, [pc, #296]	; (8000ce4 <LL_PLL_ConfigSystemClock_HSE+0x154>)
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000bba:	bf0c      	ite	eq
 8000bbc:	f442 2280 	orreq.w	r2, r2, #262144	; 0x40000
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000bc0:	f422 2280 	bicne.w	r2, r2, #262144	; 0x40000
 8000bc4:	602a      	str	r2, [r5, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000bc6:	460a      	mov	r2, r1
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000bc8:	6808      	ldr	r0, [r1, #0]
 8000bca:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8000bce:	6008      	str	r0, [r1, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000bd0:	6811      	ldr	r1, [r2, #0]
      while (LL_RCC_HSE_IsReady() != 1U)
 8000bd2:	0389      	lsls	r1, r1, #14
 8000bd4:	d5fc      	bpl.n	8000bd0 <LL_PLL_ConfigSystemClock_HSE+0x40>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8000bd6:	4943      	ldr	r1, [pc, #268]	; (8000ce4 <LL_PLL_ConfigSystemClock_HSE+0x154>)
 8000bd8:	f406 3640 	and.w	r6, r6, #196608	; 0x30000
 8000bdc:	684a      	ldr	r2, [r1, #4]
  sysclk_frequency_current = (SystemCoreClock << AHBPrescTable[LL_RCC_GetAHBPrescaler() >> RCC_CFGR_HPRE_Pos]);
 8000bde:	4d42      	ldr	r5, [pc, #264]	; (8000ce8 <LL_PLL_ConfigSystemClock_HSE+0x158>)
 8000be0:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8000be4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000be8:	433a      	orrs	r2, r7
 8000bea:	4332      	orrs	r2, r6
 8000bec:	604a      	str	r2, [r1, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000bee:	684a      	ldr	r2, [r1, #4]
 8000bf0:	4e3e      	ldr	r6, [pc, #248]	; (8000cec <LL_PLL_ConfigSystemClock_HSE+0x15c>)
 8000bf2:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8000bf6:	5caa      	ldrb	r2, [r5, r2]
 8000bf8:	6837      	ldr	r7, [r6, #0]
 8000bfa:	4097      	lsls	r7, r2
  if (sysclk_frequency_current < SYSCLK_Frequency)
 8000bfc:	42bc      	cmp	r4, r7
 8000bfe:	d837      	bhi.n	8000c70 <LL_PLL_ConfigSystemClock_HSE+0xe0>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000c00:	4a38      	ldr	r2, [pc, #224]	; (8000ce4 <LL_PLL_ConfigSystemClock_HSE+0x154>)
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000c02:	4611      	mov	r1, r2
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000c04:	6810      	ldr	r0, [r2, #0]
 8000c06:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 8000c0a:	6010      	str	r0, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000c0c:	680a      	ldr	r2, [r1, #0]
    while (LL_RCC_PLL_IsReady() != 1U)
 8000c0e:	0192      	lsls	r2, r2, #6
 8000c10:	d5fc      	bpl.n	8000c0c <LL_PLL_ConfigSystemClock_HSE+0x7c>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000c12:	684a      	ldr	r2, [r1, #4]
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
 8000c14:	f8d3 c000 	ldr.w	ip, [r3]
 8000c18:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000c1c:	ea42 020c 	orr.w	r2, r2, ip
 8000c20:	604a      	str	r2, [r1, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000c22:	684a      	ldr	r2, [r1, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000c24:	482f      	ldr	r0, [pc, #188]	; (8000ce4 <LL_PLL_ConfigSystemClock_HSE+0x154>)
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000c26:	f022 0203 	bic.w	r2, r2, #3
 8000c2a:	f042 0202 	orr.w	r2, r2, #2
 8000c2e:	604a      	str	r2, [r1, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000c30:	6842      	ldr	r2, [r0, #4]
 8000c32:	f002 020c 	and.w	r2, r2, #12
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000c36:	2a08      	cmp	r2, #8
 8000c38:	d1fa      	bne.n	8000c30 <LL_PLL_ConfigSystemClock_HSE+0xa0>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000c3a:	6842      	ldr	r2, [r0, #4]
 8000c3c:	6859      	ldr	r1, [r3, #4]
 8000c3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000c42:	430a      	orrs	r2, r1
 8000c44:	6042      	str	r2, [r0, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000c46:	6842      	ldr	r2, [r0, #4]
 8000c48:	6899      	ldr	r1, [r3, #8]
 8000c4a:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 8000c4e:	430a      	orrs	r2, r1
  if (sysclk_frequency_current > SYSCLK_Frequency)
 8000c50:	42bc      	cmp	r4, r7
 8000c52:	6042      	str	r2, [r0, #4]
 8000c54:	d308      	bcc.n	8000c68 <LL_PLL_ConfigSystemClock_HSE+0xd8>
    LL_SetSystemCoreClock(__LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider));
 8000c56:	f3cc 1c03 	ubfx	ip, ip, #4, #4
 8000c5a:	f815 300c 	ldrb.w	r3, [r5, ip]
  SystemCoreClock = HCLKFrequency;
 8000c5e:	2000      	movs	r0, #0
    LL_SetSystemCoreClock(__LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider));
 8000c60:	40dc      	lsrs	r4, r3
  SystemCoreClock = HCLKFrequency;
 8000c62:	6034      	str	r4, [r6, #0]
}
 8000c64:	bcf0      	pop	{r4, r5, r6, r7}
 8000c66:	4770      	bx	lr
  if (Frequency == 0U)
 8000c68:	b9e4      	cbnz	r4, 8000ca4 <LL_PLL_ConfigSystemClock_HSE+0x114>
}
 8000c6a:	bcf0      	pop	{r4, r5, r6, r7}
    status = ERROR;
 8000c6c:	2001      	movs	r0, #1
}
 8000c6e:	4770      	bx	lr
    if (Frequency > UTILS_LATENCY2_FREQ)
 8000c70:	4a1f      	ldr	r2, [pc, #124]	; (8000cf0 <LL_PLL_ConfigSystemClock_HSE+0x160>)
 8000c72:	4294      	cmp	r4, r2
 8000c74:	d831      	bhi.n	8000cda <LL_PLL_ConfigSystemClock_HSE+0x14a>
      if (Frequency > UTILS_LATENCY1_FREQ)
 8000c76:	481f      	ldr	r0, [pc, #124]	; (8000cf4 <LL_PLL_ConfigSystemClock_HSE+0x164>)
 8000c78:	4284      	cmp	r4, r0
 8000c7a:	bf94      	ite	ls
 8000c7c:	2000      	movls	r0, #0
 8000c7e:	2001      	movhi	r0, #1
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000c80:	491d      	ldr	r1, [pc, #116]	; (8000cf8 <LL_PLL_ConfigSystemClock_HSE+0x168>)
 8000c82:	680a      	ldr	r2, [r1, #0]
 8000c84:	f022 0207 	bic.w	r2, r2, #7
 8000c88:	4302      	orrs	r2, r0
 8000c8a:	600a      	str	r2, [r1, #0]
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000c8c:	680a      	ldr	r2, [r1, #0]
 8000c8e:	f002 0207 	and.w	r2, r2, #7
      } while ((getlatency != latency) && (timeout > 0));
 8000c92:	4290      	cmp	r0, r2
 8000c94:	d0b4      	beq.n	8000c00 <LL_PLL_ConfigSystemClock_HSE+0x70>
 8000c96:	680a      	ldr	r2, [r1, #0]
 8000c98:	f002 0207 	and.w	r2, r2, #7
      if(getlatency != latency)
 8000c9c:	4282      	cmp	r2, r0
 8000c9e:	d0af      	beq.n	8000c00 <LL_PLL_ConfigSystemClock_HSE+0x70>
  if (sysclk_frequency_current > SYSCLK_Frequency)
 8000ca0:	42bc      	cmp	r4, r7
 8000ca2:	d2e2      	bcs.n	8000c6a <LL_PLL_ConfigSystemClock_HSE+0xda>
    if (Frequency > UTILS_LATENCY2_FREQ)
 8000ca4:	4a12      	ldr	r2, [pc, #72]	; (8000cf0 <LL_PLL_ConfigSystemClock_HSE+0x160>)
 8000ca6:	4294      	cmp	r4, r2
 8000ca8:	d819      	bhi.n	8000cde <LL_PLL_ConfigSystemClock_HSE+0x14e>
      if (Frequency > UTILS_LATENCY1_FREQ)
 8000caa:	4912      	ldr	r1, [pc, #72]	; (8000cf4 <LL_PLL_ConfigSystemClock_HSE+0x164>)
 8000cac:	428c      	cmp	r4, r1
 8000cae:	bf94      	ite	ls
 8000cb0:	2100      	movls	r1, #0
 8000cb2:	2101      	movhi	r1, #1
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000cb4:	4810      	ldr	r0, [pc, #64]	; (8000cf8 <LL_PLL_ConfigSystemClock_HSE+0x168>)
 8000cb6:	6802      	ldr	r2, [r0, #0]
 8000cb8:	f022 0207 	bic.w	r2, r2, #7
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	6002      	str	r2, [r0, #0]
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000cc0:	6802      	ldr	r2, [r0, #0]
 8000cc2:	f002 0207 	and.w	r2, r2, #7
      } while ((getlatency != latency) && (timeout > 0));
 8000cc6:	4291      	cmp	r1, r2
 8000cc8:	d004      	beq.n	8000cd4 <LL_PLL_ConfigSystemClock_HSE+0x144>
 8000cca:	6802      	ldr	r2, [r0, #0]
 8000ccc:	f002 0207 	and.w	r2, r2, #7
      if(getlatency != latency)
 8000cd0:	4291      	cmp	r1, r2
 8000cd2:	d1ca      	bne.n	8000c6a <LL_PLL_ConfigSystemClock_HSE+0xda>
 8000cd4:	f8d3 c000 	ldr.w	ip, [r3]
 8000cd8:	e7bd      	b.n	8000c56 <LL_PLL_ConfigSystemClock_HSE+0xc6>
      latency = LL_FLASH_LATENCY_2;
 8000cda:	2002      	movs	r0, #2
 8000cdc:	e7d0      	b.n	8000c80 <LL_PLL_ConfigSystemClock_HSE+0xf0>
 8000cde:	2102      	movs	r1, #2
 8000ce0:	e7e8      	b.n	8000cb4 <LL_PLL_ConfigSystemClock_HSE+0x124>
 8000ce2:	bf00      	nop
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	08001144 	.word	0x08001144
 8000cec:	20000010 	.word	0x20000010
 8000cf0:	02dc6c00 	.word	0x02dc6c00
 8000cf4:	016e3600 	.word	0x016e3600
 8000cf8:	40022000 	.word	0x40022000

08000cfc <main>:
{
 8000cfc:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
	new_time = 1;
 8000d00:	f04f 0b01 	mov.w	fp, #1
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d04:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d08:	4db5      	ldr	r5, [pc, #724]	; (8000fe0 <main+0x2e4>)
	countSend = 0x00U;
 8000d0a:	2600      	movs	r6, #0
 8000d0c:	69ab      	ldr	r3, [r5, #24]
{
 8000d0e:	b08f      	sub	sp, #60	; 0x3c
 8000d10:	ea43 030b 	orr.w	r3, r3, fp
 8000d14:	61ab      	str	r3, [r5, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d16:	69ab      	ldr	r3, [r5, #24]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d18:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 800100c <main+0x310>
 8000d1c:	ea03 030b 	and.w	r3, r3, fp
 8000d20:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8000d22:	9b03      	ldr	r3, [sp, #12]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000d24:	69eb      	ldr	r3, [r5, #28]
  reg_value  =  (reg_value                                   |
 8000d26:	4aaf      	ldr	r2, [pc, #700]	; (8000fe4 <main+0x2e8>)
 8000d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d2c:	61eb      	str	r3, [r5, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000d2e:	69eb      	ldr	r3, [r5, #28]
	countSend = 0x00U;
 8000d30:	4cad      	ldr	r4, [pc, #692]	; (8000fe8 <main+0x2ec>)
 8000d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d36:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8000d38:	9b02      	ldr	r3, [sp, #8]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d3a:	f8da 100c 	ldr.w	r1, [sl, #12]
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 8000d3e:	4bab      	ldr	r3, [pc, #684]	; (8000fec <main+0x2f0>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d40:	4001      	ands	r1, r0
  reg_value  =  (reg_value                                   |
 8000d42:	430a      	orrs	r2, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8000d44:	f8ca 200c 	str.w	r2, [sl, #12]
 8000d48:	685a      	ldr	r2, [r3, #4]
	new_time = 1;
 8000d4a:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800101c <main+0x320>
 8000d4e:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8000d52:	605a      	str	r2, [r3, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8000d54:	685a      	ldr	r2, [r3, #4]
	new_state = 0x00U;
 8000d56:	4fa6      	ldr	r7, [pc, #664]	; (8000ff0 <main+0x2f4>)
 8000d58:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000d5c:	605a      	str	r2, [r3, #4]
  SystemClock_Config();
 8000d5e:	f7ff f9f5 	bl	800014c <SystemClock_Config>
	new_repeat = 0x00U;
 8000d62:	4ba4      	ldr	r3, [pc, #656]	; (8000ff4 <main+0x2f8>)
	countSend = 0x00U;
 8000d64:	8026      	strh	r6, [r4, #0]
	new_time = 1;
 8000d66:	f8a9 b000 	strh.w	fp, [r9]
	new_state = 0x00U;
 8000d6a:	803e      	strh	r6, [r7, #0]
	new_repeat = 0x00U;
 8000d6c:	801e      	strh	r6, [r3, #0]
	new_prescale = 71U;
 8000d6e:	f04f 0347 	mov.w	r3, #71	; 0x47
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000d72:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000d76:	f44f 7180 	mov.w	r1, #256	; 0x100
  LL_GPIO_SetOutputPin(Out_GPIO_Port, Out_Pin);

  /**/
  GPIO_InitStruct.Pin = Led_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d7a:	f04f 0e02 	mov.w	lr, #2
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7e:	e9cd 660c 	strd	r6, r6, [sp, #48]	; 0x30
	new_prescale = 71U;
 8000d82:	f8df 829c 	ldr.w	r8, [pc, #668]	; 8001020 <main+0x324>
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000d86:	489c      	ldr	r0, [pc, #624]	; (8000ff8 <main+0x2fc>)
 8000d88:	f8a8 3000 	strh.w	r3, [r8]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d8c:	69ab      	ldr	r3, [r5, #24]
 8000d8e:	f043 0310 	orr.w	r3, r3, #16
 8000d92:	61ab      	str	r3, [r5, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d94:	69ab      	ldr	r3, [r5, #24]
 8000d96:	f003 0310 	and.w	r3, r3, #16
 8000d9a:	9306      	str	r3, [sp, #24]
  (void)tmpreg;
 8000d9c:	9b06      	ldr	r3, [sp, #24]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d9e:	69ab      	ldr	r3, [r5, #24]
 8000da0:	f043 0320 	orr.w	r3, r3, #32
 8000da4:	61ab      	str	r3, [r5, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000da6:	69ab      	ldr	r3, [r5, #24]
 8000da8:	f003 0320 	and.w	r3, r3, #32
 8000dac:	9307      	str	r3, [sp, #28]
  (void)tmpreg;
 8000dae:	9b07      	ldr	r3, [sp, #28]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000db0:	69ab      	ldr	r3, [r5, #24]
 8000db2:	f043 0304 	orr.w	r3, r3, #4
 8000db6:	61ab      	str	r3, [r5, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000db8:	69aa      	ldr	r2, [r5, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000dba:	4b90      	ldr	r3, [pc, #576]	; (8000ffc <main+0x300>)
 8000dbc:	f002 0204 	and.w	r2, r2, #4
 8000dc0:	9208      	str	r2, [sp, #32]
  (void)tmpreg;
 8000dc2:	9a08      	ldr	r2, [sp, #32]
  GPIO_InitStruct.Pin = Led_Pin;
 8000dc4:	4a8e      	ldr	r2, [pc, #568]	; (8001000 <main+0x304>)
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000dc6:	f8c0 c014 	str.w	ip, [r0, #20]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000dca:	6119      	str	r1, [r3, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  LL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 8000dcc:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000dce:	e9cd be0a 	strd	fp, lr, [sp, #40]	; 0x28
 8000dd2:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Pin = Led_Pin;
 8000dd4:	9209      	str	r2, [sp, #36]	; 0x24
  LL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 8000dd6:	f7ff facf 	bl	8000378 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Out_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000dda:	f04f 0c03 	mov.w	ip, #3
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  LL_GPIO_Init(Out_GPIO_Port, &GPIO_InitStruct);
 8000dde:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = Out_Pin;
 8000de0:	4a88      	ldr	r2, [pc, #544]	; (8001004 <main+0x308>)
  LL_GPIO_Init(Out_GPIO_Port, &GPIO_InitStruct);
 8000de2:	4618      	mov	r0, r3
 8000de4:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000de6:	e9cd c60b 	strd	ip, r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000dea:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = Out_Pin;
 8000dee:	9209      	str	r2, [sp, #36]	; 0x24
  LL_GPIO_Init(Out_GPIO_Port, &GPIO_InitStruct);
 8000df0:	f7ff fac2 	bl	8000378 <LL_GPIO_Init>
  TIM_InitStruct.Prescaler = 71;
 8000df4:	f04f 0147 	mov.w	r1, #71	; 0x47
  TIM_InitStruct.Autoreload = 10;
 8000df8:	220a      	movs	r2, #10
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000dfa:	f8cd 602a 	str.w	r6, [sp, #42]	; 0x2a
 8000dfe:	f8cd 602e 	str.w	r6, [sp, #46]	; 0x2e
 8000e02:	f8cd 6026 	str.w	r6, [sp, #38]	; 0x26
 8000e06:	f8cd 6032 	str.w	r6, [sp, #50]	; 0x32
 8000e0a:	f8ad 6036 	strh.w	r6, [sp, #54]	; 0x36
  SET_BIT(RCC->APB2ENR, Periphs);
 8000e0e:	69ab      	ldr	r3, [r5, #24]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8000e10:	f8df b210 	ldr.w	fp, [pc, #528]	; 8001024 <main+0x328>
 8000e14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e18:	61ab      	str	r3, [r5, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e1a:	69ab      	ldr	r3, [r5, #24]
 8000e1c:	4658      	mov	r0, fp
 8000e1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  TIM_InitStruct.Prescaler = 71;
 8000e22:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 8000e26:	9305      	str	r3, [sp, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8000e28:	a909      	add	r1, sp, #36	; 0x24
  (void)tmpreg;
 8000e2a:	9b05      	ldr	r3, [sp, #20]
  TIM_InitStruct.Autoreload = 10;
 8000e2c:	920b      	str	r2, [sp, #44]	; 0x2c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8000e2e:	f7ff fb7f 	bl	8000530 <LL_TIM_Init>
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000e32:	f8db 3000 	ldr.w	r3, [fp]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e36:	f04f 5c80 	mov.w	ip, #268435456	; 0x10000000
 8000e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e3e:	f8cb 3000 	str.w	r3, [fp]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000e42:	f8db 3008 	ldr.w	r3, [fp, #8]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000e46:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e4e:	f023 0307 	bic.w	r3, r3, #7
 8000e52:	f8cb 3008 	str.w	r3, [fp, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000e56:	f8db 3004 	ldr.w	r3, [fp, #4]
 8000e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e5e:	f8cb 3004 	str.w	r3, [fp, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000e62:	f8db 3008 	ldr.w	r3, [fp, #8]
 8000e66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000e6a:	f8cb 3008 	str.w	r3, [fp, #8]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000e6e:	f8db 300c 	ldr.w	r3, [fp, #12]
 8000e72:	f043 0301 	orr.w	r3, r3, #1
 8000e76:	f8cb 300c 	str.w	r3, [fp, #12]
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000e7a:	f8cd 602a 	str.w	r6, [sp, #42]	; 0x2a
 8000e7e:	f8cd 602e 	str.w	r6, [sp, #46]	; 0x2e
 8000e82:	f8cd 6026 	str.w	r6, [sp, #38]	; 0x26
 8000e86:	f8cd 6032 	str.w	r6, [sp, #50]	; 0x32
 8000e8a:	f8ad 6036 	strh.w	r6, [sp, #54]	; 0x36
  SET_BIT(RCC->APB1ENR, Periphs);
 8000e8e:	69eb      	ldr	r3, [r5, #28]
	else if(/*array[countSend][0]*/temp > 0x02U && /*array[countSend][0]*/temp < 0xFFFFU){
 8000e90:	f64f 7bfb 	movw	fp, #65531	; 0xfffb
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	61eb      	str	r3, [r5, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000e9a:	69eb      	ldr	r3, [r5, #28]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9c:	4d5a      	ldr	r5, [pc, #360]	; (8001008 <main+0x30c>)
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 8000ea4:	9b04      	ldr	r3, [sp, #16]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea6:	f8da 300c 	ldr.w	r3, [sl, #12]
  TIM_InitStruct.Prescaler = 71;
 8000eaa:	f04f 0a47 	mov.w	sl, #71	; 0x47
 8000eae:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb2:	f1c3 0207 	rsb	r2, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb6:	1d19      	adds	r1, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb8:	2a04      	cmp	r2, #4
 8000eba:	bf28      	it	cs
 8000ebc:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ebe:	2906      	cmp	r1, #6
 8000ec0:	bf88      	it	hi
 8000ec2:	1ede      	subhi	r6, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec8:	4093      	lsls	r3, r2
 8000eca:	43db      	mvns	r3, r3
  TIM_InitStruct.Autoreload = 10000;
 8000ecc:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ed0:	f003 0301 	and.w	r3, r3, #1
 8000ed4:	40b3      	lsls	r3, r6
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed6:	011b      	lsls	r3, r3, #4
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	f885 331c 	strb.w	r3, [r5, #796]	; 0x31c
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000ede:	a909      	add	r1, sp, #36	; 0x24
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ee0:	f8c5 c000 	str.w	ip, [r5]
  TIM_InitStruct.Autoreload = 10000;
 8000ee4:	920b      	str	r2, [sp, #44]	; 0x2c
  TIM_InitStruct.Prescaler = 71;
 8000ee6:	f8ad a024 	strh.w	sl, [sp, #36]	; 0x24
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000eea:	f7ff fb21 	bl	8000530 <LL_TIM_Init>
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000eee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef2:	2100      	movs	r1, #0
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ef4:	f04f 7c00 	mov.w	ip, #33554432	; 0x2000000
 8000ef8:	681a      	ldr	r2, [r3, #0]
			new_prescale = 71U;
 8000efa:	f8cd a000 	str.w	sl, [sp]
 8000efe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f02:	601a      	str	r2, [r3, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000f04:	689a      	ldr	r2, [r3, #8]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f06:	4841      	ldr	r0, [pc, #260]	; (800100c <main+0x310>)
 8000f08:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000f0c:	f022 0207 	bic.w	r2, r2, #7
 8000f10:	609a      	str	r2, [r3, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000f12:	685a      	ldr	r2, [r3, #4]
		  processed = false;
 8000f14:	460e      	mov	r6, r1
 8000f16:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000f1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000f1c:	689a      	ldr	r2, [r3, #8]
 8000f1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	68c2      	ldr	r2, [r0, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000f26:	f503 3396 	add.w	r3, r3, #76800	; 0x12c00
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2a:	f885 1319 	strb.w	r1, [r5, #793]	; 0x319
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2e:	f8c5 c000 	str.w	ip, [r5]
 8000f32:	4937      	ldr	r1, [pc, #220]	; (8001010 <main+0x314>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	f891 e000 	ldrb.w	lr, [r1]
 8000f3a:	f042 0201 	orr.w	r2, r2, #1
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	4934      	ldr	r1, [pc, #208]	; (8001014 <main+0x318>)
 8000f42:	4d35      	ldr	r5, [pc, #212]	; (8001018 <main+0x31c>)
	  GPIOC->ODR^=(1U<<13);
 8000f44:	4a2c      	ldr	r2, [pc, #176]	; (8000ff8 <main+0x2fc>)
 8000f46:	f8cd e004 	str.w	lr, [sp, #4]
 8000f4a:	e003      	b.n	8000f54 <main+0x258>
 8000f4c:	68d3      	ldr	r3, [r2, #12]
 8000f4e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000f52:	60d3      	str	r3, [r2, #12]
	  if(processed){
 8000f54:	780b      	ldrb	r3, [r1, #0]
 8000f56:	f003 0eff 	and.w	lr, r3, #255	; 0xff
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d0f6      	beq.n	8000f4c <main+0x250>
	uint32_t temp = array[countSend][0];
 8000f5e:	8823      	ldrh	r3, [r4, #0]
	uint16_t state = (uint32_t) array[countSend][1];
 8000f60:	f8b4 c000 	ldrh.w	ip, [r4]
	uint32_t temp = array[countSend][0];
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	f855 3033 	ldr.w	r3, [r5, r3, lsl #3]
	uint16_t state = (uint32_t) array[countSend][1];
 8000f6a:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
	if(/*array[countSend][0]*/temp <= 2U){
 8000f6e:	2b02      	cmp	r3, #2
	uint16_t state = (uint32_t) array[countSend][1];
 8000f70:	f8bc c004 	ldrh.w	ip, [ip, #4]
	if(/*array[countSend][0]*/temp <= 2U){
 8000f74:	d80a      	bhi.n	8000f8c <main+0x290>
		if(/*array[countSend][0]*/temp == 0x00U){
 8000f76:	b9f3      	cbnz	r3, 8000fb6 <main+0x2ba>
	if(countSend < LENGHT - 1){
 8000f78:	f8b4 c000 	ldrh.w	ip, [r4]
 8000f7c:	fa1f fc8c 	uxth.w	ip, ip
 8000f80:	f1bc 0f00 	cmp.w	ip, #0
 8000f84:	d025      	beq.n	8000fd2 <main+0x2d6>
		++countSend;
 8000f86:	8023      	strh	r3, [r4, #0]
		  processed = false;
 8000f88:	700e      	strb	r6, [r1, #0]
 8000f8a:	e7df      	b.n	8000f4c <main+0x250>
	else if(/*array[countSend][0]*/temp > 0x02U && /*array[countSend][0]*/temp < 0xFFFFU){
 8000f8c:	f1a3 0a03 	sub.w	sl, r3, #3
 8000f90:	45da      	cmp	sl, fp
 8000f92:	d849      	bhi.n	8001028 <main+0x32c>
		new_time = /*array[countSend][0]*/temp - 1U;
 8000f94:	3b01      	subs	r3, #1
 8000f96:	b29b      	uxth	r3, r3
		new_state = state;//array[countSend][1];
 8000f98:	f8a7 c000 	strh.w	ip, [r7]
		new_time = /*array[countSend][0]*/temp - 1U;
 8000f9c:	f8a9 3000 	strh.w	r3, [r9]
		new_repeat = 0x00U;
 8000fa0:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <main+0x2f8>)
 8000fa2:	801e      	strh	r6, [r3, #0]
		new_prescale = 71U;
 8000fa4:	9b00      	ldr	r3, [sp, #0]
 8000fa6:	f8a8 3000 	strh.w	r3, [r8]
	if(countSend < LENGHT - 1){
 8000faa:	8823      	ldrh	r3, [r4, #0]
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	b183      	cbz	r3, 8000fd2 <main+0x2d6>
		countSend = 0x00U;
 8000fb0:	8026      	strh	r6, [r4, #0]
		  processed = false;
 8000fb2:	700e      	strb	r6, [r1, #0]
 8000fb4:	e7ca      	b.n	8000f4c <main+0x250>
		new_time = /*array[countSend][0]*/temp - 1U;
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	f8a9 3000 	strh.w	r3, [r9]
		new_prescale = 35U;
 8000fbe:	f04f 0323 	mov.w	r3, #35	; 0x23
		new_state = state;//array[countSend][1];
 8000fc2:	f8a7 c000 	strh.w	ip, [r7]
		new_prescale = 35U;
 8000fc6:	f8a8 3000 	strh.w	r3, [r8]
	if(countSend < LENGHT - 1){
 8000fca:	8823      	ldrh	r3, [r4, #0]
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d1ee      	bne.n	8000fb0 <main+0x2b4>
		++countSend;
 8000fd2:	8823      	ldrh	r3, [r4, #0]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	8023      	strh	r3, [r4, #0]
		  processed = false;
 8000fda:	700e      	strb	r6, [r1, #0]
 8000fdc:	e7b6      	b.n	8000f4c <main+0x250>
 8000fde:	bf00      	nop
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	05fa0300 	.word	0x05fa0300
 8000fe8:	20000032 	.word	0x20000032
 8000fec:	40010000 	.word	0x40010000
 8000ff0:	20000038 	.word	0x20000038
 8000ff4:	2000003c 	.word	0x2000003c
 8000ff8:	40011000 	.word	0x40011000
 8000ffc:	40010800 	.word	0x40010800
 8001000:	04200020 	.word	0x04200020
 8001004:	04010001 	.word	0x04010001
 8001008:	e000e100 	.word	0xe000e100
 800100c:	e000ed00 	.word	0xe000ed00
 8001010:	20000030 	.word	0x20000030
 8001014:	20000034 	.word	0x20000034
 8001018:	20000000 	.word	0x20000000
 800101c:	20000036 	.word	0x20000036
 8001020:	2000003a 	.word	0x2000003a
 8001024:	40012c00 	.word	0x40012c00
		if(!repeat){
 8001028:	9801      	ldr	r0, [sp, #4]
 800102a:	b1b8      	cbz	r0, 800105c <main+0x360>
			new_time = (/*array[countSend][0]*/temp%0xFFFFU) - 1U;
 800102c:	4818      	ldr	r0, [pc, #96]	; (8001090 <main+0x394>)
 800102e:	fba0 e003 	umull	lr, r0, r0, r3
 8001032:	0bc0      	lsrs	r0, r0, #15
 8001034:	ebc0 4000 	rsb	r0, r0, r0, lsl #16
 8001038:	1a1b      	subs	r3, r3, r0
 800103a:	3b01      	subs	r3, #1
 800103c:	b29b      	uxth	r3, r3
 800103e:	f8a9 3000 	strh.w	r3, [r9]
			new_repeat = 0x00U;
 8001042:	4b14      	ldr	r3, [pc, #80]	; (8001094 <main+0x398>)
 8001044:	801e      	strh	r6, [r3, #0]
			new_prescale = 71U;
 8001046:	9b00      	ldr	r3, [sp, #0]
 8001048:	f8a8 3000 	strh.w	r3, [r8]
			new_state = state;//array[countSend][1];
 800104c:	f8a7 c000 	strh.w	ip, [r7]
	if(countSend < LENGHT - 1){
 8001050:	8820      	ldrh	r0, [r4, #0]
 8001052:	b280      	uxth	r0, r0
 8001054:	b1b8      	cbz	r0, 8001086 <main+0x38a>
			repeat = false;
 8001056:	2300      	movs	r3, #0
 8001058:	9301      	str	r3, [sp, #4]
 800105a:	e7a9      	b.n	8000fb0 <main+0x2b4>
			new_repeat = (/*array[countSend][0]*/temp/0xFFFFU) - 1U;
 800105c:	480c      	ldr	r0, [pc, #48]	; (8001090 <main+0x394>)
			repeat = true;
 800105e:	f8cd e004 	str.w	lr, [sp, #4]
			new_repeat = (/*array[countSend][0]*/temp/0xFFFFU) - 1U;
 8001062:	fba0 0303 	umull	r0, r3, r0, r3
			new_time = (0xFFFFU) - 1;
 8001066:	f64f 70fe 	movw	r0, #65534	; 0xfffe
			new_repeat = (/*array[countSend][0]*/temp/0xFFFFU) - 1U;
 800106a:	0bdb      	lsrs	r3, r3, #15
			new_time = (0xFFFFU) - 1;
 800106c:	f8a9 0000 	strh.w	r0, [r9]
			new_repeat = (/*array[countSend][0]*/temp/0xFFFFU) - 1U;
 8001070:	3b01      	subs	r3, #1
 8001072:	4808      	ldr	r0, [pc, #32]	; (8001094 <main+0x398>)
 8001074:	b29b      	uxth	r3, r3
 8001076:	8003      	strh	r3, [r0, #0]
			new_prescale = 71U;
 8001078:	9b00      	ldr	r3, [sp, #0]
 800107a:	f8a8 3000 	strh.w	r3, [r8]
			new_state = state;//array[countSend][1];
 800107e:	f8a7 c000 	strh.w	ip, [r7]
		  processed = false;
 8001082:	700e      	strb	r6, [r1, #0]
 8001084:	e762      	b.n	8000f4c <main+0x250>
		++countSend;
 8001086:	8823      	ldrh	r3, [r4, #0]
			repeat = false;
 8001088:	9001      	str	r0, [sp, #4]
		++countSend;
 800108a:	3301      	adds	r3, #1
 800108c:	b29b      	uxth	r3, r3
 800108e:	e77a      	b.n	8000f86 <main+0x28a>
 8001090:	80008001 	.word	0x80008001
 8001094:	2000003c 	.word	0x2000003c

08001098 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001098:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800109a:	e003      	b.n	80010a4 <LoopCopyDataInit>

0800109c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800109e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80010a0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80010a2:	3104      	adds	r1, #4

080010a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80010a4:	480a      	ldr	r0, [pc, #40]	; (80010d0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80010a8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80010aa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80010ac:	d3f6      	bcc.n	800109c <CopyDataInit>
  ldr r2, =_sbss
 80010ae:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80010b0:	e002      	b.n	80010b8 <LoopFillZerobss>

080010b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80010b2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80010b4:	f842 3b04 	str.w	r3, [r2], #4

080010b8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80010ba:	429a      	cmp	r2, r3
  bcc FillZerobss
 80010bc:	d3f9      	bcc.n	80010b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010be:	f7ff f8d3 	bl	8000268 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010c2:	f000 f80f 	bl	80010e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010c6:	f7ff fe19 	bl	8000cfc <main>
  bx lr
 80010ca:	4770      	bx	lr
  ldr r3, =_sidata
 80010cc:	0800115c 	.word	0x0800115c
  ldr r0, =_sdata
 80010d0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80010d4:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 80010d8:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 80010dc:	20000040 	.word	0x20000040

080010e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010e0:	e7fe      	b.n	80010e0 <ADC1_2_IRQHandler>
	...

080010e4 <__libc_init_array>:
 80010e4:	b570      	push	{r4, r5, r6, lr}
 80010e6:	2500      	movs	r5, #0
 80010e8:	4e0c      	ldr	r6, [pc, #48]	; (800111c <__libc_init_array+0x38>)
 80010ea:	4c0d      	ldr	r4, [pc, #52]	; (8001120 <__libc_init_array+0x3c>)
 80010ec:	1ba4      	subs	r4, r4, r6
 80010ee:	10a4      	asrs	r4, r4, #2
 80010f0:	42a5      	cmp	r5, r4
 80010f2:	d109      	bne.n	8001108 <__libc_init_array+0x24>
 80010f4:	f000 f81a 	bl	800112c <_init>
 80010f8:	2500      	movs	r5, #0
 80010fa:	4e0a      	ldr	r6, [pc, #40]	; (8001124 <__libc_init_array+0x40>)
 80010fc:	4c0a      	ldr	r4, [pc, #40]	; (8001128 <__libc_init_array+0x44>)
 80010fe:	1ba4      	subs	r4, r4, r6
 8001100:	10a4      	asrs	r4, r4, #2
 8001102:	42a5      	cmp	r5, r4
 8001104:	d105      	bne.n	8001112 <__libc_init_array+0x2e>
 8001106:	bd70      	pop	{r4, r5, r6, pc}
 8001108:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800110c:	4798      	blx	r3
 800110e:	3501      	adds	r5, #1
 8001110:	e7ee      	b.n	80010f0 <__libc_init_array+0xc>
 8001112:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001116:	4798      	blx	r3
 8001118:	3501      	adds	r5, #1
 800111a:	e7f2      	b.n	8001102 <__libc_init_array+0x1e>
 800111c:	08001154 	.word	0x08001154
 8001120:	08001154 	.word	0x08001154
 8001124:	08001154 	.word	0x08001154
 8001128:	08001158 	.word	0x08001158

0800112c <_init>:
 800112c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800112e:	bf00      	nop
 8001130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001132:	bc08      	pop	{r3}
 8001134:	469e      	mov	lr, r3
 8001136:	4770      	bx	lr

08001138 <_fini>:
 8001138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800113a:	bf00      	nop
 800113c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800113e:	bc08      	pop	{r3}
 8001140:	469e      	mov	lr, r3
 8001142:	4770      	bx	lr
