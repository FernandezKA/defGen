
Gen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005c8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006d4  080006d4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006d4  080006d4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080006d4  080006d4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006d4  080006d4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006d4  080006d4  000106d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006d8  080006d8  000106d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080006dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000004  080006e0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  080006e0  00020034  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000041c0  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000dd2  00000000  00000000  000241ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001ea4  00000000  00000000  00024fbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001c8  00000000  00000000  00026e68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000ae0  00000000  00000000  00027030  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00011c5d  00000000  00000000  00027b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002958  00000000  00000000  0003976d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0005de39  00000000  00000000  0003c0c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00099efe  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000434  00000000  00000000  00099f7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	080006bc 	.word	0x080006bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	080006bc 	.word	0x080006bc

0800014c <SystemClock_Config>:
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800014c:	4923      	ldr	r1, [pc, #140]	; (80001dc <SystemClock_Config+0x90>)
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800014e:	b508      	push	{r3, lr}
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000150:	460a      	mov	r2, r1
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000152:	680b      	ldr	r3, [r1, #0]
 8000154:	f023 0307 	bic.w	r3, r3, #7
 8000158:	f043 0302 	orr.w	r3, r3, #2
 800015c:	600b      	str	r3, [r1, #0]
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800015e:	6813      	ldr	r3, [r2, #0]
 8000160:	f003 0307 	and.w	r3, r3, #7
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000164:	2b02      	cmp	r3, #2
 8000166:	d1fa      	bne.n	800015e <SystemClock_Config+0x12>
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000168:	4b1d      	ldr	r3, [pc, #116]	; (80001e0 <SystemClock_Config+0x94>)
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 800016a:	461a      	mov	r2, r3
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800016c:	6819      	ldr	r1, [r3, #0]
 800016e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8000172:	6019      	str	r1, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000174:	6813      	ldr	r3, [r2, #0]
  {
  }
  LL_RCC_HSE_Enable();

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000176:	0399      	lsls	r1, r3, #14
 8000178:	d5fc      	bpl.n	8000174 <SystemClock_Config+0x28>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 800017a:	6851      	ldr	r1, [r2, #4]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800017c:	4b18      	ldr	r3, [pc, #96]	; (80001e0 <SystemClock_Config+0x94>)
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 800017e:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
 8000182:	f441 11e8 	orr.w	r1, r1, #1900544	; 0x1d0000
 8000186:	6051      	str	r1, [r2, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000188:	6811      	ldr	r1, [r2, #0]
 800018a:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 800018e:	6011      	str	r1, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000190:	681a      	ldr	r2, [r3, #0]
  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
  LL_RCC_PLL_Enable();

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000192:	0192      	lsls	r2, r2, #6
 8000194:	d5fc      	bpl.n	8000190 <SystemClock_Config+0x44>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000196:	6859      	ldr	r1, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000198:	4a11      	ldr	r2, [pc, #68]	; (80001e0 <SystemClock_Config+0x94>)
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800019a:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 800019e:	6059      	str	r1, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80001a0:	6859      	ldr	r1, [r3, #4]
 80001a2:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80001a6:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80001aa:	6059      	str	r1, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80001ac:	6859      	ldr	r1, [r3, #4]
 80001ae:	f421 5160 	bic.w	r1, r1, #14336	; 0x3800
 80001b2:	6059      	str	r1, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80001b4:	6859      	ldr	r1, [r3, #4]
 80001b6:	f021 0103 	bic.w	r1, r1, #3
 80001ba:	f041 0102 	orr.w	r1, r1, #2
 80001be:	6059      	str	r1, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80001c0:	6853      	ldr	r3, [r2, #4]
 80001c2:	f003 030c 	and.w	r3, r3, #12
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80001c6:	2b08      	cmp	r3, #8
 80001c8:	d1fa      	bne.n	80001c0 <SystemClock_Config+0x74>
  {

  }
  LL_Init1msTick(72000000);
 80001ca:	4806      	ldr	r0, [pc, #24]	; (80001e4 <SystemClock_Config+0x98>)
 80001cc:	f000 fa3a 	bl	8000644 <LL_Init1msTick>
  LL_SetSystemCoreClock(72000000);
}
 80001d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LL_SetSystemCoreClock(72000000);
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <SystemClock_Config+0x98>)
 80001d6:	f000 ba47 	b.w	8000668 <LL_SetSystemCoreClock>
 80001da:	bf00      	nop
 80001dc:	40022000 	.word	0x40022000
 80001e0:	40021000 	.word	0x40021000
 80001e4:	044aa200 	.word	0x044aa200

080001e8 <main>:
	new_time = 1;
 80001e8:	2601      	movs	r6, #1
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001ea:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80001ee:	4c7c      	ldr	r4, [pc, #496]	; (80003e0 <main+0x1f8>)
	countSend = 0x00U;
 80001f0:	2500      	movs	r5, #0
 80001f2:	69a3      	ldr	r3, [r4, #24]
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	4333      	orrs	r3, r6
 80001f8:	61a3      	str	r3, [r4, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80001fa:	69a3      	ldr	r3, [r4, #24]
	new_prescale = 71U;
 80001fc:	f04f 0847 	mov.w	r8, #71	; 0x47
{
 8000200:	b08c      	sub	sp, #48	; 0x30
 8000202:	4033      	ands	r3, r6
 8000204:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000206:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000208:	69e3      	ldr	r3, [r4, #28]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800020a:	4f76      	ldr	r7, [pc, #472]	; (80003e4 <main+0x1fc>)
 800020c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000210:	61e3      	str	r3, [r4, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000212:	69e3      	ldr	r3, [r4, #28]
  reg_value  =  (reg_value                                   |
 8000214:	4a74      	ldr	r2, [pc, #464]	; (80003e8 <main+0x200>)
 8000216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800021a:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800021c:	9b00      	ldr	r3, [sp, #0]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800021e:	68f9      	ldr	r1, [r7, #12]
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 8000220:	4b72      	ldr	r3, [pc, #456]	; (80003ec <main+0x204>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000222:	4001      	ands	r1, r0
  reg_value  =  (reg_value                                   |
 8000224:	430a      	orrs	r2, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8000226:	60fa      	str	r2, [r7, #12]
 8000228:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800022a:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 8000418 <main+0x230>
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 800022e:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8000232:	605a      	str	r2, [r3, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8000234:	685a      	ldr	r2, [r3, #4]
 8000236:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800023a:	605a      	str	r2, [r3, #4]
  SystemClock_Config();
 800023c:	f7ff ff86 	bl	800014c <SystemClock_Config>
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000240:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000244:	f44f 7180 	mov.w	r1, #256	; 0x100
  LL_GPIO_SetOutputPin(Out_GPIO_Port, Out_Pin);

  /**/
  GPIO_InitStruct.Pin = Led_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000248:	2202      	movs	r2, #2
	countSend = 0x00U;
 800024a:	4b69      	ldr	r3, [pc, #420]	; (80003f0 <main+0x208>)
	new_state = 0x00U;
 800024c:	4869      	ldr	r0, [pc, #420]	; (80003f4 <main+0x20c>)
	countSend = 0x00U;
 800024e:	801d      	strh	r5, [r3, #0]
	new_repeat = 0x00U;
 8000250:	4b69      	ldr	r3, [pc, #420]	; (80003f8 <main+0x210>)
	new_state = 0x00U;
 8000252:	6005      	str	r5, [r0, #0]
	new_time = 1;
 8000254:	4869      	ldr	r0, [pc, #420]	; (80003fc <main+0x214>)
	new_repeat = 0x00U;
 8000256:	801d      	strh	r5, [r3, #0]
	new_prescale = 71U;
 8000258:	4b69      	ldr	r3, [pc, #420]	; (8000400 <main+0x218>)
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800025a:	950a      	str	r5, [sp, #40]	; 0x28
 800025c:	950b      	str	r5, [sp, #44]	; 0x2c
	new_time = 1;
 800025e:	6006      	str	r6, [r0, #0]
	new_prescale = 71U;
 8000260:	f8a3 8000 	strh.w	r8, [r3]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000264:	69a3      	ldr	r3, [r4, #24]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000266:	4867      	ldr	r0, [pc, #412]	; (8000404 <main+0x21c>)
 8000268:	f043 0310 	orr.w	r3, r3, #16
 800026c:	61a3      	str	r3, [r4, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800026e:	69a3      	ldr	r3, [r4, #24]
 8000270:	f003 0310 	and.w	r3, r3, #16
 8000274:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 8000276:	9b04      	ldr	r3, [sp, #16]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000278:	69a3      	ldr	r3, [r4, #24]
 800027a:	f043 0320 	orr.w	r3, r3, #32
 800027e:	61a3      	str	r3, [r4, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000280:	69a3      	ldr	r3, [r4, #24]
 8000282:	f003 0320 	and.w	r3, r3, #32
 8000286:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 8000288:	9b05      	ldr	r3, [sp, #20]
  SET_BIT(RCC->APB2ENR, Periphs);
 800028a:	69a3      	ldr	r3, [r4, #24]
 800028c:	f043 0304 	orr.w	r3, r3, #4
 8000290:	61a3      	str	r3, [r4, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000292:	69a3      	ldr	r3, [r4, #24]
 8000294:	f003 0304 	and.w	r3, r3, #4
 8000298:	9306      	str	r3, [sp, #24]
  (void)tmpreg;
 800029a:	9b06      	ldr	r3, [sp, #24]
  GPIO_InitStruct.Pin = Led_Pin;
 800029c:	4b5a      	ldr	r3, [pc, #360]	; (8000408 <main+0x220>)
 800029e:	f8c0 c014 	str.w	ip, [r0, #20]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80002a2:	f8c9 1010 	str.w	r1, [r9, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  LL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 80002a6:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80002a8:	e9cd 6208 	strd	r6, r2, [sp, #32]
  GPIO_InitStruct.Pin = Led_Pin;
 80002ac:	9307      	str	r3, [sp, #28]
  LL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 80002ae:	f000 f915 	bl	80004dc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Out_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80002b2:	2203      	movs	r2, #3
  GPIO_InitStruct.Pin = Out_Pin;
 80002b4:	4b55      	ldr	r3, [pc, #340]	; (800040c <main+0x224>)
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  LL_GPIO_Init(Out_GPIO_Port, &GPIO_InitStruct);
 80002b6:	a907      	add	r1, sp, #28
 80002b8:	4648      	mov	r0, r9
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80002ba:	e9cd 2509 	strd	r2, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80002be:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pin = Out_Pin;
 80002c0:	9307      	str	r3, [sp, #28]
  LL_GPIO_Init(Out_GPIO_Port, &GPIO_InitStruct);
 80002c2:	f000 f90b 	bl	80004dc <LL_GPIO_Init>
  TIM_InitStruct.Autoreload = 10;
 80002c6:	220a      	movs	r2, #10
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80002c8:	f8cd 5022 	str.w	r5, [sp, #34]	; 0x22
 80002cc:	f8cd 5026 	str.w	r5, [sp, #38]	; 0x26
 80002d0:	f8cd 501e 	str.w	r5, [sp, #30]
 80002d4:	f8cd 502a 	str.w	r5, [sp, #42]	; 0x2a
 80002d8:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
  SET_BIT(RCC->APB2ENR, Periphs);
 80002dc:	69a3      	ldr	r3, [r4, #24]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 80002de:	4e4c      	ldr	r6, [pc, #304]	; (8000410 <main+0x228>)
 80002e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002e4:	61a3      	str	r3, [r4, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80002e6:	69a3      	ldr	r3, [r4, #24]
 80002e8:	a907      	add	r1, sp, #28
 80002ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002ee:	9303      	str	r3, [sp, #12]
 80002f0:	4630      	mov	r0, r6
  (void)tmpreg;
 80002f2:	9b03      	ldr	r3, [sp, #12]
  TIM_InitStruct.Autoreload = 10;
 80002f4:	9209      	str	r2, [sp, #36]	; 0x24
  TIM_InitStruct.Prescaler = 71;
 80002f6:	f8ad 801c 	strh.w	r8, [sp, #28]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 80002fa:	f000 f96d 	bl	80005d8 <LL_TIM_Init>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80002fe:	6833      	ldr	r3, [r6, #0]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000300:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000308:	6033      	str	r3, [r6, #0]
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800030a:	68b3      	ldr	r3, [r6, #8]
 800030c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000310:	f023 0307 	bic.w	r3, r3, #7
 8000314:	60b3      	str	r3, [r6, #8]
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000316:	6873      	ldr	r3, [r6, #4]
 8000318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800031c:	6073      	str	r3, [r6, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800031e:	68b3      	ldr	r3, [r6, #8]
 8000320:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000324:	60b3      	str	r3, [r6, #8]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000326:	68f3      	ldr	r3, [r6, #12]
 8000328:	f043 0301 	orr.w	r3, r3, #1
 800032c:	60f3      	str	r3, [r6, #12]
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800032e:	f8cd 5022 	str.w	r5, [sp, #34]	; 0x22
 8000332:	f8cd 5026 	str.w	r5, [sp, #38]	; 0x26
 8000336:	f8cd 501e 	str.w	r5, [sp, #30]
 800033a:	f8cd 502a 	str.w	r5, [sp, #42]	; 0x2a
 800033e:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
  SET_BIT(RCC->APB1ENR, Periphs);
 8000342:	69e3      	ldr	r3, [r4, #28]
  TIM_InitStruct.Prescaler = 71;
 8000344:	2647      	movs	r6, #71	; 0x47
 8000346:	f043 0301 	orr.w	r3, r3, #1
 800034a:	61e3      	str	r3, [r4, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800034c:	69e3      	ldr	r3, [r4, #28]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800034e:	4c31      	ldr	r4, [pc, #196]	; (8000414 <main+0x22c>)
 8000350:	f003 0301 	and.w	r3, r3, #1
 8000354:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8000356:	9b02      	ldr	r3, [sp, #8]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800035e:	f1c3 0207 	rsb	r2, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000362:	1d19      	adds	r1, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000364:	2a04      	cmp	r2, #4
 8000366:	bf28      	it	cs
 8000368:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800036a:	2906      	cmp	r1, #6
 800036c:	bf88      	it	hi
 800036e:	1edd      	subhi	r5, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000370:	f04f 33ff 	mov.w	r3, #4294967295
 8000374:	4093      	lsls	r3, r2
 8000376:	43db      	mvns	r3, r3
  TIM_InitStruct.Autoreload = 10000;
 8000378:	f242 7210 	movw	r2, #10000	; 0x2710
 800037c:	f003 0301 	and.w	r3, r3, #1
 8000380:	40ab      	lsls	r3, r5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000382:	011b      	lsls	r3, r3, #4
 8000384:	b2db      	uxtb	r3, r3
 8000386:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 800038a:	a907      	add	r1, sp, #28
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800038c:	6020      	str	r0, [r4, #0]
 800038e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  TIM_InitStruct.Autoreload = 10000;
 8000392:	9209      	str	r2, [sp, #36]	; 0x24
  TIM_InitStruct.Prescaler = 71;
 8000394:	f8ad 601c 	strh.w	r6, [sp, #28]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000398:	f000 f91e 	bl	80005d8 <LL_TIM_Init>
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800039c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003a0:	2000      	movs	r0, #0
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003a2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80003a6:	681a      	ldr	r2, [r3, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003a8:	4d0e      	ldr	r5, [pc, #56]	; (80003e4 <main+0x1fc>)
 80003aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80003ae:	601a      	str	r2, [r3, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80003b0:	689a      	ldr	r2, [r3, #8]
 80003b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80003b6:	f022 0207 	bic.w	r2, r2, #7
 80003ba:	609a      	str	r2, [r3, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80003bc:	685a      	ldr	r2, [r3, #4]
 80003be:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80003c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80003c4:	689a      	ldr	r2, [r3, #8]
 80003c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80003ca:	609a      	str	r2, [r3, #8]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80003cc:	4a10      	ldr	r2, [pc, #64]	; (8000410 <main+0x228>)
 80003ce:	68eb      	ldr	r3, [r5, #12]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003d0:	f884 0319 	strb.w	r0, [r4, #793]	; 0x319
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003d4:	6021      	str	r1, [r4, #0]
 80003d6:	6813      	ldr	r3, [r2, #0]
 80003d8:	f043 0301 	orr.w	r3, r3, #1
 80003dc:	6013      	str	r3, [r2, #0]
 80003de:	e7fe      	b.n	80003de <main+0x1f6>
 80003e0:	40021000 	.word	0x40021000
 80003e4:	e000ed00 	.word	0xe000ed00
 80003e8:	05fa0300 	.word	0x05fa0300
 80003ec:	40010000 	.word	0x40010000
 80003f0:	20000022 	.word	0x20000022
 80003f4:	2000002c 	.word	0x2000002c
 80003f8:	20000032 	.word	0x20000032
 80003fc:	20000028 	.word	0x20000028
 8000400:	20000030 	.word	0x20000030
 8000404:	40011000 	.word	0x40011000
 8000408:	04200020 	.word	0x04200020
 800040c:	04010001 	.word	0x04010001
 8000410:	40012c00 	.word	0x40012c00
 8000414:	e000e100 	.word	0xe000e100
 8000418:	40010800 	.word	0x40010800

0800041c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800041c:	e7fe      	b.n	800041c <NMI_Handler>
 800041e:	bf00      	nop

08000420 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000420:	e7fe      	b.n	8000420 <HardFault_Handler>
 8000422:	bf00      	nop

08000424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000424:	e7fe      	b.n	8000424 <MemManage_Handler>
 8000426:	bf00      	nop

08000428 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000428:	e7fe      	b.n	8000428 <BusFault_Handler>
 800042a:	bf00      	nop

0800042c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800042c:	e7fe      	b.n	800042c <UsageFault_Handler>
 800042e:	bf00      	nop

08000430 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop

08000434 <DebugMon_Handler>:
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop

08000438 <PendSV_Handler>:
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop

0800043c <SysTick_Handler>:
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop

08000440 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000440:	b430      	push	{r4, r5}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000442:	f06f 0001 	mvn.w	r0, #1
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	GPIOA->ODR^=(1<<8);
	TIM1->ARR = new_time;
	TIM1->RCR = new_repeat;
	TIM1->PSC = new_prescale;
	processed = 1;
 8000446:	2401      	movs	r4, #1
	GPIOA->ODR^=(1<<8);
 8000448:	4909      	ldr	r1, [pc, #36]	; (8000470 <TIM1_UP_IRQHandler+0x30>)
	TIM1->ARR = new_time;
 800044a:	4d0a      	ldr	r5, [pc, #40]	; (8000474 <TIM1_UP_IRQHandler+0x34>)
	GPIOA->ODR^=(1<<8);
 800044c:	68ca      	ldr	r2, [r1, #12]
	TIM1->ARR = new_time;
 800044e:	4b0a      	ldr	r3, [pc, #40]	; (8000478 <TIM1_UP_IRQHandler+0x38>)
	GPIOA->ODR^=(1<<8);
 8000450:	f482 7280 	eor.w	r2, r2, #256	; 0x100
 8000454:	60ca      	str	r2, [r1, #12]
	TIM1->ARR = new_time;
 8000456:	6829      	ldr	r1, [r5, #0]
	TIM1->RCR = new_repeat;
 8000458:	4a08      	ldr	r2, [pc, #32]	; (800047c <TIM1_UP_IRQHandler+0x3c>)
	TIM1->ARR = new_time;
 800045a:	62d9      	str	r1, [r3, #44]	; 0x2c
	TIM1->RCR = new_repeat;
 800045c:	8811      	ldrh	r1, [r2, #0]
	TIM1->PSC = new_prescale;
 800045e:	4a08      	ldr	r2, [pc, #32]	; (8000480 <TIM1_UP_IRQHandler+0x40>)
	TIM1->RCR = new_repeat;
 8000460:	6319      	str	r1, [r3, #48]	; 0x30
	TIM1->PSC = new_prescale;
 8000462:	8811      	ldrh	r1, [r2, #0]
	processed = 1;
 8000464:	4a07      	ldr	r2, [pc, #28]	; (8000484 <TIM1_UP_IRQHandler+0x44>)
	TIM1->PSC = new_prescale;
 8000466:	6299      	str	r1, [r3, #40]	; 0x28
	processed = 1;
 8000468:	7014      	strb	r4, [r2, #0]
 800046a:	6118      	str	r0, [r3, #16]
	LL_TIM_ClearFlag_UPDATE(TIM1);
  /* USER CODE END TIM1_UP_IRQn 0 */
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800046c:	bc30      	pop	{r4, r5}
 800046e:	4770      	bx	lr
 8000470:	40010800 	.word	0x40010800
 8000474:	20000028 	.word	0x20000028
 8000478:	40012c00 	.word	0x40012c00
 800047c:	20000032 	.word	0x20000032
 8000480:	20000030 	.word	0x20000030
 8000484:	20000024 	.word	0x20000024

08000488 <TIM2_IRQHandler>:
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop

0800048c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop

08000490 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000490:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000492:	e003      	b.n	800049c <LoopCopyDataInit>

08000494 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000494:	4b0b      	ldr	r3, [pc, #44]	; (80004c4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000496:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000498:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800049a:	3104      	adds	r1, #4

0800049c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800049c:	480a      	ldr	r0, [pc, #40]	; (80004c8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800049e:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80004a0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80004a2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80004a4:	d3f6      	bcc.n	8000494 <CopyDataInit>
  ldr r2, =_sbss
 80004a6:	4a0a      	ldr	r2, [pc, #40]	; (80004d0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80004a8:	e002      	b.n	80004b0 <LoopFillZerobss>

080004aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80004aa:	2300      	movs	r3, #0
  str r3, [r2], #4
 80004ac:	f842 3b04 	str.w	r3, [r2], #4

080004b0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80004b0:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80004b2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80004b4:	d3f9      	bcc.n	80004aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004b6:	f7ff ffe9 	bl	800048c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004ba:	f000 f8db 	bl	8000674 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004be:	f7ff fe93 	bl	80001e8 <main>
  bx lr
 80004c2:	4770      	bx	lr
  ldr r3, =_sidata
 80004c4:	080006dc 	.word	0x080006dc
  ldr r0, =_sdata
 80004c8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80004cc:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 80004d0:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 80004d4:	20000034 	.word	0x20000034

080004d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004d8:	e7fe      	b.n	80004d8 <ADC1_2_IRQHandler>
	...

080004dc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80004dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80004e0:	680f      	ldr	r7, [r1, #0]
 80004e2:	f3c7 270f 	ubfx	r7, r7, #8, #16
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004e6:	fa97 f6a7 	rbit	r6, r7
  pinpos = POSITION_VAL(pinmask);
 80004ea:	fab6 f686 	clz	r6, r6

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 80004ee:	fa37 f306 	lsrs.w	r3, r7, r6
 80004f2:	d06e      	beq.n	80005d2 <LL_GPIO_Init+0xf6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 80004f4:	f04f 0c01 	mov.w	ip, #1
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80004f8:	f04f 0e0f 	mov.w	lr, #15
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80004fc:	f04f 0803 	mov.w	r8, #3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8000500:	f04f 0a04 	mov.w	sl, #4
 8000504:	e056      	b.n	80005b4 <LL_GPIO_Init+0xd8>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
      {
        currentpin = (0x00000101uL << pinpos);
 8000506:	f240 1301 	movw	r3, #257	; 0x101
 800050a:	40b3      	lsls	r3, r6
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 800050c:	68c2      	ldr	r2, [r0, #12]
 800050e:	ea4f 2913 	mov.w	r9, r3, lsr #8
 8000512:	fa99 f4a9 	rbit	r4, r9
 8000516:	fab4 f584 	clz	r5, r4
 800051a:	690c      	ldr	r4, [r1, #16]
 800051c:	ea22 0209 	bic.w	r2, r2, r9
 8000520:	40ac      	lsls	r4, r5
 8000522:	4322      	orrs	r2, r4
 8000524:	60c2      	str	r2, [r0, #12]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8000526:	0e1c      	lsrs	r4, r3, #24
 8000528:	fa93 f5a3 	rbit	r5, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 800052c:	fab5 f585 	clz	r5, r5
 8000530:	fa93 f2a3 	rbit	r2, r3
 8000534:	fab2 f282 	clz	r2, r2
 8000538:	00ad      	lsls	r5, r5, #2
 800053a:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800053e:	5902      	ldr	r2, [r0, r4]
 8000540:	fa0e f505 	lsl.w	r5, lr, r5
 8000544:	ea22 0505 	bic.w	r5, r2, r5
 8000548:	684a      	ldr	r2, [r1, #4]
 800054a:	fa02 f209 	lsl.w	r2, r2, r9
 800054e:	4315      	orrs	r5, r2
 8000550:	5105      	str	r5, [r0, r4]
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000552:	684a      	ldr	r2, [r1, #4]
 8000554:	f022 0208 	bic.w	r2, r2, #8
 8000558:	2a01      	cmp	r2, #1
 800055a:	d127      	bne.n	80005ac <LL_GPIO_Init+0xd0>
 800055c:	fa93 f2a3 	rbit	r2, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8000560:	fab2 f282 	clz	r2, r2
 8000564:	fa93 f9a3 	rbit	r9, r3
 8000568:	fab9 f989 	clz	r9, r9
 800056c:	0092      	lsls	r2, r2, #2
 800056e:	fa08 f202 	lsl.w	r2, r8, r2
 8000572:	ea25 0502 	bic.w	r5, r5, r2
 8000576:	688a      	ldr	r2, [r1, #8]
 8000578:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800057c:	fa02 f209 	lsl.w	r2, r2, r9
 8000580:	432a      	orrs	r2, r5
 8000582:	5102      	str	r2, [r0, r4]
 8000584:	fa93 f9a3 	rbit	r9, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8000588:	fab9 f989 	clz	r9, r9
 800058c:	fa93 f3a3 	rbit	r3, r3
 8000590:	fab3 f383 	clz	r3, r3
 8000594:	68cd      	ldr	r5, [r1, #12]
 8000596:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800059a:	009b      	lsls	r3, r3, #2
 800059c:	fa0a f909 	lsl.w	r9, sl, r9
 80005a0:	ea22 0209 	bic.w	r2, r2, r9
 80005a4:	fa05 f303 	lsl.w	r3, r5, r3
 80005a8:	4313      	orrs	r3, r2
 80005aa:	5103      	str	r3, [r0, r4]

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
      }
    }
    pinpos++;
 80005ac:	3601      	adds	r6, #1
  while ((pinmask  >> pinpos) != 0u)
 80005ae:	fa37 f306 	lsrs.w	r3, r7, r6
 80005b2:	d00e      	beq.n	80005d2 <LL_GPIO_Init+0xf6>
    if ((pinmask & (1u << pinpos)) != 0u)
 80005b4:	fa0c f306 	lsl.w	r3, ip, r6
 80005b8:	423b      	tst	r3, r7
 80005ba:	d0f7      	beq.n	80005ac <LL_GPIO_Init+0xd0>
      if (pinpos < GPIO_PIN_MASK_POS)
 80005bc:	2e07      	cmp	r6, #7
 80005be:	d9a2      	bls.n	8000506 <LL_GPIO_Init+0x2a>
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 80005c0:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80005c4:	f1a6 0308 	sub.w	r3, r6, #8
 80005c8:	fa02 f303 	lsl.w	r3, r2, r3
 80005cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80005d0:	e79c      	b.n	800050c <LL_GPIO_Init+0x30>
  }
  return (SUCCESS);
}
 80005d2:	2000      	movs	r0, #0
 80005d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080005d8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80005d8:	b430      	push	{r4, r5}
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80005da:	4d19      	ldr	r5, [pc, #100]	; (8000640 <LL_TIM_Init+0x68>)
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80005dc:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80005de:	42a8      	cmp	r0, r5
 80005e0:	688a      	ldr	r2, [r1, #8]
 80005e2:	880c      	ldrh	r4, [r1, #0]
 80005e4:	d01d      	beq.n	8000622 <LL_TIM_Init+0x4a>
 80005e6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80005ea:	d011      	beq.n	8000610 <LL_TIM_Init+0x38>
 80005ec:	f5a5 3594 	sub.w	r5, r5, #75776	; 0x12800
 80005f0:	42a8      	cmp	r0, r5
 80005f2:	d00d      	beq.n	8000610 <LL_TIM_Init+0x38>
 80005f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80005f8:	42a8      	cmp	r0, r5
 80005fa:	d009      	beq.n	8000610 <LL_TIM_Init+0x38>
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80005fc:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80005fe:	62c2      	str	r2, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 8000600:	6284      	str	r4, [r0, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8000602:	6943      	ldr	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 8000604:	bc30      	pop	{r4, r5}
 8000606:	f043 0301 	orr.w	r3, r3, #1
 800060a:	6143      	str	r3, [r0, #20]
 800060c:	2000      	movs	r0, #0
 800060e:	4770      	bx	lr
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8000610:	684d      	ldr	r5, [r1, #4]
 8000612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000616:	432b      	orrs	r3, r5
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8000618:	68c9      	ldr	r1, [r1, #12]
 800061a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800061e:	430b      	orrs	r3, r1
 8000620:	e7ec      	b.n	80005fc <LL_TIM_Init+0x24>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8000622:	684d      	ldr	r5, [r1, #4]
 8000624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000628:	432b      	orrs	r3, r5
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800062a:	68cd      	ldr	r5, [r1, #12]
 800062c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000630:	432b      	orrs	r3, r5
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8000632:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8000634:	62c2      	str	r2, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 8000636:	6284      	str	r4, [r0, #40]	; 0x28
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8000638:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800063a:	6303      	str	r3, [r0, #48]	; 0x30
 800063c:	e7e1      	b.n	8000602 <LL_TIM_Init+0x2a>
 800063e:	bf00      	nop
 8000640:	40012c00 	.word	0x40012c00

08000644 <LL_Init1msTick>:
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000644:	2100      	movs	r1, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000646:	2205      	movs	r2, #5
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000648:	b410      	push	{r4}
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800064a:	4c05      	ldr	r4, [pc, #20]	; (8000660 <LL_Init1msTick+0x1c>)
 800064c:	4b05      	ldr	r3, [pc, #20]	; (8000664 <LL_Init1msTick+0x20>)
 800064e:	fba4 4000 	umull	r4, r0, r4, r0
 8000652:	0980      	lsrs	r0, r0, #6
 8000654:	3801      	subs	r0, #1
 8000656:	6058      	str	r0, [r3, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 8000658:	bc10      	pop	{r4}
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800065a:	6099      	str	r1, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	4770      	bx	lr
 8000660:	10624dd3 	.word	0x10624dd3
 8000664:	e000e010 	.word	0xe000e010

08000668 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000668:	4b01      	ldr	r3, [pc, #4]	; (8000670 <LL_SetSystemCoreClock+0x8>)
 800066a:	6018      	str	r0, [r3, #0]
}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20000000 	.word	0x20000000

08000674 <__libc_init_array>:
 8000674:	b570      	push	{r4, r5, r6, lr}
 8000676:	2500      	movs	r5, #0
 8000678:	4e0c      	ldr	r6, [pc, #48]	; (80006ac <__libc_init_array+0x38>)
 800067a:	4c0d      	ldr	r4, [pc, #52]	; (80006b0 <__libc_init_array+0x3c>)
 800067c:	1ba4      	subs	r4, r4, r6
 800067e:	10a4      	asrs	r4, r4, #2
 8000680:	42a5      	cmp	r5, r4
 8000682:	d109      	bne.n	8000698 <__libc_init_array+0x24>
 8000684:	f000 f81a 	bl	80006bc <_init>
 8000688:	2500      	movs	r5, #0
 800068a:	4e0a      	ldr	r6, [pc, #40]	; (80006b4 <__libc_init_array+0x40>)
 800068c:	4c0a      	ldr	r4, [pc, #40]	; (80006b8 <__libc_init_array+0x44>)
 800068e:	1ba4      	subs	r4, r4, r6
 8000690:	10a4      	asrs	r4, r4, #2
 8000692:	42a5      	cmp	r5, r4
 8000694:	d105      	bne.n	80006a2 <__libc_init_array+0x2e>
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800069c:	4798      	blx	r3
 800069e:	3501      	adds	r5, #1
 80006a0:	e7ee      	b.n	8000680 <__libc_init_array+0xc>
 80006a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006a6:	4798      	blx	r3
 80006a8:	3501      	adds	r5, #1
 80006aa:	e7f2      	b.n	8000692 <__libc_init_array+0x1e>
 80006ac:	080006d4 	.word	0x080006d4
 80006b0:	080006d4 	.word	0x080006d4
 80006b4:	080006d4 	.word	0x080006d4
 80006b8:	080006d8 	.word	0x080006d8

080006bc <_init>:
 80006bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006be:	bf00      	nop
 80006c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006c2:	bc08      	pop	{r3}
 80006c4:	469e      	mov	lr, r3
 80006c6:	4770      	bx	lr

080006c8 <_fini>:
 80006c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ca:	bf00      	nop
 80006cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ce:	bc08      	pop	{r3}
 80006d0:	469e      	mov	lr, r3
 80006d2:	4770      	bx	lr
