
Gen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ffc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002108  08002108  00012108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002118  08002118  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08002118  08002118  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002118  08002118  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002118  08002118  00012118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800211c  0800211c  0001211c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002120  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000014  08002134  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000044  08002134  00020044  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000032c8  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000b55  00000000  00000000  00023305  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000e8  00000000  00000000  00023e60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00011c8b  00000000  00000000  00023f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000023de  00000000  00000000  00035bd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0005de5a  00000000  00000000  00037fb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00095e0b  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000011d8  00000000  00000000  00095e88  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 00000020  00000000  00000000  00097060  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	080020f0 	.word	0x080020f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	080020f0 	.word	0x080020f0

0800014c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	f003 0307 	and.w	r3, r3, #7
 800015a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800015c:	4b0c      	ldr	r3, [pc, #48]	; (8000190 <__NVIC_SetPriorityGrouping+0x44>)
 800015e:	68db      	ldr	r3, [r3, #12]
 8000160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000162:	68ba      	ldr	r2, [r7, #8]
 8000164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000168:	4013      	ands	r3, r2
 800016a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000170:	68bb      	ldr	r3, [r7, #8]
 8000172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800017c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800017e:	4a04      	ldr	r2, [pc, #16]	; (8000190 <__NVIC_SetPriorityGrouping+0x44>)
 8000180:	68bb      	ldr	r3, [r7, #8]
 8000182:	60d3      	str	r3, [r2, #12]
}
 8000184:	bf00      	nop
 8000186:	3714      	adds	r7, #20
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	e000ed00 	.word	0xe000ed00

08000194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__NVIC_GetPriorityGrouping+0x18>)
 800019a:	68db      	ldr	r3, [r3, #12]
 800019c:	0a1b      	lsrs	r3, r3, #8
 800019e:	f003 0307 	and.w	r3, r3, #7
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	e000ed00 	.word	0xe000ed00

080001b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001b0:	b480      	push	{r7}
 80001b2:	b083      	sub	sp, #12
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	4603      	mov	r3, r0
 80001b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001be:	2b00      	cmp	r3, #0
 80001c0:	db0b      	blt.n	80001da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001c2:	79fb      	ldrb	r3, [r7, #7]
 80001c4:	f003 021f 	and.w	r2, r3, #31
 80001c8:	4906      	ldr	r1, [pc, #24]	; (80001e4 <__NVIC_EnableIRQ+0x34>)
 80001ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ce:	095b      	lsrs	r3, r3, #5
 80001d0:	2001      	movs	r0, #1
 80001d2:	fa00 f202 	lsl.w	r2, r0, r2
 80001d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001da:	bf00      	nop
 80001dc:	370c      	adds	r7, #12
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr
 80001e4:	e000e100 	.word	0xe000e100

080001e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	6039      	str	r1, [r7, #0]
 80001f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	db0a      	blt.n	8000212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001fc:	683b      	ldr	r3, [r7, #0]
 80001fe:	b2da      	uxtb	r2, r3
 8000200:	490c      	ldr	r1, [pc, #48]	; (8000234 <__NVIC_SetPriority+0x4c>)
 8000202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000206:	0112      	lsls	r2, r2, #4
 8000208:	b2d2      	uxtb	r2, r2
 800020a:	440b      	add	r3, r1
 800020c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000210:	e00a      	b.n	8000228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	b2da      	uxtb	r2, r3
 8000216:	4908      	ldr	r1, [pc, #32]	; (8000238 <__NVIC_SetPriority+0x50>)
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	f003 030f 	and.w	r3, r3, #15
 800021e:	3b04      	subs	r3, #4
 8000220:	0112      	lsls	r2, r2, #4
 8000222:	b2d2      	uxtb	r2, r2
 8000224:	440b      	add	r3, r1
 8000226:	761a      	strb	r2, [r3, #24]
}
 8000228:	bf00      	nop
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	bc80      	pop	{r7}
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	e000e100 	.word	0xe000e100
 8000238:	e000ed00 	.word	0xe000ed00

0800023c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800023c:	b480      	push	{r7}
 800023e:	b089      	sub	sp, #36	; 0x24
 8000240:	af00      	add	r7, sp, #0
 8000242:	60f8      	str	r0, [r7, #12]
 8000244:	60b9      	str	r1, [r7, #8]
 8000246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	f003 0307 	and.w	r3, r3, #7
 800024e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000250:	69fb      	ldr	r3, [r7, #28]
 8000252:	f1c3 0307 	rsb	r3, r3, #7
 8000256:	2b04      	cmp	r3, #4
 8000258:	bf28      	it	cs
 800025a:	2304      	movcs	r3, #4
 800025c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800025e:	69fb      	ldr	r3, [r7, #28]
 8000260:	3304      	adds	r3, #4
 8000262:	2b06      	cmp	r3, #6
 8000264:	d902      	bls.n	800026c <NVIC_EncodePriority+0x30>
 8000266:	69fb      	ldr	r3, [r7, #28]
 8000268:	3b03      	subs	r3, #3
 800026a:	e000      	b.n	800026e <NVIC_EncodePriority+0x32>
 800026c:	2300      	movs	r3, #0
 800026e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000270:	f04f 32ff 	mov.w	r2, #4294967295
 8000274:	69bb      	ldr	r3, [r7, #24]
 8000276:	fa02 f303 	lsl.w	r3, r2, r3
 800027a:	43da      	mvns	r2, r3
 800027c:	68bb      	ldr	r3, [r7, #8]
 800027e:	401a      	ands	r2, r3
 8000280:	697b      	ldr	r3, [r7, #20]
 8000282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000284:	f04f 31ff 	mov.w	r1, #4294967295
 8000288:	697b      	ldr	r3, [r7, #20]
 800028a:	fa01 f303 	lsl.w	r3, r1, r3
 800028e:	43d9      	mvns	r1, r3
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000294:	4313      	orrs	r3, r2
         );
}
 8000296:	4618      	mov	r0, r3
 8000298:	3724      	adds	r7, #36	; 0x24
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr

080002a0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80002a4:	4b04      	ldr	r3, [pc, #16]	; (80002b8 <LL_RCC_HSE_Enable+0x18>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a03      	ldr	r2, [pc, #12]	; (80002b8 <LL_RCC_HSE_Enable+0x18>)
 80002aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002ae:	6013      	str	r3, [r2, #0]
}
 80002b0:	bf00      	nop
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bc80      	pop	{r7}
 80002b6:	4770      	bx	lr
 80002b8:	40021000 	.word	0x40021000

080002bc <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80002c0:	4b06      	ldr	r3, [pc, #24]	; (80002dc <LL_RCC_HSE_IsReady+0x20>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80002cc:	bf0c      	ite	eq
 80002ce:	2301      	moveq	r3, #1
 80002d0:	2300      	movne	r3, #0
 80002d2:	b2db      	uxtb	r3, r3
}
 80002d4:	4618      	mov	r0, r3
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bc80      	pop	{r7}
 80002da:	4770      	bx	lr
 80002dc:	40021000 	.word	0x40021000

080002e0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80002e8:	4b06      	ldr	r3, [pc, #24]	; (8000304 <LL_RCC_SetSysClkSource+0x24>)
 80002ea:	685b      	ldr	r3, [r3, #4]
 80002ec:	f023 0203 	bic.w	r2, r3, #3
 80002f0:	4904      	ldr	r1, [pc, #16]	; (8000304 <LL_RCC_SetSysClkSource+0x24>)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	4313      	orrs	r3, r2
 80002f6:	604b      	str	r3, [r1, #4]
}
 80002f8:	bf00      	nop
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bc80      	pop	{r7}
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	40021000 	.word	0x40021000

08000308 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800030c:	4b03      	ldr	r3, [pc, #12]	; (800031c <LL_RCC_GetSysClkSource+0x14>)
 800030e:	685b      	ldr	r3, [r3, #4]
 8000310:	f003 030c 	and.w	r3, r3, #12
}
 8000314:	4618      	mov	r0, r3
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr
 800031c:	40021000 	.word	0x40021000

08000320 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000328:	4b06      	ldr	r3, [pc, #24]	; (8000344 <LL_RCC_SetAHBPrescaler+0x24>)
 800032a:	685b      	ldr	r3, [r3, #4]
 800032c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000330:	4904      	ldr	r1, [pc, #16]	; (8000344 <LL_RCC_SetAHBPrescaler+0x24>)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	4313      	orrs	r3, r2
 8000336:	604b      	str	r3, [r1, #4]
}
 8000338:	bf00      	nop
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	bc80      	pop	{r7}
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	40021000 	.word	0x40021000

08000348 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000350:	4b06      	ldr	r3, [pc, #24]	; (800036c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000352:	685b      	ldr	r3, [r3, #4]
 8000354:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000358:	4904      	ldr	r1, [pc, #16]	; (800036c <LL_RCC_SetAPB1Prescaler+0x24>)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4313      	orrs	r3, r2
 800035e:	604b      	str	r3, [r1, #4]
}
 8000360:	bf00      	nop
 8000362:	370c      	adds	r7, #12
 8000364:	46bd      	mov	sp, r7
 8000366:	bc80      	pop	{r7}
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	40021000 	.word	0x40021000

08000370 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000378:	4b06      	ldr	r3, [pc, #24]	; (8000394 <LL_RCC_SetAPB2Prescaler+0x24>)
 800037a:	685b      	ldr	r3, [r3, #4]
 800037c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000380:	4904      	ldr	r1, [pc, #16]	; (8000394 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	4313      	orrs	r3, r2
 8000386:	604b      	str	r3, [r1, #4]
}
 8000388:	bf00      	nop
 800038a:	370c      	adds	r7, #12
 800038c:	46bd      	mov	sp, r7
 800038e:	bc80      	pop	{r7}
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	40021000 	.word	0x40021000

08000398 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800039c:	4b04      	ldr	r3, [pc, #16]	; (80003b0 <LL_RCC_PLL_Enable+0x18>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a03      	ldr	r2, [pc, #12]	; (80003b0 <LL_RCC_PLL_Enable+0x18>)
 80003a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003a6:	6013      	str	r3, [r2, #0]
}
 80003a8:	bf00      	nop
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bc80      	pop	{r7}
 80003ae:	4770      	bx	lr
 80003b0:	40021000 	.word	0x40021000

080003b4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80003b8:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <LL_RCC_PLL_IsReady+0x20>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80003c4:	bf0c      	ite	eq
 80003c6:	2301      	moveq	r3, #1
 80003c8:	2300      	movne	r3, #0
 80003ca:	b2db      	uxtb	r3, r3
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bc80      	pop	{r7}
 80003d2:	4770      	bx	lr
 80003d4:	40021000 	.word	0x40021000

080003d8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
 80003e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 80003e2:	4b08      	ldr	r3, [pc, #32]	; (8000404 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80003e4:	685b      	ldr	r3, [r3, #4]
 80003e6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80003f0:	683b      	ldr	r3, [r7, #0]
 80003f2:	430b      	orrs	r3, r1
 80003f4:	4903      	ldr	r1, [pc, #12]	; (8000404 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80003f6:	4313      	orrs	r3, r2
 80003f8:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 80003fa:	bf00      	nop
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr
 8000404:	40021000 	.word	0x40021000

08000408 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000408:	b480      	push	{r7}
 800040a:	b085      	sub	sp, #20
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000410:	4b08      	ldr	r3, [pc, #32]	; (8000434 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000412:	69da      	ldr	r2, [r3, #28]
 8000414:	4907      	ldr	r1, [pc, #28]	; (8000434 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4313      	orrs	r3, r2
 800041a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800041c:	4b05      	ldr	r3, [pc, #20]	; (8000434 <LL_APB1_GRP1_EnableClock+0x2c>)
 800041e:	69da      	ldr	r2, [r3, #28]
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4013      	ands	r3, r2
 8000424:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000426:	68fb      	ldr	r3, [r7, #12]
}
 8000428:	bf00      	nop
 800042a:	3714      	adds	r7, #20
 800042c:	46bd      	mov	sp, r7
 800042e:	bc80      	pop	{r7}
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	40021000 	.word	0x40021000

08000438 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000438:	b480      	push	{r7}
 800043a:	b085      	sub	sp, #20
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000440:	4b08      	ldr	r3, [pc, #32]	; (8000464 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000442:	699a      	ldr	r2, [r3, #24]
 8000444:	4907      	ldr	r1, [pc, #28]	; (8000464 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4313      	orrs	r3, r2
 800044a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800044c:	4b05      	ldr	r3, [pc, #20]	; (8000464 <LL_APB2_GRP1_EnableClock+0x2c>)
 800044e:	699a      	ldr	r2, [r3, #24]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	4013      	ands	r3, r2
 8000454:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000456:	68fb      	ldr	r3, [r7, #12]
}
 8000458:	bf00      	nop
 800045a:	3714      	adds	r7, #20
 800045c:	46bd      	mov	sp, r7
 800045e:	bc80      	pop	{r7}
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	40021000 	.word	0x40021000

08000468 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000470:	4b06      	ldr	r3, [pc, #24]	; (800048c <LL_FLASH_SetLatency+0x24>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	f023 0207 	bic.w	r2, r3, #7
 8000478:	4904      	ldr	r1, [pc, #16]	; (800048c <LL_FLASH_SetLatency+0x24>)
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4313      	orrs	r3, r2
 800047e:	600b      	str	r3, [r1, #0]
}
 8000480:	bf00      	nop
 8000482:	370c      	adds	r7, #12
 8000484:	46bd      	mov	sp, r7
 8000486:	bc80      	pop	{r7}
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	40022000 	.word	0x40022000

08000490 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000494:	4b03      	ldr	r3, [pc, #12]	; (80004a4 <LL_FLASH_GetLatency+0x14>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	f003 0307 	and.w	r3, r3, #7
}
 800049c:	4618      	mov	r0, r3
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr
 80004a4:	40022000 	.word	0x40022000

080004a8 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	f043 0201 	orr.w	r2, r3, #1
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	601a      	str	r2, [r3, #0]
}
 80004bc:	bf00      	nop
 80004be:	370c      	adds	r7, #12
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bc80      	pop	{r7}
 80004c4:	4770      	bx	lr

080004c6 <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 80004c6:	b480      	push	{r7}
 80004c8:	b083      	sub	sp, #12
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	601a      	str	r2, [r3, #0]
}
 80004da:	bf00      	nop
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr

080004e4 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	689b      	ldr	r3, [r3, #8]
 80004f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80004f6:	f023 0307 	bic.w	r3, r3, #7
 80004fa:	683a      	ldr	r2, [r7, #0]
 80004fc:	431a      	orrs	r2, r3
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	609a      	str	r2, [r3, #8]
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr

0800050c <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	685b      	ldr	r3, [r3, #4]
 800051a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	431a      	orrs	r2, r3
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	605a      	str	r2, [r3, #4]
}
 8000526:	bf00      	nop
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr

08000530 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	689b      	ldr	r3, [r3, #8]
 800053c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	609a      	str	r2, [r3, #8]
}
 8000544:	bf00      	nop
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr

0800054e <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 800054e:	b480      	push	{r7}
 8000550:	b083      	sub	sp, #12
 8000552:	af00      	add	r7, sp, #0
 8000554:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	68db      	ldr	r3, [r3, #12]
 800055a:	f043 0201 	orr.w	r2, r3, #1
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	60da      	str	r2, [r3, #12]
}
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr

0800056c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	0a1b      	lsrs	r3, r3, #8
 800057a:	b29a      	uxth	r2, r3
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	611a      	str	r2, [r3, #16]
}
 8000580:	bf00      	nop
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr

0800058a <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800058a:	b480      	push	{r7}
 800058c:	b083      	sub	sp, #12
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
 8000592:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	0a1b      	lsrs	r3, r3, #8
 8000598:	b29a      	uxth	r2, r3
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	615a      	str	r2, [r3, #20]
}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr

080005a8 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 80005ac:	4b07      	ldr	r3, [pc, #28]	; (80005cc <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	4a06      	ldr	r2, [pc, #24]	; (80005cc <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 80005b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005b6:	6053      	str	r3, [r2, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 80005b8:	4b04      	ldr	r3, [pc, #16]	; (80005cc <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	4a03      	ldr	r2, [pc, #12]	; (80005cc <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 80005be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005c2:	6053      	str	r3, [r2, #4]
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr
 80005cc:	40010000 	.word	0x40010000

080005d0 <Init>:
uint16_t countSend;
//uint16_t lenght;
/****************************/
uint32_t array[LENGHT][2] = {{1,1},{1,0}};/*array for saving values*/

static inline void Init(void){
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
	countSend = 0x00U;
 80005d4:	4b09      	ldr	r3, [pc, #36]	; (80005fc <Init+0x2c>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	801a      	strh	r2, [r3, #0]
	new_time = 1;
 80005da:	4b09      	ldr	r3, [pc, #36]	; (8000600 <Init+0x30>)
 80005dc:	2201      	movs	r2, #1
 80005de:	601a      	str	r2, [r3, #0]
	new_state = 0x00U;
 80005e0:	4b08      	ldr	r3, [pc, #32]	; (8000604 <Init+0x34>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
	new_repeat = 0x00U;
 80005e6:	4b08      	ldr	r3, [pc, #32]	; (8000608 <Init+0x38>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	801a      	strh	r2, [r3, #0]
	new_prescale = 71U;
 80005ec:	4b07      	ldr	r3, [pc, #28]	; (800060c <Init+0x3c>)
 80005ee:	2247      	movs	r2, #71	; 0x47
 80005f0:	801a      	strh	r2, [r3, #0]
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bc80      	pop	{r7}
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	20000032 	.word	0x20000032
 8000600:	20000038 	.word	0x20000038
 8000604:	2000003c 	.word	0x2000003c
 8000608:	20000042 	.word	0x20000042
 800060c:	20000040 	.word	0x20000040

08000610 <Increment>:
static inline void Increment(void){
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
	if(countSend < LENGHT - 1){
 8000614:	4b08      	ldr	r3, [pc, #32]	; (8000638 <Increment+0x28>)
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d106      	bne.n	800062a <Increment+0x1a>
		++countSend;
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <Increment+0x28>)
 800061e:	881b      	ldrh	r3, [r3, #0]
 8000620:	3301      	adds	r3, #1
 8000622:	b29a      	uxth	r2, r3
 8000624:	4b04      	ldr	r3, [pc, #16]	; (8000638 <Increment+0x28>)
 8000626:	801a      	strh	r2, [r3, #0]
	}
	else{
		countSend = 0x00U;
	}
}
 8000628:	e002      	b.n	8000630 <Increment+0x20>
		countSend = 0x00U;
 800062a:	4b03      	ldr	r3, [pc, #12]	; (8000638 <Increment+0x28>)
 800062c:	2200      	movs	r2, #0
 800062e:	801a      	strh	r2, [r3, #0]
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr
 8000638:	20000032 	.word	0x20000032

0800063c <getNext>:
static void getNext(void){
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
	if(array[countSend][0] > 0x02U && array[countSend][0] < 0xFFFFU){
 8000640:	4b52      	ldr	r3, [pc, #328]	; (800078c <getNext+0x150>)
 8000642:	881b      	ldrh	r3, [r3, #0]
 8000644:	461a      	mov	r2, r3
 8000646:	4b52      	ldr	r3, [pc, #328]	; (8000790 <getNext+0x154>)
 8000648:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800064c:	2b02      	cmp	r3, #2
 800064e:	d923      	bls.n	8000698 <getNext+0x5c>
 8000650:	4b4e      	ldr	r3, [pc, #312]	; (800078c <getNext+0x150>)
 8000652:	881b      	ldrh	r3, [r3, #0]
 8000654:	461a      	mov	r2, r3
 8000656:	4b4e      	ldr	r3, [pc, #312]	; (8000790 <getNext+0x154>)
 8000658:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800065c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000660:	4293      	cmp	r3, r2
 8000662:	d819      	bhi.n	8000698 <getNext+0x5c>
		new_state = array[countSend][1];
 8000664:	4b49      	ldr	r3, [pc, #292]	; (800078c <getNext+0x150>)
 8000666:	881b      	ldrh	r3, [r3, #0]
 8000668:	4a49      	ldr	r2, [pc, #292]	; (8000790 <getNext+0x154>)
 800066a:	00db      	lsls	r3, r3, #3
 800066c:	4413      	add	r3, r2
 800066e:	685b      	ldr	r3, [r3, #4]
 8000670:	4a48      	ldr	r2, [pc, #288]	; (8000794 <getNext+0x158>)
 8000672:	6013      	str	r3, [r2, #0]
		new_time = array[countSend][0] - 1U;
 8000674:	4b45      	ldr	r3, [pc, #276]	; (800078c <getNext+0x150>)
 8000676:	881b      	ldrh	r3, [r3, #0]
 8000678:	461a      	mov	r2, r3
 800067a:	4b45      	ldr	r3, [pc, #276]	; (8000790 <getNext+0x154>)
 800067c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000680:	3b01      	subs	r3, #1
 8000682:	4a45      	ldr	r2, [pc, #276]	; (8000798 <getNext+0x15c>)
 8000684:	6013      	str	r3, [r2, #0]
		new_repeat = 0x00U;
 8000686:	4b45      	ldr	r3, [pc, #276]	; (800079c <getNext+0x160>)
 8000688:	2200      	movs	r2, #0
 800068a:	801a      	strh	r2, [r3, #0]
		new_prescale = 71U;
 800068c:	4b44      	ldr	r3, [pc, #272]	; (80007a0 <getNext+0x164>)
 800068e:	2247      	movs	r2, #71	; 0x47
 8000690:	801a      	strh	r2, [r3, #0]
		Increment();
 8000692:	f7ff ffbd 	bl	8000610 <Increment>
			new_prescale = 71U;
			new_state = array[countSend][1];
			Increment();
		}
	}
}
 8000696:	e076      	b.n	8000786 <getNext+0x14a>
	else if(array[countSend][0] < 2U){
 8000698:	4b3c      	ldr	r3, [pc, #240]	; (800078c <getNext+0x150>)
 800069a:	881b      	ldrh	r3, [r3, #0]
 800069c:	461a      	mov	r2, r3
 800069e:	4b3c      	ldr	r3, [pc, #240]	; (8000790 <getNext+0x154>)
 80006a0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d821      	bhi.n	80006ec <getNext+0xb0>
		if(array[countSend][0] == 0x00U){
 80006a8:	4b38      	ldr	r3, [pc, #224]	; (800078c <getNext+0x150>)
 80006aa:	881b      	ldrh	r3, [r3, #0]
 80006ac:	461a      	mov	r2, r3
 80006ae:	4b38      	ldr	r3, [pc, #224]	; (8000790 <getNext+0x154>)
 80006b0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d102      	bne.n	80006be <getNext+0x82>
			Increment();/*skip this value as invalid*/
 80006b8:	f7ff ffaa 	bl	8000610 <Increment>
}
 80006bc:	e063      	b.n	8000786 <getNext+0x14a>
		new_time = array[countSend][0] - 1U;
 80006be:	4b33      	ldr	r3, [pc, #204]	; (800078c <getNext+0x150>)
 80006c0:	881b      	ldrh	r3, [r3, #0]
 80006c2:	461a      	mov	r2, r3
 80006c4:	4b32      	ldr	r3, [pc, #200]	; (8000790 <getNext+0x154>)
 80006c6:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80006ca:	3b01      	subs	r3, #1
 80006cc:	4a32      	ldr	r2, [pc, #200]	; (8000798 <getNext+0x15c>)
 80006ce:	6013      	str	r3, [r2, #0]
		new_state = array[countSend][1];
 80006d0:	4b2e      	ldr	r3, [pc, #184]	; (800078c <getNext+0x150>)
 80006d2:	881b      	ldrh	r3, [r3, #0]
 80006d4:	4a2e      	ldr	r2, [pc, #184]	; (8000790 <getNext+0x154>)
 80006d6:	00db      	lsls	r3, r3, #3
 80006d8:	4413      	add	r3, r2
 80006da:	685b      	ldr	r3, [r3, #4]
 80006dc:	4a2d      	ldr	r2, [pc, #180]	; (8000794 <getNext+0x158>)
 80006de:	6013      	str	r3, [r2, #0]
		new_prescale = 35U;
 80006e0:	4b2f      	ldr	r3, [pc, #188]	; (80007a0 <getNext+0x164>)
 80006e2:	2223      	movs	r2, #35	; 0x23
 80006e4:	801a      	strh	r2, [r3, #0]
		Increment();
 80006e6:	f7ff ff93 	bl	8000610 <Increment>
}
 80006ea:	e04c      	b.n	8000786 <getNext+0x14a>
		if(!repeat){
 80006ec:	4b2d      	ldr	r3, [pc, #180]	; (80007a4 <getNext+0x168>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	f083 0301 	eor.w	r3, r3, #1
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d021      	beq.n	800073e <getNext+0x102>
			repeat = true;
 80006fa:	4b2a      	ldr	r3, [pc, #168]	; (80007a4 <getNext+0x168>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	701a      	strb	r2, [r3, #0]
			new_time = (0xFFFFU) - 1;
 8000700:	4b25      	ldr	r3, [pc, #148]	; (8000798 <getNext+0x15c>)
 8000702:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000706:	601a      	str	r2, [r3, #0]
			new_repeat = (array[countSend][0]/0xFFFFU) - 1U;
 8000708:	4b20      	ldr	r3, [pc, #128]	; (800078c <getNext+0x150>)
 800070a:	881b      	ldrh	r3, [r3, #0]
 800070c:	461a      	mov	r2, r3
 800070e:	4b20      	ldr	r3, [pc, #128]	; (8000790 <getNext+0x154>)
 8000710:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000714:	4a24      	ldr	r2, [pc, #144]	; (80007a8 <getNext+0x16c>)
 8000716:	fba2 2303 	umull	r2, r3, r2, r3
 800071a:	0bdb      	lsrs	r3, r3, #15
 800071c:	b29b      	uxth	r3, r3
 800071e:	3b01      	subs	r3, #1
 8000720:	b29a      	uxth	r2, r3
 8000722:	4b1e      	ldr	r3, [pc, #120]	; (800079c <getNext+0x160>)
 8000724:	801a      	strh	r2, [r3, #0]
			new_prescale = 71U;
 8000726:	4b1e      	ldr	r3, [pc, #120]	; (80007a0 <getNext+0x164>)
 8000728:	2247      	movs	r2, #71	; 0x47
 800072a:	801a      	strh	r2, [r3, #0]
			new_state = array[countSend][1];
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <getNext+0x150>)
 800072e:	881b      	ldrh	r3, [r3, #0]
 8000730:	4a17      	ldr	r2, [pc, #92]	; (8000790 <getNext+0x154>)
 8000732:	00db      	lsls	r3, r3, #3
 8000734:	4413      	add	r3, r2
 8000736:	685b      	ldr	r3, [r3, #4]
 8000738:	4a16      	ldr	r2, [pc, #88]	; (8000794 <getNext+0x158>)
 800073a:	6013      	str	r3, [r2, #0]
}
 800073c:	e023      	b.n	8000786 <getNext+0x14a>
			repeat = false;
 800073e:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <getNext+0x168>)
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
			new_time = (array[countSend][0]%0xFFFFU) - 1U;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <getNext+0x150>)
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	461a      	mov	r2, r3
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <getNext+0x154>)
 800074c:	f853 1032 	ldr.w	r1, [r3, r2, lsl #3]
 8000750:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <getNext+0x16c>)
 8000752:	fba3 2301 	umull	r2, r3, r3, r1
 8000756:	0bda      	lsrs	r2, r3, #15
 8000758:	4613      	mov	r3, r2
 800075a:	041b      	lsls	r3, r3, #16
 800075c:	1a9b      	subs	r3, r3, r2
 800075e:	1aca      	subs	r2, r1, r3
 8000760:	1e53      	subs	r3, r2, #1
 8000762:	4a0d      	ldr	r2, [pc, #52]	; (8000798 <getNext+0x15c>)
 8000764:	6013      	str	r3, [r2, #0]
			new_repeat = 0x00U;
 8000766:	4b0d      	ldr	r3, [pc, #52]	; (800079c <getNext+0x160>)
 8000768:	2200      	movs	r2, #0
 800076a:	801a      	strh	r2, [r3, #0]
			new_prescale = 71U;
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <getNext+0x164>)
 800076e:	2247      	movs	r2, #71	; 0x47
 8000770:	801a      	strh	r2, [r3, #0]
			new_state = array[countSend][1];
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <getNext+0x150>)
 8000774:	881b      	ldrh	r3, [r3, #0]
 8000776:	4a06      	ldr	r2, [pc, #24]	; (8000790 <getNext+0x154>)
 8000778:	00db      	lsls	r3, r3, #3
 800077a:	4413      	add	r3, r2
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	4a05      	ldr	r2, [pc, #20]	; (8000794 <getNext+0x158>)
 8000780:	6013      	str	r3, [r2, #0]
			Increment();
 8000782:	f7ff ff45 	bl	8000610 <Increment>
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000032 	.word	0x20000032
 8000790:	20000000 	.word	0x20000000
 8000794:	2000003c 	.word	0x2000003c
 8000798:	20000038 	.word	0x20000038
 800079c:	20000042 	.word	0x20000042
 80007a0:	20000040 	.word	0x20000040
 80007a4:	20000030 	.word	0x20000030
 80007a8:	80008001 	.word	0x80008001

080007ac <main>:
static void MX_TIM1_Init(void);
static void MX_TIM2_Init(void);
static void MX_NVIC_Init(void);

int main(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 80007b0:	2001      	movs	r0, #1
 80007b2:	f7ff fe41 	bl	8000438 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80007b6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80007ba:	f7ff fe25 	bl	8000408 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007be:	2003      	movs	r0, #3
 80007c0:	f7ff fcc4 	bl	800014c <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 80007c4:	f7ff fef0 	bl	80005a8 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c8:	f000 f824 	bl	8000814 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  Init();
 80007cc:	f7ff ff00 	bl	80005d0 <Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d0:	f000 f8e8 	bl	80009a4 <MX_GPIO_Init>
  MX_TIM1_Init();
 80007d4:	f000 f870 	bl	80008b8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80007d8:	f000 f8a2 	bl	8000920 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80007dc:	f000 f858 	bl	8000890 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM1);
 80007e0:	4809      	ldr	r0, [pc, #36]	; (8000808 <main+0x5c>)
 80007e2:	f7ff fe61 	bl	80004a8 <LL_TIM_EnableCounter>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(processed){
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <main+0x60>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d004      	beq.n	80007f8 <main+0x4c>
		  getNext();
 80007ee:	f7ff ff25 	bl	800063c <getNext>
		  processed = 0x00;
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <main+0x60>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	701a      	strb	r2, [r3, #0]
	  }
	  GPIOC->ODR^=(1U<<13);
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <main+0x64>)
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	4a04      	ldr	r2, [pc, #16]	; (8000810 <main+0x64>)
 80007fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000802:	60d3      	str	r3, [r2, #12]
	  if(processed){
 8000804:	e7ef      	b.n	80007e6 <main+0x3a>
 8000806:	bf00      	nop
 8000808:	40012c00 	.word	0x40012c00
 800080c:	20000034 	.word	0x20000034
 8000810:	40011000 	.word	0x40011000

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000818:	2002      	movs	r0, #2
 800081a:	f7ff fe25 	bl	8000468 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 800081e:	bf00      	nop
 8000820:	f7ff fe36 	bl	8000490 <LL_FLASH_GetLatency>
 8000824:	4603      	mov	r3, r0
 8000826:	2b02      	cmp	r3, #2
 8000828:	d1fa      	bne.n	8000820 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 800082a:	f7ff fd39 	bl	80002a0 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800082e:	bf00      	nop
 8000830:	f7ff fd44 	bl	80002bc <LL_RCC_HSE_IsReady>
 8000834:	4603      	mov	r3, r0
 8000836:	2b01      	cmp	r3, #1
 8000838:	d1fa      	bne.n	8000830 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 800083a:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 800083e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000842:	f7ff fdc9 	bl	80003d8 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000846:	f7ff fda7 	bl	8000398 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800084a:	bf00      	nop
 800084c:	f7ff fdb2 	bl	80003b4 <LL_RCC_PLL_IsReady>
 8000850:	4603      	mov	r3, r0
 8000852:	2b01      	cmp	r3, #1
 8000854:	d1fa      	bne.n	800084c <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000856:	2000      	movs	r0, #0
 8000858:	f7ff fd62 	bl	8000320 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 800085c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000860:	f7ff fd72 	bl	8000348 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000864:	2000      	movs	r0, #0
 8000866:	f7ff fd83 	bl	8000370 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800086a:	2002      	movs	r0, #2
 800086c:	f7ff fd38 	bl	80002e0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000870:	bf00      	nop
 8000872:	f7ff fd49 	bl	8000308 <LL_RCC_GetSysClkSource>
 8000876:	4603      	mov	r3, r0
 8000878:	2b08      	cmp	r3, #8
 800087a:	d1fa      	bne.n	8000872 <SystemClock_Config+0x5e>
  {

  }
  LL_Init1msTick(72000000);
 800087c:	4803      	ldr	r0, [pc, #12]	; (800088c <SystemClock_Config+0x78>)
 800087e:	f001 fa5f 	bl	8001d40 <LL_Init1msTick>
  LL_SetSystemCoreClock(72000000);
 8000882:	4802      	ldr	r0, [pc, #8]	; (800088c <SystemClock_Config+0x78>)
 8000884:	f001 fa8c 	bl	8001da0 <LL_SetSystemCoreClock>
}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}
 800088c:	044aa200 	.word	0x044aa200

08000890 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* TIM1_UP_IRQn interrupt configuration */
  NVIC_SetPriority(TIM1_UP_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000894:	f7ff fc7e 	bl	8000194 <__NVIC_GetPriorityGrouping>
 8000898:	4603      	mov	r3, r0
 800089a:	2200      	movs	r2, #0
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff fccc 	bl	800023c <NVIC_EncodePriority>
 80008a4:	4603      	mov	r3, r0
 80008a6:	4619      	mov	r1, r3
 80008a8:	2019      	movs	r0, #25
 80008aa:	f7ff fc9d 	bl	80001e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_IRQn);
 80008ae:	2019      	movs	r0, #25
 80008b0:	f7ff fc7e 	bl	80001b0 <__NVIC_EnableIRQ>
}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 80008cc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80008d0:	f7ff fdb2 	bl	8000438 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 71;
 80008d4:	2347      	movs	r3, #71	; 0x47
 80008d6:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80008d8:	2300      	movs	r3, #0
 80008da:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 10;
 80008dc:	230a      	movs	r3, #10
 80008de:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	4619      	mov	r1, r3
 80008ec:	480b      	ldr	r0, [pc, #44]	; (800091c <MX_TIM1_Init+0x64>)
 80008ee:	f000 fc40 	bl	8001172 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM1);
 80008f2:	480a      	ldr	r0, [pc, #40]	; (800091c <MX_TIM1_Init+0x64>)
 80008f4:	f7ff fde7 	bl	80004c6 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 80008f8:	2100      	movs	r1, #0
 80008fa:	4808      	ldr	r0, [pc, #32]	; (800091c <MX_TIM1_Init+0x64>)
 80008fc:	f7ff fdf2 	bl	80004e4 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8000900:	2100      	movs	r1, #0
 8000902:	4806      	ldr	r0, [pc, #24]	; (800091c <MX_TIM1_Init+0x64>)
 8000904:	f7ff fe02 	bl	800050c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8000908:	4804      	ldr	r0, [pc, #16]	; (800091c <MX_TIM1_Init+0x64>)
 800090a:	f7ff fe11 	bl	8000530 <LL_TIM_DisableMasterSlaveMode>
  LL_TIM_EnableIT_UPDATE(TIM1);
 800090e:	4803      	ldr	r0, [pc, #12]	; (800091c <MX_TIM1_Init+0x64>)
 8000910:	f7ff fe1d 	bl	800054e <LL_TIM_EnableIT_UPDATE>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	3718      	adds	r7, #24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40012c00 	.word	0x40012c00

08000920 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000934:	2001      	movs	r0, #1
 8000936:	f7ff fd67 	bl	8000408 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 800093a:	f7ff fc2b 	bl	8000194 <__NVIC_GetPriorityGrouping>
 800093e:	4603      	mov	r3, r0
 8000940:	2200      	movs	r2, #0
 8000942:	2101      	movs	r1, #1
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff fc79 	bl	800023c <NVIC_EncodePriority>
 800094a:	4603      	mov	r3, r0
 800094c:	4619      	mov	r1, r3
 800094e:	201c      	movs	r0, #28
 8000950:	f7ff fc4a 	bl	80001e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8000954:	201c      	movs	r0, #28
 8000956:	f7ff fc2b 	bl	80001b0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 71;
 800095a:	2347      	movs	r3, #71	; 0x47
 800095c:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800095e:	2300      	movs	r3, #0
 8000960:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 10000;
 8000962:	f242 7310 	movw	r3, #10000	; 0x2710
 8000966:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	4619      	mov	r1, r3
 8000970:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000974:	f000 fbfd 	bl	8001172 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM2);
 8000978:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800097c:	f7ff fda3 	bl	80004c6 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000980:	2100      	movs	r1, #0
 8000982:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000986:	f7ff fdad 	bl	80004e4 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 800098a:	2100      	movs	r1, #0
 800098c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000990:	f7ff fdbc 	bl	800050c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8000994:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000998:	f7ff fdca 	bl	8000530 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	3718      	adds	r7, #24
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 80009b8:	2010      	movs	r0, #16
 80009ba:	f7ff fd3d 	bl	8000438 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 80009be:	2020      	movs	r0, #32
 80009c0:	f7ff fd3a 	bl	8000438 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80009c4:	2004      	movs	r0, #4
 80009c6:	f7ff fd37 	bl	8000438 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(Led_GPIO_Port, Led_Pin);
 80009ca:	4913      	ldr	r1, [pc, #76]	; (8000a18 <MX_GPIO_Init+0x74>)
 80009cc:	4813      	ldr	r0, [pc, #76]	; (8000a1c <MX_GPIO_Init+0x78>)
 80009ce:	f7ff fddc 	bl	800058a <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(Out_GPIO_Port, Out_Pin);
 80009d2:	4913      	ldr	r1, [pc, #76]	; (8000a20 <MX_GPIO_Init+0x7c>)
 80009d4:	4813      	ldr	r0, [pc, #76]	; (8000a24 <MX_GPIO_Init+0x80>)
 80009d6:	f7ff fdc9 	bl	800056c <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = Led_Pin;
 80009da:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <MX_GPIO_Init+0x74>)
 80009dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80009de:	2301      	movs	r3, #1
 80009e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80009e2:	2302      	movs	r3, #2
 80009e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	4619      	mov	r1, r3
 80009ee:	480b      	ldr	r0, [pc, #44]	; (8000a1c <MX_GPIO_Init+0x78>)
 80009f0:	f000 fa24 	bl	8000e3c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Out_Pin;
 80009f4:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <MX_GPIO_Init+0x7c>)
 80009f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80009f8:	2301      	movs	r3, #1
 80009fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80009fc:	2303      	movs	r3, #3
 80009fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Out_GPIO_Port, &GPIO_InitStruct);
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	4619      	mov	r1, r3
 8000a08:	4806      	ldr	r0, [pc, #24]	; (8000a24 <MX_GPIO_Init+0x80>)
 8000a0a:	f000 fa17 	bl	8000e3c <LL_GPIO_Init>

}
 8000a0e:	bf00      	nop
 8000a10:	3718      	adds	r7, #24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	04200020 	.word	0x04200020
 8000a1c:	40011000 	.word	0x40011000
 8000a20:	04010001 	.word	0x04010001
 8000a24:	40010800 	.word	0x40010800

08000a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <Error_Handler+0x6>

08000a30 <LL_TIM_ClearFlag_UPDATE>:
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f06f 0201 	mvn.w	r2, #1
 8000a3e:	611a      	str	r2, [r3, #16]
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr

08000a4a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000a4e:	e7fe      	b.n	8000a4e <NMI_Handler+0x4>

08000a50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <HardFault_Handler+0x4>

08000a56 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <MemManage_Handler+0x4>

08000a5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <BusFault_Handler+0x4>

08000a62 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <UsageFault_Handler+0x4>

08000a68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr

08000a74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr

08000a80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr

08000a8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr

08000a98 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
	if(new_state == 0x01U){/*set new state*/
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <TIM1_UP_IRQHandler+0x44>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d104      	bne.n	8000aae <TIM1_UP_IRQHandler+0x16>
		GPIOA->ODR = (1U<<8);
 8000aa4:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <TIM1_UP_IRQHandler+0x48>)
 8000aa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000aaa:	60da      	str	r2, [r3, #12]
 8000aac:	e002      	b.n	8000ab4 <TIM1_UP_IRQHandler+0x1c>
	}
	else{
		GPIOA->ODR = 0x00U;
 8000aae:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <TIM1_UP_IRQHandler+0x48>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	60da      	str	r2, [r3, #12]
	}
	TIM1->ARR = new_time;
 8000ab4:	4a0b      	ldr	r2, [pc, #44]	; (8000ae4 <TIM1_UP_IRQHandler+0x4c>)
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <TIM1_UP_IRQHandler+0x50>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM1->RCR = new_repeat;
 8000abc:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <TIM1_UP_IRQHandler+0x54>)
 8000abe:	881a      	ldrh	r2, [r3, #0]
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <TIM1_UP_IRQHandler+0x4c>)
 8000ac2:	631a      	str	r2, [r3, #48]	; 0x30
	TIM1->PSC = new_prescale;
 8000ac4:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <TIM1_UP_IRQHandler+0x58>)
 8000ac6:	881a      	ldrh	r2, [r3, #0]
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <TIM1_UP_IRQHandler+0x4c>)
 8000aca:	629a      	str	r2, [r3, #40]	; 0x28
	processed = true;
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <TIM1_UP_IRQHandler+0x5c>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	701a      	strb	r2, [r3, #0]
	LL_TIM_ClearFlag_UPDATE(TIM1);
 8000ad2:	4804      	ldr	r0, [pc, #16]	; (8000ae4 <TIM1_UP_IRQHandler+0x4c>)
 8000ad4:	f7ff ffac 	bl	8000a30 <LL_TIM_ClearFlag_UPDATE>
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	2000003c 	.word	0x2000003c
 8000ae0:	40010800 	.word	0x40010800
 8000ae4:	40012c00 	.word	0x40012c00
 8000ae8:	20000038 	.word	0x20000038
 8000aec:	20000042 	.word	0x20000042
 8000af0:	20000040 	.word	0x20000040
 8000af4:	20000034 	.word	0x20000034

08000af8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
/*NOTE: ADD INDICATE WORKING*/
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr

08000b04 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr

08000b10 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000b22:	4b2c      	ldr	r3, [pc, #176]	; (8000bd4 <SystemCoreClockUpdate+0xc4>)
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f003 030c 	and.w	r3, r3, #12
 8000b2a:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	2b04      	cmp	r3, #4
 8000b30:	d007      	beq.n	8000b42 <SystemCoreClockUpdate+0x32>
 8000b32:	2b08      	cmp	r3, #8
 8000b34:	d009      	beq.n	8000b4a <SystemCoreClockUpdate+0x3a>
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d133      	bne.n	8000ba2 <SystemCoreClockUpdate+0x92>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000b3a:	4b27      	ldr	r3, [pc, #156]	; (8000bd8 <SystemCoreClockUpdate+0xc8>)
 8000b3c:	4a27      	ldr	r2, [pc, #156]	; (8000bdc <SystemCoreClockUpdate+0xcc>)
 8000b3e:	601a      	str	r2, [r3, #0]
      break;
 8000b40:	e033      	b.n	8000baa <SystemCoreClockUpdate+0x9a>
    case 0x04U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000b42:	4b25      	ldr	r3, [pc, #148]	; (8000bd8 <SystemCoreClockUpdate+0xc8>)
 8000b44:	4a25      	ldr	r2, [pc, #148]	; (8000bdc <SystemCoreClockUpdate+0xcc>)
 8000b46:	601a      	str	r2, [r3, #0]
      break;
 8000b48:	e02f      	b.n	8000baa <SystemCoreClockUpdate+0x9a>
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000b4a:	4b22      	ldr	r3, [pc, #136]	; (8000bd4 <SystemCoreClockUpdate+0xc4>)
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000b52:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000b54:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <SystemCoreClockUpdate+0xc4>)
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b5c:	607b      	str	r3, [r7, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18U) + 2U;
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	0c9b      	lsrs	r3, r3, #18
 8000b62:	3302      	adds	r3, #2
 8000b64:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00U)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d106      	bne.n	8000b7a <SystemCoreClockUpdate+0x6a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	4a1c      	ldr	r2, [pc, #112]	; (8000be0 <SystemCoreClockUpdate+0xd0>)
 8000b70:	fb02 f303 	mul.w	r3, r2, r3
 8000b74:	4a18      	ldr	r2, [pc, #96]	; (8000bd8 <SystemCoreClockUpdate+0xc8>)
 8000b76:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F105xC */ 
      break;
 8000b78:	e017      	b.n	8000baa <SystemCoreClockUpdate+0x9a>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 8000b7a:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <SystemCoreClockUpdate+0xc4>)
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d006      	beq.n	8000b94 <SystemCoreClockUpdate+0x84>
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	4a15      	ldr	r2, [pc, #84]	; (8000be0 <SystemCoreClockUpdate+0xd0>)
 8000b8a:	fb02 f303 	mul.w	r3, r2, r3
 8000b8e:	4a12      	ldr	r2, [pc, #72]	; (8000bd8 <SystemCoreClockUpdate+0xc8>)
 8000b90:	6013      	str	r3, [r2, #0]
      break;
 8000b92:	e00a      	b.n	8000baa <SystemCoreClockUpdate+0x9a>
          SystemCoreClock = HSE_VALUE * pllmull;
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	4a11      	ldr	r2, [pc, #68]	; (8000bdc <SystemCoreClockUpdate+0xcc>)
 8000b98:	fb02 f303 	mul.w	r3, r2, r3
 8000b9c:	4a0e      	ldr	r2, [pc, #56]	; (8000bd8 <SystemCoreClockUpdate+0xc8>)
 8000b9e:	6013      	str	r3, [r2, #0]
      break;
 8000ba0:	e003      	b.n	8000baa <SystemCoreClockUpdate+0x9a>

    default:
      SystemCoreClock = HSI_VALUE;
 8000ba2:	4b0d      	ldr	r3, [pc, #52]	; (8000bd8 <SystemCoreClockUpdate+0xc8>)
 8000ba4:	4a0d      	ldr	r2, [pc, #52]	; (8000bdc <SystemCoreClockUpdate+0xcc>)
 8000ba6:	601a      	str	r2, [r3, #0]
      break;
 8000ba8:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000baa:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <SystemCoreClockUpdate+0xc4>)
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	091b      	lsrs	r3, r3, #4
 8000bb0:	f003 030f 	and.w	r3, r3, #15
 8000bb4:	4a0b      	ldr	r2, [pc, #44]	; (8000be4 <SystemCoreClockUpdate+0xd4>)
 8000bb6:	5cd3      	ldrb	r3, [r2, r3]
 8000bb8:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8000bba:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <SystemCoreClockUpdate+0xc8>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8000bc4:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <SystemCoreClockUpdate+0xc8>)
 8000bc6:	6013      	str	r3, [r2, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc80      	pop	{r7}
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	20000010 	.word	0x20000010
 8000bdc:	007a1200 	.word	0x007a1200
 8000be0:	003d0900 	.word	0x003d0900
 8000be4:	08002108 	.word	0x08002108

08000be8 <LL_GPIO_SetPinMode>:
{
 8000be8:	b490      	push	{r4, r7}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	0e1b      	lsrs	r3, r3, #24
 8000bfc:	4413      	add	r3, r2
 8000bfe:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8000c00:	6822      	ldr	r2, [r4, #0]
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	fa93 f3a3 	rbit	r3, r3
 8000c0c:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	fab3 f383 	clz	r3, r3
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	210f      	movs	r1, #15
 8000c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	401a      	ands	r2, r3
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	fa93 f3a3 	rbit	r3, r3
 8000c2c:	61bb      	str	r3, [r7, #24]
  return result;
 8000c2e:	69bb      	ldr	r3, [r7, #24]
 8000c30:	fab3 f383 	clz	r3, r3
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	6879      	ldr	r1, [r7, #4]
 8000c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	6023      	str	r3, [r4, #0]
}
 8000c42:	bf00      	nop
 8000c44:	3720      	adds	r7, #32
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc90      	pop	{r4, r7}
 8000c4a:	4770      	bx	lr

08000c4c <LL_GPIO_SetPinSpeed>:
{
 8000c4c:	b490      	push	{r4, r7}
 8000c4e:	b088      	sub	sp, #32
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	0e1b      	lsrs	r3, r3, #24
 8000c60:	4413      	add	r3, r2
 8000c62:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8000c64:	6822      	ldr	r2, [r4, #0]
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	fa93 f3a3 	rbit	r3, r3
 8000c70:	613b      	str	r3, [r7, #16]
  return result;
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	fab3 f383 	clz	r3, r3
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	2103      	movs	r1, #3
 8000c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c82:	43db      	mvns	r3, r3
 8000c84:	401a      	ands	r2, r3
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	fa93 f3a3 	rbit	r3, r3
 8000c90:	61bb      	str	r3, [r7, #24]
  return result;
 8000c92:	69bb      	ldr	r3, [r7, #24]
 8000c94:	fab3 f383 	clz	r3, r3
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	6879      	ldr	r1, [r7, #4]
 8000c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	6023      	str	r3, [r4, #0]
}
 8000ca6:	bf00      	nop
 8000ca8:	3720      	adds	r7, #32
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc90      	pop	{r4, r7}
 8000cae:	4770      	bx	lr

08000cb0 <LL_GPIO_SetPinOutputType>:
{
 8000cb0:	b490      	push	{r4, r7}
 8000cb2:	b088      	sub	sp, #32
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	0e1b      	lsrs	r3, r3, #24
 8000cc4:	4413      	add	r3, r2
 8000cc6:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8000cc8:	6822      	ldr	r2, [r4, #0]
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	fa93 f3a3 	rbit	r3, r3
 8000cd4:	613b      	str	r3, [r7, #16]
  return result;
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	fab3 f383 	clz	r3, r3
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	2104      	movs	r1, #4
 8000ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	401a      	ands	r2, r3
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	fa93 f3a3 	rbit	r3, r3
 8000cf4:	61bb      	str	r3, [r7, #24]
  return result;
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	fab3 f383 	clz	r3, r3
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	6879      	ldr	r1, [r7, #4]
 8000d02:	fa01 f303 	lsl.w	r3, r1, r3
 8000d06:	4313      	orrs	r3, r2
 8000d08:	6023      	str	r3, [r4, #0]
}
 8000d0a:	bf00      	nop
 8000d0c:	3720      	adds	r7, #32
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc90      	pop	{r4, r7}
 8000d12:	4770      	bx	lr

08000d14 <LL_GPIO_SetPinPull>:
{
 8000d14:	b480      	push	{r7}
 8000d16:	b087      	sub	sp, #28
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	68da      	ldr	r2, [r3, #12]
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	0a1b      	lsrs	r3, r3, #8
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	0a1b      	lsrs	r3, r3, #8
 8000d30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	fa93 f3a3 	rbit	r3, r3
 8000d38:	613b      	str	r3, [r7, #16]
  return result;
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	fab3 f383 	clz	r3, r3
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	4619      	mov	r1, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	408b      	lsls	r3, r1
 8000d48:	431a      	orrs	r2, r3
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	60da      	str	r2, [r3, #12]
}
 8000d4e:	bf00      	nop
 8000d50:	371c      	adds	r7, #28
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr

08000d58 <LL_APB2_GRP1_ForceReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <LL_APB2_GRP1_ForceReset+0x20>)
 8000d62:	68da      	ldr	r2, [r3, #12]
 8000d64:	4904      	ldr	r1, [pc, #16]	; (8000d78 <LL_APB2_GRP1_ForceReset+0x20>)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	60cb      	str	r3, [r1, #12]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	40021000 	.word	0x40021000

08000d7c <LL_APB2_GRP1_ReleaseReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <LL_APB2_GRP1_ReleaseReset+0x20>)
 8000d86:	68da      	ldr	r2, [r3, #12]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	4903      	ldr	r1, [pc, #12]	; (8000d9c <LL_APB2_GRP1_ReleaseReset+0x20>)
 8000d8e:	4013      	ands	r3, r2
 8000d90:	60cb      	str	r3, [r1, #12]
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr
 8000d9c:	40021000 	.word	0x40021000

08000da0 <LL_GPIO_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are de-initialized
  *          - ERROR:   Wrong GPIO Port
  */
ErrorStatus LL_GPIO_DeInit(GPIO_TypeDef *GPIOx)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8000da8:	2300      	movs	r3, #0
 8000daa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Force and Release reset on clock of GPIOx Port */
  if (GPIOx == GPIOA)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a1e      	ldr	r2, [pc, #120]	; (8000e28 <LL_GPIO_DeInit+0x88>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d106      	bne.n	8000dc2 <LL_GPIO_DeInit+0x22>
  {
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_GPIOA);
 8000db4:	2004      	movs	r0, #4
 8000db6:	f7ff ffcf 	bl	8000d58 <LL_APB2_GRP1_ForceReset>
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_GPIOA);
 8000dba:	2004      	movs	r0, #4
 8000dbc:	f7ff ffde 	bl	8000d7c <LL_APB2_GRP1_ReleaseReset>
 8000dc0:	e02d      	b.n	8000e1e <LL_GPIO_DeInit+0x7e>
  }
  else if (GPIOx == GPIOB)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a19      	ldr	r2, [pc, #100]	; (8000e2c <LL_GPIO_DeInit+0x8c>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d106      	bne.n	8000dd8 <LL_GPIO_DeInit+0x38>
  {
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_GPIOB);
 8000dca:	2008      	movs	r0, #8
 8000dcc:	f7ff ffc4 	bl	8000d58 <LL_APB2_GRP1_ForceReset>
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_GPIOB);
 8000dd0:	2008      	movs	r0, #8
 8000dd2:	f7ff ffd3 	bl	8000d7c <LL_APB2_GRP1_ReleaseReset>
 8000dd6:	e022      	b.n	8000e1e <LL_GPIO_DeInit+0x7e>
  }
  else if (GPIOx == GPIOC)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a15      	ldr	r2, [pc, #84]	; (8000e30 <LL_GPIO_DeInit+0x90>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d106      	bne.n	8000dee <LL_GPIO_DeInit+0x4e>
  {
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_GPIOC);
 8000de0:	2010      	movs	r0, #16
 8000de2:	f7ff ffb9 	bl	8000d58 <LL_APB2_GRP1_ForceReset>
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_GPIOC);
 8000de6:	2010      	movs	r0, #16
 8000de8:	f7ff ffc8 	bl	8000d7c <LL_APB2_GRP1_ReleaseReset>
 8000dec:	e017      	b.n	8000e1e <LL_GPIO_DeInit+0x7e>
  }
  else if (GPIOx == GPIOD)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a10      	ldr	r2, [pc, #64]	; (8000e34 <LL_GPIO_DeInit+0x94>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d106      	bne.n	8000e04 <LL_GPIO_DeInit+0x64>
  {
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_GPIOD);
 8000df6:	2020      	movs	r0, #32
 8000df8:	f7ff ffae 	bl	8000d58 <LL_APB2_GRP1_ForceReset>
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_GPIOD);
 8000dfc:	2020      	movs	r0, #32
 8000dfe:	f7ff ffbd 	bl	8000d7c <LL_APB2_GRP1_ReleaseReset>
 8000e02:	e00c      	b.n	8000e1e <LL_GPIO_DeInit+0x7e>
  }
#if defined(GPIOE)
  else if (GPIOx == GPIOE)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a0c      	ldr	r2, [pc, #48]	; (8000e38 <LL_GPIO_DeInit+0x98>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d106      	bne.n	8000e1a <LL_GPIO_DeInit+0x7a>
  {
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_GPIOE);
 8000e0c:	2040      	movs	r0, #64	; 0x40
 8000e0e:	f7ff ffa3 	bl	8000d58 <LL_APB2_GRP1_ForceReset>
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_GPIOE);
 8000e12:	2040      	movs	r0, #64	; 0x40
 8000e14:	f7ff ffb2 	bl	8000d7c <LL_APB2_GRP1_ReleaseReset>
 8000e18:	e001      	b.n	8000e1e <LL_GPIO_DeInit+0x7e>
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_GPIOG);
  }
#endif
  else
  {
    status = ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3710      	adds	r7, #16
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40010800 	.word	0x40010800
 8000e2c:	40010c00 	.word	0x40010c00
 8000e30:	40011000 	.word	0x40011000
 8000e34:	40011400 	.word	0x40011400
 8000e38:	40011800 	.word	0x40011800

08000e3c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b088      	sub	sp, #32
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	021b      	lsls	r3, r3, #8
 8000e4c:	0c1b      	lsrs	r3, r3, #16
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	fa93 f3a3 	rbit	r3, r3
 8000e5a:	60fb      	str	r3, [r7, #12]
  return result;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8000e5e:	fab3 f383 	clz	r3, r3
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8000e66:	e040      	b.n	8000eea <LL_GPIO_Init+0xae>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	409a      	lsls	r2, r3
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	4013      	ands	r3, r2
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d036      	beq.n	8000ee4 <LL_GPIO_Init+0xa8>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	2b07      	cmp	r3, #7
 8000e7a:	d806      	bhi.n	8000e8a <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8000e7c:	f240 1201 	movw	r2, #257	; 0x101
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	61bb      	str	r3, [r7, #24]
 8000e88:	e008      	b.n	8000e9c <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3b08      	subs	r3, #8
 8000e8e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e9a:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	691b      	ldr	r3, [r3, #16]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	69b9      	ldr	r1, [r7, #24]
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ff35 	bl	8000d14 <LL_GPIO_SetPinPull>

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	69b9      	ldr	r1, [r7, #24]
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff fe98 	bl	8000be8 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d003      	beq.n	8000ec8 <LL_GPIO_Init+0x8c>
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	2b09      	cmp	r3, #9
 8000ec6:	d10d      	bne.n	8000ee4 <LL_GPIO_Init+0xa8>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	69b9      	ldr	r1, [r7, #24]
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f7ff febb 	bl	8000c4c <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	461a      	mov	r2, r3
 8000edc:	69b9      	ldr	r1, [r7, #24]
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff fee6 	bl	8000cb0 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8000eea:	697a      	ldr	r2, [r7, #20]
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d1b8      	bne.n	8000e68 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3720      	adds	r7, #32
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <LL_GPIO_StructInit>:
  *                          whose fields will be set to default values.
  * @retval None
  */

void LL_GPIO_StructInit(LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->Pin        = LL_GPIO_PIN_ALL;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f06f 427b 	mvn.w	r2, #4211081216	; 0xfb000000
 8000f0e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->Mode       = LL_GPIO_MODE_FLOATING;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2204      	movs	r2, #4
 8000f14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct->Speed      = LL_GPIO_SPEED_FREQ_LOW;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2202      	movs	r2, #2
 8000f1a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct->OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2204      	movs	r2, #4
 8000f20:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct->Pull       = LL_GPIO_PULL_DOWN;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop

08000f34 <LL_TIM_SetPrescaler>:
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	683a      	ldr	r2, [r7, #0]
 8000f42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr

08000f4e <LL_TIM_SetAutoReload>:
{
 8000f4e:	b480      	push	{r7}
 8000f50:	b083      	sub	sp, #12
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
 8000f56:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr

08000f68 <LL_TIM_SetRepetitionCounter>:
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	683a      	ldr	r2, [r7, #0]
 8000f76:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr

08000f82 <LL_TIM_OC_SetCompareCH1>:
{
 8000f82:	b480      	push	{r7}
 8000f84:	b083      	sub	sp, #12
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
 8000f8a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	683a      	ldr	r2, [r7, #0]
 8000f90:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr

08000f9c <LL_TIM_OC_SetCompareCH2>:
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	683a      	ldr	r2, [r7, #0]
 8000faa:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr

08000fb6 <LL_TIM_OC_SetCompareCH3>:
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
 8000fbe:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	683a      	ldr	r2, [r7, #0]
 8000fc4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr

08000fd0 <LL_TIM_OC_SetCompareCH4>:
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	683a      	ldr	r2, [r7, #0]
 8000fde:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr

08000fea <LL_TIM_SetEncoderMode>:
{
 8000fea:	b480      	push	{r7}
 8000fec:	b083      	sub	sp, #12
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
 8000ff2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	f023 0207 	bic.w	r2, r3, #7
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	431a      	orrs	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	609a      	str	r2, [r3, #8]
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	bc80      	pop	{r7}
 800100c:	4770      	bx	lr

0800100e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	f043 0201 	orr.w	r2, r3, #1
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	615a      	str	r2, [r3, #20]
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr

0800102c <LL_APB1_GRP1_ForceReset>:
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR, Periphs);
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <LL_APB1_GRP1_ForceReset+0x20>)
 8001036:	691a      	ldr	r2, [r3, #16]
 8001038:	4904      	ldr	r1, [pc, #16]	; (800104c <LL_APB1_GRP1_ForceReset+0x20>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4313      	orrs	r3, r2
 800103e:	610b      	str	r3, [r1, #16]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	40021000 	.word	0x40021000

08001050 <LL_APB1_GRP1_ReleaseReset>:
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR, Periphs);
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <LL_APB1_GRP1_ReleaseReset+0x20>)
 800105a:	691a      	ldr	r2, [r3, #16]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	43db      	mvns	r3, r3
 8001060:	4903      	ldr	r1, [pc, #12]	; (8001070 <LL_APB1_GRP1_ReleaseReset+0x20>)
 8001062:	4013      	ands	r3, r2
 8001064:	610b      	str	r3, [r1, #16]
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr
 8001070:	40021000 	.word	0x40021000

08001074 <LL_APB2_GRP1_ForceReset>:
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <LL_APB2_GRP1_ForceReset+0x20>)
 800107e:	68da      	ldr	r2, [r3, #12]
 8001080:	4904      	ldr	r1, [pc, #16]	; (8001094 <LL_APB2_GRP1_ForceReset+0x20>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4313      	orrs	r3, r2
 8001086:	60cb      	str	r3, [r1, #12]
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40021000 	.word	0x40021000

08001098 <LL_APB2_GRP1_ReleaseReset>:
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80010a0:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <LL_APB2_GRP1_ReleaseReset+0x20>)
 80010a2:	68da      	ldr	r2, [r3, #12]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	43db      	mvns	r3, r3
 80010a8:	4903      	ldr	r1, [pc, #12]	; (80010b8 <LL_APB2_GRP1_ReleaseReset+0x20>)
 80010aa:	4013      	ands	r3, r2
 80010ac:	60cb      	str	r3, [r1, #12]
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr
 80010b8:	40021000 	.word	0x40021000

080010bc <LL_TIM_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: invalid TIMx instance
  */
ErrorStatus LL_TIM_DeInit(TIM_TypeDef *TIMx)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  ErrorStatus result = SUCCESS;
 80010c4:	2300      	movs	r3, #0
 80010c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));

  if (TIMx == TIM2)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010ce:	d106      	bne.n	80010de <LL_TIM_DeInit+0x22>
  {
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_TIM2);
 80010d0:	2001      	movs	r0, #1
 80010d2:	f7ff ffab 	bl	800102c <LL_APB1_GRP1_ForceReset>
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_TIM2);
 80010d6:	2001      	movs	r0, #1
 80010d8:	f7ff ffba 	bl	8001050 <LL_APB1_GRP1_ReleaseReset>
 80010dc:	e024      	b.n	8001128 <LL_TIM_DeInit+0x6c>
  }
#if defined(TIM1)
  else if (TIMx == TIM1)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a14      	ldr	r2, [pc, #80]	; (8001134 <LL_TIM_DeInit+0x78>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d108      	bne.n	80010f8 <LL_TIM_DeInit+0x3c>
  {
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_TIM1);
 80010e6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80010ea:	f7ff ffc3 	bl	8001074 <LL_APB2_GRP1_ForceReset>
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_TIM1);
 80010ee:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80010f2:	f7ff ffd1 	bl	8001098 <LL_APB2_GRP1_ReleaseReset>
 80010f6:	e017      	b.n	8001128 <LL_TIM_DeInit+0x6c>
  }
#endif
#if defined(TIM3)
  else if (TIMx == TIM3)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a0f      	ldr	r2, [pc, #60]	; (8001138 <LL_TIM_DeInit+0x7c>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d106      	bne.n	800110e <LL_TIM_DeInit+0x52>
  {
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_TIM3);
 8001100:	2002      	movs	r0, #2
 8001102:	f7ff ff93 	bl	800102c <LL_APB1_GRP1_ForceReset>
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_TIM3);
 8001106:	2002      	movs	r0, #2
 8001108:	f7ff ffa2 	bl	8001050 <LL_APB1_GRP1_ReleaseReset>
 800110c:	e00c      	b.n	8001128 <LL_TIM_DeInit+0x6c>
  }
#endif
#if defined(TIM4)
  else if (TIMx == TIM4)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a0a      	ldr	r2, [pc, #40]	; (800113c <LL_TIM_DeInit+0x80>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d106      	bne.n	8001124 <LL_TIM_DeInit+0x68>
  {
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_TIM4);
 8001116:	2004      	movs	r0, #4
 8001118:	f7ff ff88 	bl	800102c <LL_APB1_GRP1_ForceReset>
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_TIM4);
 800111c:	2004      	movs	r0, #4
 800111e:	f7ff ff97 	bl	8001050 <LL_APB1_GRP1_ReleaseReset>
 8001122:	e001      	b.n	8001128 <LL_TIM_DeInit+0x6c>
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_TIM17);
  }
#endif
  else
  {
    result = ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	73fb      	strb	r3, [r7, #15]
  }

  return result;
 8001128:	7bfb      	ldrb	r3, [r7, #15]
}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40012c00 	.word	0x40012c00
 8001138:	40000400 	.word	0x40000400
 800113c:	40000800 	.word	0x40000800

08001140 <LL_TIM_StructInit>:
  *         to their default values.
  * @param  TIM_InitStruct pointer to a @ref LL_TIM_InitTypeDef structure (time base unit configuration data structure)
  * @retval None
  */
void LL_TIM_StructInit(LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_InitStruct->Prescaler         = (uint16_t)0x0000;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2200      	movs	r2, #0
 800114c:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct->CounterMode       = LL_TIM_COUNTERMODE_UP;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	605a      	str	r2, [r3, #4]
  TIM_InitStruct->Autoreload        = 0xFFFFFFFFU;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f04f 32ff 	mov.w	r2, #4294967295
 800115a:	609a      	str	r2, [r3, #8]
  TIM_InitStruct->ClockDivision     = LL_TIM_CLOCKDIVISION_DIV1;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	60da      	str	r2, [r3, #12]
  TIM_InitStruct->RepetitionCounter = 0x00000000U;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr

08001172 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b084      	sub	sp, #16
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a26      	ldr	r2, [pc, #152]	; (8001220 <LL_TIM_Init+0xae>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d00b      	beq.n	80011a2 <LL_TIM_Init+0x30>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001190:	d007      	beq.n	80011a2 <LL_TIM_Init+0x30>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a23      	ldr	r2, [pc, #140]	; (8001224 <LL_TIM_Init+0xb2>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d003      	beq.n	80011a2 <LL_TIM_Init+0x30>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a22      	ldr	r2, [pc, #136]	; (8001228 <LL_TIM_Init+0xb6>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d106      	bne.n	80011b0 <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4a1b      	ldr	r2, [pc, #108]	; (8001220 <LL_TIM_Init+0xae>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d00b      	beq.n	80011d0 <LL_TIM_Init+0x5e>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011be:	d007      	beq.n	80011d0 <LL_TIM_Init+0x5e>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a18      	ldr	r2, [pc, #96]	; (8001224 <LL_TIM_Init+0xb2>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d003      	beq.n	80011d0 <LL_TIM_Init+0x5e>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a17      	ldr	r2, [pc, #92]	; (8001228 <LL_TIM_Init+0xb6>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d106      	bne.n	80011de <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	4313      	orrs	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68fa      	ldr	r2, [r7, #12]
 80011e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	4619      	mov	r1, r3
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff feaf 	bl	8000f4e <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	4619      	mov	r1, r3
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff fe9c 	bl	8000f34 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a08      	ldr	r2, [pc, #32]	; (8001220 <LL_TIM_Init+0xae>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d105      	bne.n	8001210 <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	691b      	ldr	r3, [r3, #16]
 8001208:	4619      	mov	r1, r3
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff feac 	bl	8000f68 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff fefc 	bl	800100e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001216:	2300      	movs	r3, #0
}
 8001218:	4618      	mov	r0, r3
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40012c00 	.word	0x40012c00
 8001224:	40000400 	.word	0x40000400
 8001228:	40000800 	.word	0x40000800

0800122c <LL_TIM_OC_StructInit>:
  *         structure to their default values.
  * @param  TIM_OC_InitStruct pointer to a @ref LL_TIM_OC_InitTypeDef structure (the output channel configuration data structure)
  * @retval None
  */
void LL_TIM_OC_StructInit(LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OC_InitStruct->OCMode       = LL_TIM_OCMODE_FROZEN;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct->OCState      = LL_TIM_OCSTATE_DISABLE;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitStruct->OCNState     = LL_TIM_OCSTATE_DISABLE;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  TIM_OC_InitStruct->CompareValue = 0x00000000U;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitStruct->OCPolarity   = LL_TIM_OCPOLARITY_HIGH;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	611a      	str	r2, [r3, #16]
  TIM_OC_InitStruct->OCNPolarity  = LL_TIM_OCPOLARITY_HIGH;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	615a      	str	r2, [r3, #20]
  TIM_OC_InitStruct->OCIdleState  = LL_TIM_OCIDLESTATE_LOW;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	619a      	str	r2, [r3, #24]
  TIM_OC_InitStruct->OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	61da      	str	r2, [r3, #28]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr

0800126e <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b086      	sub	sp, #24
 8001272:	af00      	add	r7, sp, #0
 8001274:	60f8      	str	r0, [r7, #12]
 8001276:	60b9      	str	r1, [r7, #8]
 8001278:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	2b10      	cmp	r3, #16
 8001282:	d012      	beq.n	80012aa <LL_TIM_OC_Init+0x3c>
 8001284:	2b10      	cmp	r3, #16
 8001286:	d802      	bhi.n	800128e <LL_TIM_OC_Init+0x20>
 8001288:	2b01      	cmp	r3, #1
 800128a:	d007      	beq.n	800129c <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800128c:	e022      	b.n	80012d4 <LL_TIM_OC_Init+0x66>
  switch (Channel)
 800128e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001292:	d011      	beq.n	80012b8 <LL_TIM_OC_Init+0x4a>
 8001294:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001298:	d015      	beq.n	80012c6 <LL_TIM_OC_Init+0x58>
      break;
 800129a:	e01b      	b.n	80012d4 <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	68f8      	ldr	r0, [r7, #12]
 80012a0:	f000 f9d8 	bl	8001654 <OC1Config>
 80012a4:	4603      	mov	r3, r0
 80012a6:	75fb      	strb	r3, [r7, #23]
      break;
 80012a8:	e014      	b.n	80012d4 <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	68f8      	ldr	r0, [r7, #12]
 80012ae:	f000 fa37 	bl	8001720 <OC2Config>
 80012b2:	4603      	mov	r3, r0
 80012b4:	75fb      	strb	r3, [r7, #23]
      break;
 80012b6:	e00d      	b.n	80012d4 <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80012b8:	6879      	ldr	r1, [r7, #4]
 80012ba:	68f8      	ldr	r0, [r7, #12]
 80012bc:	f000 fa9a 	bl	80017f4 <OC3Config>
 80012c0:	4603      	mov	r3, r0
 80012c2:	75fb      	strb	r3, [r7, #23]
      break;
 80012c4:	e006      	b.n	80012d4 <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80012c6:	6879      	ldr	r1, [r7, #4]
 80012c8:	68f8      	ldr	r0, [r7, #12]
 80012ca:	f000 fafd 	bl	80018c8 <OC4Config>
 80012ce:	4603      	mov	r3, r0
 80012d0:	75fb      	strb	r3, [r7, #23]
      break;
 80012d2:	bf00      	nop
  }

  return result;
 80012d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <LL_TIM_IC_StructInit>:
  *         structure to their default values.
  * @param  TIM_ICInitStruct pointer to a @ref LL_TIM_IC_InitTypeDef structure (the input channel configuration data structure)
  * @retval None
  */
void LL_TIM_IC_StructInit(LL_TIM_IC_InitTypeDef *TIM_ICInitStruct)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->ICPolarity    = LL_TIM_IC_POLARITY_RISING;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
  TIM_ICInitStruct->ICActiveInput = LL_TIM_ACTIVEINPUT_DIRECTTI;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012f2:	605a      	str	r2, [r3, #4]
  TIM_ICInitStruct->ICPrescaler   = LL_TIM_ICPSC_DIV1;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  TIM_ICInitStruct->ICFilter      = LL_TIM_IC_FILTER_FDIV1;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	60da      	str	r2, [r3, #12]
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr

0800130a <LL_TIM_IC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_IC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_IC_InitTypeDef *TIM_IC_InitStruct)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b086      	sub	sp, #24
 800130e:	af00      	add	r7, sp, #0
 8001310:	60f8      	str	r0, [r7, #12]
 8001312:	60b9      	str	r1, [r7, #8]
 8001314:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	2b10      	cmp	r3, #16
 800131e:	d012      	beq.n	8001346 <LL_TIM_IC_Init+0x3c>
 8001320:	2b10      	cmp	r3, #16
 8001322:	d802      	bhi.n	800132a <LL_TIM_IC_Init+0x20>
 8001324:	2b01      	cmp	r3, #1
 8001326:	d007      	beq.n	8001338 <LL_TIM_IC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = IC4Config(TIMx, TIM_IC_InitStruct);
      break;
    default:
      break;
 8001328:	e022      	b.n	8001370 <LL_TIM_IC_Init+0x66>
  switch (Channel)
 800132a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800132e:	d011      	beq.n	8001354 <LL_TIM_IC_Init+0x4a>
 8001330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001334:	d015      	beq.n	8001362 <LL_TIM_IC_Init+0x58>
      break;
 8001336:	e01b      	b.n	8001370 <LL_TIM_IC_Init+0x66>
      result = IC1Config(TIMx, TIM_IC_InitStruct);
 8001338:	6879      	ldr	r1, [r7, #4]
 800133a:	68f8      	ldr	r0, [r7, #12]
 800133c:	f000 fb16 	bl	800196c <IC1Config>
 8001340:	4603      	mov	r3, r0
 8001342:	75fb      	strb	r3, [r7, #23]
      break;
 8001344:	e014      	b.n	8001370 <LL_TIM_IC_Init+0x66>
      result = IC2Config(TIMx, TIM_IC_InitStruct);
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	68f8      	ldr	r0, [r7, #12]
 800134a:	f000 fb3b 	bl	80019c4 <IC2Config>
 800134e:	4603      	mov	r3, r0
 8001350:	75fb      	strb	r3, [r7, #23]
      break;
 8001352:	e00d      	b.n	8001370 <LL_TIM_IC_Init+0x66>
      result = IC3Config(TIMx, TIM_IC_InitStruct);
 8001354:	6879      	ldr	r1, [r7, #4]
 8001356:	68f8      	ldr	r0, [r7, #12]
 8001358:	f000 fb61 	bl	8001a1e <IC3Config>
 800135c:	4603      	mov	r3, r0
 800135e:	75fb      	strb	r3, [r7, #23]
      break;
 8001360:	e006      	b.n	8001370 <LL_TIM_IC_Init+0x66>
      result = IC4Config(TIMx, TIM_IC_InitStruct);
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	68f8      	ldr	r0, [r7, #12]
 8001366:	f000 fb87 	bl	8001a78 <IC4Config>
 800136a:	4603      	mov	r3, r0
 800136c:	75fb      	strb	r3, [r7, #23]
      break;
 800136e:	bf00      	nop
  }

  return result;
 8001370:	7dfb      	ldrb	r3, [r7, #23]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <LL_TIM_ENCODER_StructInit>:
  * @brief  Fills each TIM_EncoderInitStruct field with its default value
  * @param  TIM_EncoderInitStruct pointer to a @ref LL_TIM_ENCODER_InitTypeDef structure (encoder interface configuration data structure)
  * @retval None
  */
void LL_TIM_ENCODER_StructInit(LL_TIM_ENCODER_InitTypeDef *TIM_EncoderInitStruct)
{
 800137a:	b480      	push	{r7}
 800137c:	b083      	sub	sp, #12
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_EncoderInitStruct->EncoderMode    = LL_TIM_ENCODERMODE_X2_TI1;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	601a      	str	r2, [r3, #0]
  TIM_EncoderInitStruct->IC1Polarity    = LL_TIM_IC_POLARITY_RISING;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	605a      	str	r2, [r3, #4]
  TIM_EncoderInitStruct->IC1ActiveInput = LL_TIM_ACTIVEINPUT_DIRECTTI;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001394:	609a      	str	r2, [r3, #8]
  TIM_EncoderInitStruct->IC1Prescaler   = LL_TIM_ICPSC_DIV1;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	60da      	str	r2, [r3, #12]
  TIM_EncoderInitStruct->IC1Filter      = LL_TIM_IC_FILTER_FDIV1;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	611a      	str	r2, [r3, #16]
  TIM_EncoderInitStruct->IC2Polarity    = LL_TIM_IC_POLARITY_RISING;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	615a      	str	r2, [r3, #20]
  TIM_EncoderInitStruct->IC2ActiveInput = LL_TIM_ACTIVEINPUT_DIRECTTI;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013ae:	619a      	str	r2, [r3, #24]
  TIM_EncoderInitStruct->IC2Prescaler   = LL_TIM_ICPSC_DIV1;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	61da      	str	r2, [r3, #28]
  TIM_EncoderInitStruct->IC2Filter      = LL_TIM_IC_FILTER_FDIV1;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	621a      	str	r2, [r3, #32]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr

080013c6 <LL_TIM_ENCODER_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_ENCODER_Init(TIM_TypeDef *TIMx, LL_TIM_ENCODER_InitTypeDef *TIM_EncoderInitStruct)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b084      	sub	sp, #16
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
 80013ce:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_ACTIVEINPUT(TIM_EncoderInitStruct->IC2ActiveInput));
  assert_param(IS_LL_TIM_ICPSC(TIM_EncoderInitStruct->IC2Prescaler));
  assert_param(IS_LL_TIM_IC_FILTER(TIM_EncoderInitStruct->IC2Filter));

  /* Disable the CC1 and CC2: Reset the CC1E and CC2E Bits */
  TIMx->CCER &= (uint32_t)~(TIM_CCER_CC1E | TIM_CCER_CC2E);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	f023 0211 	bic.w	r2, r3, #17
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a1b      	ldr	r3, [r3, #32]
 80013e6:	60bb      	str	r3, [r7, #8]

  /* Configure TI1 */
  tmpccmr1 &= (uint32_t)~(TIM_CCMR1_CC1S | TIM_CCMR1_IC1F  | TIM_CCMR1_IC1PSC);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80013ee:	60fb      	str	r3, [r7, #12]
  tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC1ActiveInput >> 16U);
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	0c1b      	lsrs	r3, r3, #16
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	60fb      	str	r3, [r7, #12]
  tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC1Filter >> 16U);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	0c1b      	lsrs	r3, r3, #16
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	4313      	orrs	r3, r2
 8001406:	60fb      	str	r3, [r7, #12]
  tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC1Prescaler >> 16U);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	0c1b      	lsrs	r3, r3, #16
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	4313      	orrs	r3, r2
 8001412:	60fb      	str	r3, [r7, #12]

  /* Configure TI2 */
  tmpccmr1 &= (uint32_t)~(TIM_CCMR1_CC2S | TIM_CCMR1_IC2F  | TIM_CCMR1_IC2PSC);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800141a:	60fb      	str	r3, [r7, #12]
  tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC2ActiveInput >> 8U);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	0a1b      	lsrs	r3, r3, #8
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	4313      	orrs	r3, r2
 8001426:	60fb      	str	r3, [r7, #12]
  tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC2Filter >> 8U);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	6a1b      	ldr	r3, [r3, #32]
 800142c:	0a1b      	lsrs	r3, r3, #8
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	4313      	orrs	r3, r2
 8001432:	60fb      	str	r3, [r7, #12]
  tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC2Prescaler >> 8U);
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	69db      	ldr	r3, [r3, #28]
 8001438:	0a1b      	lsrs	r3, r3, #8
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	4313      	orrs	r3, r2
 800143e:	60fb      	str	r3, [r7, #12]

  /* Set TI1 and TI2 polarity and enable TI1 and TI2 */
  tmpccer &= (uint32_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP | TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	f023 03aa 	bic.w	r3, r3, #170	; 0xaa
 8001446:	60bb      	str	r3, [r7, #8]
  tmpccer |= (uint32_t)(TIM_EncoderInitStruct->IC1Polarity);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	68ba      	ldr	r2, [r7, #8]
 800144e:	4313      	orrs	r3, r2
 8001450:	60bb      	str	r3, [r7, #8]
  tmpccer |= (uint32_t)(TIM_EncoderInitStruct->IC2Polarity << 4U);
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	011b      	lsls	r3, r3, #4
 8001458:	68ba      	ldr	r2, [r7, #8]
 800145a:	4313      	orrs	r3, r2
 800145c:	60bb      	str	r3, [r7, #8]
  tmpccer |= (uint32_t)(TIM_CCER_CC1E | TIM_CCER_CC2E);
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	f043 0311 	orr.w	r3, r3, #17
 8001464:	60bb      	str	r3, [r7, #8]

  /* Set encoder mode */
  LL_TIM_SetEncoderMode(TIMx, TIM_EncoderInitStruct->EncoderMode);
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4619      	mov	r1, r3
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff fdbc 	bl	8000fea <LL_TIM_SetEncoderMode>

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800147e:	2300      	movs	r3, #0
}
 8001480:	4618      	mov	r0, r3
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <LL_TIM_HALLSENSOR_StructInit>:
  *         structure to their default values.
  * @param  TIM_HallSensorInitStruct pointer to a @ref LL_TIM_HALLSENSOR_InitTypeDef structure (HALL sensor interface configuration data structure)
  * @retval None
  */
void LL_TIM_HALLSENSOR_StructInit(LL_TIM_HALLSENSOR_InitTypeDef *TIM_HallSensorInitStruct)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_HallSensorInitStruct->IC1Polarity       = LL_TIM_IC_POLARITY_RISING;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
  TIM_HallSensorInitStruct->IC1Prescaler      = LL_TIM_ICPSC_DIV1;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	605a      	str	r2, [r3, #4]
  TIM_HallSensorInitStruct->IC1Filter         = LL_TIM_IC_FILTER_FDIV1;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  TIM_HallSensorInitStruct->CommutationDelay  = 0U;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	60da      	str	r2, [r3, #12]
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc80      	pop	{r7}
 80014b0:	4770      	bx	lr

080014b2 <LL_TIM_HALLSENSOR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_HALLSENSOR_Init(TIM_TypeDef *TIMx, LL_TIM_HALLSENSOR_InitTypeDef *TIM_HallSensorInitStruct)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b086      	sub	sp, #24
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
 80014ba:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_IC_POLARITY_ENCODER(TIM_HallSensorInitStruct->IC1Polarity));
  assert_param(IS_LL_TIM_ICPSC(TIM_HallSensorInitStruct->IC1Prescaler));
  assert_param(IS_LL_TIM_IC_FILTER(TIM_HallSensorInitStruct->IC1Filter));

  /* Disable the CC1 and CC2: Reset the CC1E and CC2E Bits */
  TIMx->CCER &= (uint32_t)~(TIM_CCER_CC1E | TIM_CCER_CC2E);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	f023 0211 	bic.w	r2, r3, #17
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = LL_TIM_ReadReg(TIMx, SMCR);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	60bb      	str	r3, [r7, #8]

  /* Connect TIMx_CH1, CH2 and CH3 pins to the TI1 input */
  tmpcr2 |= TIM_CR2_TI1S;
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014e6:	617b      	str	r3, [r7, #20]

  /* OC2REF signal is used as trigger output (TRGO) */
  tmpcr2 |= LL_TIM_TRGO_OC2REF;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80014ee:	617b      	str	r3, [r7, #20]

  /* Configure the slave mode controller */
  tmpsmcr &= (uint32_t)~(TIM_SMCR_TS | TIM_SMCR_SMS);
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80014f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr |= LL_TIM_TS_TI1F_ED;
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr |= LL_TIM_SLAVEMODE_RESET;
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	f043 0304 	orr.w	r3, r3, #4
 8001506:	60bb      	str	r3, [r7, #8]

  /* Configure input channel 1 */
  tmpccmr1 &= (uint32_t)~(TIM_CCMR1_CC1S | TIM_CCMR1_IC1F  | TIM_CCMR1_IC1PSC);
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800150e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (uint32_t)(LL_TIM_ACTIVEINPUT_TRC >> 16U);
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	f043 0303 	orr.w	r3, r3, #3
 8001516:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (uint32_t)(TIM_HallSensorInitStruct->IC1Filter >> 16U);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	0c1b      	lsrs	r3, r3, #16
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4313      	orrs	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (uint32_t)(TIM_HallSensorInitStruct->IC1Prescaler >> 16U);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	0c1b      	lsrs	r3, r3, #16
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	613b      	str	r3, [r7, #16]

  /* Configure input channel 2 */
  tmpccmr1 &= (uint32_t)~(TIM_CCMR1_OC2M | TIM_CCMR1_OC2FE  | TIM_CCMR1_OC2PE  | TIM_CCMR1_OC2CE);
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 8001536:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (uint32_t)(LL_TIM_OCMODE_PWM2 << 8U);
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800153e:	613b      	str	r3, [r7, #16]

  /* Set Channel 1 polarity and enable Channel 1 and Channel2 */
  tmpccer &= (uint32_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP | TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f023 03aa 	bic.w	r3, r3, #170	; 0xaa
 8001546:	60fb      	str	r3, [r7, #12]
  tmpccer |= (uint32_t)(TIM_HallSensorInitStruct->IC1Polarity);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	4313      	orrs	r3, r2
 8001550:	60fb      	str	r3, [r7, #12]
  tmpccer |= (uint32_t)(TIM_CCER_CC1E | TIM_CCER_CC2E);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f043 0311 	orr.w	r3, r3, #17
 8001558:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	697a      	ldr	r2, [r7, #20]
 800155e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx SMCR */
  LL_TIM_WriteReg(TIMx, SMCR, tmpsmcr);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68ba      	ldr	r2, [r7, #8]
 8001564:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	621a      	str	r2, [r3, #32]

  /* Write to TIMx CCR2 */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_HallSensorInitStruct->CommutationDelay);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	4619      	mov	r1, r3
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff fd0f 	bl	8000f9c <LL_TIM_OC_SetCompareCH2>

  return SUCCESS;
 800157e:	2300      	movs	r3, #0
}
 8001580:	4618      	mov	r0, r3
 8001582:	3718      	adds	r7, #24
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <LL_TIM_BDTR_StructInit>:
  *         to their default values.
  * @param  TIM_BDTRInitStruct pointer to a @ref LL_TIM_BDTR_InitTypeDef structure (Break and Dead Time configuration data structure)
  * @retval None
  */
void LL_TIM_BDTR_StructInit(LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->OSSRState       = LL_TIM_OSSR_DISABLE;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
  TIM_BDTRInitStruct->OSSIState       = LL_TIM_OSSI_DISABLE;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	605a      	str	r2, [r3, #4]
  TIM_BDTRInitStruct->LockLevel       = LL_TIM_LOCKLEVEL_OFF;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  TIM_BDTRInitStruct->DeadTime        = (uint8_t)0x00;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	731a      	strb	r2, [r3, #12]
  TIM_BDTRInitStruct->BreakState      = LL_TIM_BREAK_DISABLE;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	81da      	strh	r2, [r3, #14]
  TIM_BDTRInitStruct->BreakPolarity   = LL_TIM_BREAK_POLARITY_LOW;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  TIM_BDTRInitStruct->AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	615a      	str	r2, [r3, #20]
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr

080015c4 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80015d8:	683a      	ldr	r2, [r7, #0]
 80015da:	7b12      	ldrb	r2, [r2, #12]
 80015dc:	4313      	orrs	r3, r2
 80015de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4313      	orrs	r3, r2
 8001608:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	89d2      	ldrh	r2, [r2, #14]
 8001614:	4313      	orrs	r3, r2
 8001616:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	4313      	orrs	r3, r2
 8001624:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	695b      	ldr	r3, [r3, #20]
 8001630:	4313      	orrs	r3, r2
 8001632:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	4313      	orrs	r3, r2
 8001640:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3714      	adds	r7, #20
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr

08001654 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a1b      	ldr	r3, [r3, #32]
 8001662:	f023 0201 	bic.w	r2, r3, #1
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a1b      	ldr	r3, [r3, #32]
 800166e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f023 0303 	bic.w	r3, r3, #3
 8001682:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4313      	orrs	r3, r2
 8001690:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	f023 0202 	bic.w	r2, r3, #2
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	4313      	orrs	r3, r2
 800169e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	f023 0201 	bic.w	r2, r3, #1
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a1a      	ldr	r2, [pc, #104]	; (800171c <OC1Config+0xc8>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d11e      	bne.n	80016f4 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	f023 0208 	bic.w	r2, r3, #8
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	695b      	ldr	r3, [r3, #20]
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4313      	orrs	r3, r2
 80016c4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	f023 0204 	bic.w	r2, r3, #4
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4313      	orrs	r3, r2
 80016d4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	4313      	orrs	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	68fa      	ldr	r2, [r7, #12]
 80016fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	4619      	mov	r1, r3
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff fc3b 	bl	8000f82 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	697a      	ldr	r2, [r7, #20]
 8001710:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40012c00 	.word	0x40012c00

08001720 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	f023 0210 	bic.w	r2, r3, #16
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a1b      	ldr	r3, [r3, #32]
 800173a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800174e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	021b      	lsls	r3, r3, #8
 800175c:	4313      	orrs	r3, r2
 800175e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	f023 0220 	bic.w	r2, r3, #32
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	011b      	lsls	r3, r3, #4
 800176c:	4313      	orrs	r3, r2
 800176e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	f023 0210 	bic.w	r2, r3, #16
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	011b      	lsls	r3, r3, #4
 800177c:	4313      	orrs	r3, r2
 800177e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4a1b      	ldr	r2, [pc, #108]	; (80017f0 <OC2Config+0xd0>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d11f      	bne.n	80017c8 <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	019b      	lsls	r3, r3, #6
 8001794:	4313      	orrs	r3, r2
 8001796:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	019b      	lsls	r3, r3, #6
 80017a4:	4313      	orrs	r3, r2
 80017a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4313      	orrs	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	4313      	orrs	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	4619      	mov	r1, r3
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff fbde 	bl	8000f9c <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	697a      	ldr	r2, [r7, #20]
 80017e4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3718      	adds	r7, #24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40012c00 	.word	0x40012c00

080017f4 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a1b      	ldr	r3, [r3, #32]
 8001802:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a1b      	ldr	r3, [r3, #32]
 800180e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f023 0303 	bic.w	r3, r3, #3
 8001822:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4313      	orrs	r3, r2
 8001830:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	021b      	lsls	r3, r3, #8
 800183e:	4313      	orrs	r3, r2
 8001840:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	021b      	lsls	r3, r3, #8
 800184e:	4313      	orrs	r3, r2
 8001850:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a1b      	ldr	r2, [pc, #108]	; (80018c4 <OC3Config+0xd0>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d11f      	bne.n	800189a <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	695b      	ldr	r3, [r3, #20]
 8001864:	029b      	lsls	r3, r3, #10
 8001866:	4313      	orrs	r3, r2
 8001868:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	029b      	lsls	r3, r3, #10
 8001876:	4313      	orrs	r3, r2
 8001878:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	011b      	lsls	r3, r3, #4
 8001886:	4313      	orrs	r3, r2
 8001888:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	69db      	ldr	r3, [r3, #28]
 8001894:	015b      	lsls	r3, r3, #5
 8001896:	4313      	orrs	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	4619      	mov	r1, r3
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff fb82 	bl	8000fb6 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3718      	adds	r7, #24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40012c00 	.word	0x40012c00

080018c8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a1b      	ldr	r3, [r3, #32]
 80018e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	021b      	lsls	r3, r3, #8
 8001904:	4313      	orrs	r3, r2
 8001906:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	031b      	lsls	r3, r3, #12
 8001914:	4313      	orrs	r3, r2
 8001916:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	031b      	lsls	r3, r3, #12
 8001924:	4313      	orrs	r3, r2
 8001926:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a0f      	ldr	r2, [pc, #60]	; (8001968 <OC4Config+0xa0>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d107      	bne.n	8001940 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	019b      	lsls	r3, r3, #6
 800193c:	4313      	orrs	r3, r2
 800193e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	4619      	mov	r1, r3
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff fb3c 	bl	8000fd0 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	3718      	adds	r7, #24
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40012c00 	.word	0x40012c00

0800196c <IC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus IC1Config(TIM_TypeDef *TIMx, LL_TIM_IC_InitTypeDef *TIM_ICInitStruct)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_ACTIVEINPUT(TIM_ICInitStruct->ICActiveInput));
  assert_param(IS_LL_TIM_ICPSC(TIM_ICInitStruct->ICPrescaler));
  assert_param(IS_LL_TIM_IC_FILTER(TIM_ICInitStruct->ICFilter));

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC1E;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a1b      	ldr	r3, [r3, #32]
 800197a:	f023 0201 	bic.w	r2, r3, #1
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	621a      	str	r2, [r3, #32]

  /* Select the Input and set the filter and the prescaler value */
  MODIFY_REG(TIMx->CCMR1,
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	6859      	ldr	r1, [r3, #4]
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	4319      	orrs	r1, r3
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	430b      	orrs	r3, r1
 800199a:	0c1b      	lsrs	r3, r3, #16
 800199c:	431a      	orrs	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	619a      	str	r2, [r3, #24]
             (TIM_CCMR1_CC1S | TIM_CCMR1_IC1F | TIM_CCMR1_IC1PSC),
             (TIM_ICInitStruct->ICActiveInput | TIM_ICInitStruct->ICFilter | TIM_ICInitStruct->ICPrescaler) >> 16U);

  /* Select the Polarity and set the CC1E Bit */
  MODIFY_REG(TIMx->CCER,
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	f023 020a 	bic.w	r2, r3, #10
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	f043 0201 	orr.w	r2, r3, #1
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	621a      	str	r2, [r3, #32]
             (TIM_CCER_CC1P | TIM_CCER_CC1NP),
             (TIM_ICInitStruct->ICPolarity | TIM_CCER_CC1E));

  return SUCCESS;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr

080019c4 <IC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus IC2Config(TIM_TypeDef *TIMx, LL_TIM_IC_InitTypeDef *TIM_ICInitStruct)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_ACTIVEINPUT(TIM_ICInitStruct->ICActiveInput));
  assert_param(IS_LL_TIM_ICPSC(TIM_ICInitStruct->ICPrescaler));
  assert_param(IS_LL_TIM_IC_FILTER(TIM_ICInitStruct->ICFilter));

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC2E;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a1b      	ldr	r3, [r3, #32]
 80019d2:	f023 0210 	bic.w	r2, r3, #16
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	621a      	str	r2, [r3, #32]

  /* Select the Input and set the filter and the prescaler value */
  MODIFY_REG(TIMx->CCMR1,
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	6859      	ldr	r1, [r3, #4]
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	4319      	orrs	r1, r3
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	430b      	orrs	r3, r1
 80019f2:	0a1b      	lsrs	r3, r3, #8
 80019f4:	431a      	orrs	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	619a      	str	r2, [r3, #24]
             (TIM_CCMR1_CC2S | TIM_CCMR1_IC2F | TIM_CCMR1_IC2PSC),
             (TIM_ICInitStruct->ICActiveInput | TIM_ICInitStruct->ICFilter | TIM_ICInitStruct->ICPrescaler) >> 8U);

  /* Select the Polarity and set the CC2E Bit */
  MODIFY_REG(TIMx->CCER,
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	f023 02a0 	bic.w	r2, r3, #160	; 0xa0
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	011b      	lsls	r3, r3, #4
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	f043 0210 	orr.w	r2, r3, #16
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	621a      	str	r2, [r3, #32]
             (TIM_CCER_CC2P | TIM_CCER_CC2NP),
             ((TIM_ICInitStruct->ICPolarity << 4U) | TIM_CCER_CC2E));

  return SUCCESS;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr

08001a1e <IC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus IC3Config(TIM_TypeDef *TIMx, LL_TIM_IC_InitTypeDef *TIM_ICInitStruct)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
 8001a26:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_ACTIVEINPUT(TIM_ICInitStruct->ICActiveInput));
  assert_param(IS_LL_TIM_ICPSC(TIM_ICInitStruct->ICPrescaler));
  assert_param(IS_LL_TIM_IC_FILTER(TIM_ICInitStruct->ICFilter));

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC3E;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	621a      	str	r2, [r3, #32]

  /* Select the Input and set the filter and the prescaler value */
  MODIFY_REG(TIMx->CCMR2,
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69db      	ldr	r3, [r3, #28]
 8001a38:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	6859      	ldr	r1, [r3, #4]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	4319      	orrs	r1, r3
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	430b      	orrs	r3, r1
 8001a4c:	0c1b      	lsrs	r3, r3, #16
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	61da      	str	r2, [r3, #28]
             (TIM_CCMR2_CC3S | TIM_CCMR2_IC3F | TIM_CCMR2_IC3PSC),
             (TIM_ICInitStruct->ICActiveInput | TIM_ICInitStruct->ICFilter | TIM_ICInitStruct->ICPrescaler) >> 16U);

  /* Select the Polarity and set the CC3E Bit */
  MODIFY_REG(TIMx->CCER,
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	f423 6220 	bic.w	r2, r3, #2560	; 0xa00
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	021b      	lsls	r3, r3, #8
 8001a62:	4313      	orrs	r3, r2
 8001a64:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	621a      	str	r2, [r3, #32]
             (TIM_CCER_CC3P | TIM_CCER_CC3NP),
             ((TIM_ICInitStruct->ICPolarity << 8U) | TIM_CCER_CC3E));

  return SUCCESS;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr

08001a78 <IC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus IC4Config(TIM_TypeDef *TIMx, LL_TIM_IC_InitTypeDef *TIM_ICInitStruct)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_ACTIVEINPUT(TIM_ICInitStruct->ICActiveInput));
  assert_param(IS_LL_TIM_ICPSC(TIM_ICInitStruct->ICPrescaler));
  assert_param(IS_LL_TIM_IC_FILTER(TIM_ICInitStruct->ICFilter));

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC4E;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a1b      	ldr	r3, [r3, #32]
 8001a86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	621a      	str	r2, [r3, #32]

  /* Select the Input and set the filter and the prescaler value */
  MODIFY_REG(TIMx->CCMR2,
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	6859      	ldr	r1, [r3, #4]
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	4319      	orrs	r1, r3
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	430b      	orrs	r3, r1
 8001aa6:	0a1b      	lsrs	r3, r3, #8
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	61da      	str	r2, [r3, #28]
             (TIM_CCMR2_CC4S | TIM_CCMR2_IC4F | TIM_CCMR2_IC4PSC),
             (TIM_ICInitStruct->ICActiveInput | TIM_ICInitStruct->ICFilter | TIM_ICInitStruct->ICPrescaler) >> 8U);

  /* Select the Polarity and set the CC4E Bit */
  MODIFY_REG(TIMx->CCER,
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	031b      	lsls	r3, r3, #12
 8001abc:	4313      	orrs	r3, r2
 8001abe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	621a      	str	r2, [r3, #32]
             TIM_CCER_CC4P,
             ((TIM_ICInitStruct->ICPolarity << 12U) | TIM_CCER_CC4E));

  return SUCCESS;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop

08001ad4 <LL_RCC_HSE_EnableBypass>:
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001ad8:	4b04      	ldr	r3, [pc, #16]	; (8001aec <LL_RCC_HSE_EnableBypass+0x18>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a03      	ldr	r2, [pc, #12]	; (8001aec <LL_RCC_HSE_EnableBypass+0x18>)
 8001ade:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ae2:	6013      	str	r3, [r2, #0]
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr
 8001aec:	40021000 	.word	0x40021000

08001af0 <LL_RCC_HSE_DisableBypass>:
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001af4:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <LL_RCC_HSE_DisableBypass+0x18>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a03      	ldr	r2, [pc, #12]	; (8001b08 <LL_RCC_HSE_DisableBypass+0x18>)
 8001afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001afe:	6013      	str	r3, [r2, #0]
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr
 8001b08:	40021000 	.word	0x40021000

08001b0c <LL_RCC_HSE_Enable>:
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001b10:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <LL_RCC_HSE_Enable+0x18>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a03      	ldr	r2, [pc, #12]	; (8001b24 <LL_RCC_HSE_Enable+0x18>)
 8001b16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b1a:	6013      	str	r3, [r2, #0]
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr
 8001b24:	40021000 	.word	0x40021000

08001b28 <LL_RCC_HSE_IsReady>:
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <LL_RCC_HSE_IsReady+0x20>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001b38:	bf0c      	ite	eq
 8001b3a:	2301      	moveq	r3, #1
 8001b3c:	2300      	movne	r3, #0
 8001b3e:	b2db      	uxtb	r3, r3
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	40021000 	.word	0x40021000

08001b4c <LL_RCC_HSI_Enable>:
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001b50:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <LL_RCC_HSI_Enable+0x18>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a03      	ldr	r2, [pc, #12]	; (8001b64 <LL_RCC_HSI_Enable+0x18>)
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	6013      	str	r3, [r2, #0]
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr
 8001b64:	40021000 	.word	0x40021000

08001b68 <LL_RCC_HSI_IsReady>:
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <LL_RCC_HSI_IsReady+0x20>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	bf0c      	ite	eq
 8001b78:	2301      	moveq	r3, #1
 8001b7a:	2300      	movne	r3, #0
 8001b7c:	b2db      	uxtb	r3, r3
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	40021000 	.word	0x40021000

08001b8c <LL_RCC_SetSysClkSource>:
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <LL_RCC_SetSysClkSource+0x24>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f023 0203 	bic.w	r2, r3, #3
 8001b9c:	4904      	ldr	r1, [pc, #16]	; (8001bb0 <LL_RCC_SetSysClkSource+0x24>)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	604b      	str	r3, [r1, #4]
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40021000 	.word	0x40021000

08001bb4 <LL_RCC_GetSysClkSource>:
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001bb8:	4b03      	ldr	r3, [pc, #12]	; (8001bc8 <LL_RCC_GetSysClkSource+0x14>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 030c 	and.w	r3, r3, #12
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr
 8001bc8:	40021000 	.word	0x40021000

08001bcc <LL_RCC_SetAHBPrescaler>:
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <LL_RCC_SetAHBPrescaler+0x24>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bdc:	4904      	ldr	r1, [pc, #16]	; (8001bf0 <LL_RCC_SetAHBPrescaler+0x24>)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	604b      	str	r3, [r1, #4]
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	40021000 	.word	0x40021000

08001bf4 <LL_RCC_SetAPB1Prescaler>:
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c04:	4904      	ldr	r1, [pc, #16]	; (8001c18 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	604b      	str	r3, [r1, #4]
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40021000 	.word	0x40021000

08001c1c <LL_RCC_SetAPB2Prescaler>:
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001c24:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c2c:	4904      	ldr	r1, [pc, #16]	; (8001c40 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	604b      	str	r3, [r1, #4]
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	40021000 	.word	0x40021000

08001c44 <LL_RCC_GetAHBPrescaler>:
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001c48:	4b03      	ldr	r3, [pc, #12]	; (8001c58 <LL_RCC_GetAHBPrescaler+0x14>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr
 8001c58:	40021000 	.word	0x40021000

08001c5c <LL_RCC_PLL_Enable>:
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001c60:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <LL_RCC_PLL_Enable+0x18>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a03      	ldr	r2, [pc, #12]	; (8001c74 <LL_RCC_PLL_Enable+0x18>)
 8001c66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c6a:	6013      	str	r3, [r2, #0]
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr
 8001c74:	40021000 	.word	0x40021000

08001c78 <LL_RCC_PLL_IsReady>:
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <LL_RCC_PLL_IsReady+0x20>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c88:	bf0c      	ite	eq
 8001c8a:	2301      	moveq	r3, #1
 8001c8c:	2300      	movne	r3, #0
 8001c8e:	b2db      	uxtb	r3, r3
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr
 8001c98:	40021000 	.word	0x40021000

08001c9c <LL_RCC_PLL_ConfigDomain_SYS>:
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8001ca6:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	430b      	orrs	r3, r1
 8001cb8:	4903      	ldr	r1, [pc, #12]	; (8001cc8 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	604b      	str	r3, [r1, #4]
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr
 8001cc8:	40021000 	.word	0x40021000

08001ccc <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cde:	4a07      	ldr	r2, [pc, #28]	; (8001cfc <LL_InitTick+0x30>)
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001ce4:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <LL_InitTick+0x30>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cea:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <LL_InitTick+0x30>)
 8001cec:	2205      	movs	r2, #5
 8001cee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	e000e010 	.word	0xe000e010

08001d00 <LL_FLASH_SetLatency>:
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <LL_FLASH_SetLatency+0x24>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f023 0207 	bic.w	r2, r3, #7
 8001d10:	4904      	ldr	r1, [pc, #16]	; (8001d24 <LL_FLASH_SetLatency+0x24>)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	600b      	str	r3, [r1, #0]
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40022000 	.word	0x40022000

08001d28 <LL_FLASH_GetLatency>:
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001d2c:	4b03      	ldr	r3, [pc, #12]	; (8001d3c <LL_FLASH_GetLatency+0x14>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0307 	and.w	r3, r3, #7
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr
 8001d3c:	40022000 	.word	0x40022000

08001d40 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001d48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7ff ffbd 	bl	8001ccc <LL_InitTick>
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b085      	sub	sp, #20
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001d62:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <LL_mDelay+0x42>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001d68:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d70:	d00c      	beq.n	8001d8c <LL_mDelay+0x32>
  {
    Delay++;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3301      	adds	r3, #1
 8001d76:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001d78:	e008      	b.n	8001d8c <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001d7a:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <LL_mDelay+0x42>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d002      	beq.n	8001d8c <LL_mDelay+0x32>
    {
      Delay--;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	607b      	str	r3, [r7, #4]
  while (Delay)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f3      	bne.n	8001d7a <LL_mDelay+0x20>
    }
  }
}
 8001d92:	bf00      	nop
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr
 8001d9c:	e000e010 	.word	0xe000e010

08001da0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001da8:	4a03      	ldr	r2, [pc, #12]	; (8001db8 <LL_SetSystemCoreClock+0x18>)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6013      	str	r3, [r2, #0]
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr
 8001db8:	20000010 	.word	0x20000010

08001dbc <LL_SetFlashLatency>:
  *          - SUCCESS: Latency has been modified
  *          - ERROR: Latency cannot be modified
  */
#if defined(FLASH_ACR_LATENCY)
ErrorStatus LL_SetFlashLatency(uint32_t Frequency)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t timeout;
  uint32_t getlatency;
  uint32_t latency = LL_FLASH_LATENCY_0; /* default value 0WS */
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	613b      	str	r3, [r7, #16]
  ErrorStatus status = SUCCESS;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	73fb      	strb	r3, [r7, #15]

  /* Frequency cannot be equal to 0 */
  if (Frequency == 0U)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d102      	bne.n	8001dd8 <LL_SetFlashLatency+0x1c>
  {
    status = ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	73fb      	strb	r3, [r7, #15]
 8001dd6:	e02d      	b.n	8001e34 <LL_SetFlashLatency+0x78>
  }
  else
  {
    if (Frequency > UTILS_LATENCY2_FREQ)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a19      	ldr	r2, [pc, #100]	; (8001e40 <LL_SetFlashLatency+0x84>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d902      	bls.n	8001de6 <LL_SetFlashLatency+0x2a>
    {
      /* 48 < SYSCLK <= 72 => 2WS (3 CPU cycles) */
      latency = LL_FLASH_LATENCY_2;
 8001de0:	2302      	movs	r3, #2
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	e008      	b.n	8001df8 <LL_SetFlashLatency+0x3c>
    }
    else
    {
      if (Frequency > UTILS_LATENCY1_FREQ)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a16      	ldr	r2, [pc, #88]	; (8001e44 <LL_SetFlashLatency+0x88>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d902      	bls.n	8001df4 <LL_SetFlashLatency+0x38>
      {
        /* 24 < SYSCLK <= 48 => 1WS (2 CPU cycles) */
        latency = LL_FLASH_LATENCY_1;
 8001dee:	2301      	movs	r3, #1
 8001df0:	613b      	str	r3, [r7, #16]
 8001df2:	e001      	b.n	8001df8 <LL_SetFlashLatency+0x3c>
      }
      else
      {
        /* else SYSCLK < 24MHz default LL_FLASH_LATENCY_0 0WS */
        latency = LL_FLASH_LATENCY_0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	613b      	str	r3, [r7, #16]
      }
    }

    if (status != ERROR)
 8001df8:	7bfb      	ldrb	r3, [r7, #15]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d01a      	beq.n	8001e34 <LL_SetFlashLatency+0x78>
    {
      LL_FLASH_SetLatency(latency);
 8001dfe:	6938      	ldr	r0, [r7, #16]
 8001e00:	f7ff ff7e 	bl	8001d00 <LL_FLASH_SetLatency>

      /* Check that the new number of wait states is taken into account to access the Flash
         memory by reading the FLASH_ACR register */
      timeout = 2;
 8001e04:	2302      	movs	r3, #2
 8001e06:	617b      	str	r3, [r7, #20]
      do
      {
      /* Wait for Flash latency to be updated */
      getlatency = LL_FLASH_GetLatency();
 8001e08:	f7ff ff8e 	bl	8001d28 <LL_FLASH_GetLatency>
 8001e0c:	60b8      	str	r0, [r7, #8]
      timeout--;
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	3b01      	subs	r3, #1
 8001e12:	617b      	str	r3, [r7, #20]
      } while ((getlatency != latency) && (timeout > 0));
 8001e14:	68ba      	ldr	r2, [r7, #8]
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d002      	beq.n	8001e22 <LL_SetFlashLatency+0x66>
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1f2      	bne.n	8001e08 <LL_SetFlashLatency+0x4c>

      if(getlatency != latency)
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d002      	beq.n	8001e30 <LL_SetFlashLatency+0x74>
      {
        status = ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	73fb      	strb	r3, [r7, #15]
 8001e2e:	e001      	b.n	8001e34 <LL_SetFlashLatency+0x78>
      }
      else
      {
        status = SUCCESS;
 8001e30:	2300      	movs	r3, #0
 8001e32:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	02dc6c00 	.word	0x02dc6c00
 8001e44:	016e3600 	.word	0x016e3600

08001e48 <LL_PLL_ConfigSystemClock_HSI>:
  *          - SUCCESS: Max frequency configuration done
  *          - ERROR: Max frequency configuration not done
  */
ErrorStatus LL_PLL_ConfigSystemClock_HSI(LL_UTILS_PLLInitTypeDef *UTILS_PLLInitStruct,
                                         LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001e52:	2300      	movs	r3, #0
 8001e54:	73fb      	strb	r3, [r7, #15]
  uint32_t pllfreq = 0U;
 8001e56:	2300      	movs	r3, #0
 8001e58:	60bb      	str	r3, [r7, #8]

  /* Check if one of the PLL is enabled */
  if (UTILS_PLL_IsBusy() == SUCCESS)
 8001e5a:	f000 f88c 	bl	8001f76 <UTILS_PLL_IsBusy>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d122      	bne.n	8001eaa <LL_PLL_ConfigSystemClock_HSI+0x62>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    /* Check PREDIV value */
    assert_param(IS_LL_UTILS_PREDIV_VALUE(UTILS_PLLInitStruct->PLLDiv));
#else
    /* Force PREDIV value to 2 */
    UTILS_PLLInitStruct->Prediv = LL_RCC_PREDIV_DIV_2;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e6a:	605a      	str	r2, [r3, #4]
#endif /*RCC_PLLSRC_PREDIV1_SUPPORT*/
    /* Calculate the new PLL output frequency */
    pllfreq = UTILS_GetPLLOutputFrequency(HSI_VALUE, UTILS_PLLInitStruct);
 8001e6c:	6879      	ldr	r1, [r7, #4]
 8001e6e:	4812      	ldr	r0, [pc, #72]	; (8001eb8 <LL_PLL_ConfigSystemClock_HSI+0x70>)
 8001e70:	f000 f866 	bl	8001f40 <UTILS_GetPLLOutputFrequency>
 8001e74:	60b8      	str	r0, [r7, #8]

    /* Enable HSI if not enabled */
    if (LL_RCC_HSI_IsReady() != 1U)
 8001e76:	f7ff fe77 	bl	8001b68 <LL_RCC_HSI_IsReady>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d007      	beq.n	8001e90 <LL_PLL_ConfigSystemClock_HSI+0x48>
    {
      LL_RCC_HSI_Enable();
 8001e80:	f7ff fe64 	bl	8001b4c <LL_RCC_HSI_Enable>
      while (LL_RCC_HSI_IsReady() != 1U)
 8001e84:	bf00      	nop
 8001e86:	f7ff fe6f 	bl	8001b68 <LL_RCC_HSI_IsReady>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d1fa      	bne.n	8001e86 <LL_PLL_ConfigSystemClock_HSI+0x3e>
        /* Wait for HSI ready */
      }
    }

    /* Configure PLL */
    LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, UTILS_PLLInitStruct->PLLMul);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4619      	mov	r1, r3
 8001e96:	2000      	movs	r0, #0
 8001e98:	f7ff ff00 	bl	8001c9c <LL_RCC_PLL_ConfigDomain_SYS>

    /* Enable PLL and switch system clock to PLL */
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8001e9c:	6839      	ldr	r1, [r7, #0]
 8001e9e:	68b8      	ldr	r0, [r7, #8]
 8001ea0:	f000 f87a 	bl	8001f98 <UTILS_EnablePLLAndSwitchSystem>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	73fb      	strb	r3, [r7, #15]
 8001ea8:	e001      	b.n	8001eae <LL_PLL_ConfigSystemClock_HSI+0x66>
  }
  else
  {
    /* Current PLL configuration cannot be modified */
    status = ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8001eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	007a1200 	.word	0x007a1200

08001ebc <LL_PLL_ConfigSystemClock_HSE>:
  *          - SUCCESS: Max frequency configuration done
  *          - ERROR: Max frequency configuration not done
  */
ErrorStatus LL_PLL_ConfigSystemClock_HSE(uint32_t HSEFrequency, uint32_t HSEBypass,
                                         LL_UTILS_PLLInitTypeDef *UTILS_PLLInitStruct, LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
 8001ec8:	603b      	str	r3, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	75fb      	strb	r3, [r7, #23]
  uint32_t pllfreq = 0U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_LL_UTILS_HSE_FREQUENCY(HSEFrequency));
  assert_param(IS_LL_UTILS_HSE_BYPASS(HSEBypass));

  /* Check if one of the PLL is enabled */
  if (UTILS_PLL_IsBusy() == SUCCESS)
 8001ed2:	f000 f850 	bl	8001f76 <UTILS_PLL_IsBusy>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d12a      	bne.n	8001f32 <LL_PLL_ConfigSystemClock_HSE+0x76>
  {
    assert_param(IS_LL_UTILS_PREDIV_VALUE(UTILS_PLLInitStruct->Prediv));

    /* Calculate the new PLL output frequency */
    pllfreq = UTILS_GetPLLOutputFrequency(HSEFrequency, UTILS_PLLInitStruct);
 8001edc:	6879      	ldr	r1, [r7, #4]
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f000 f82e 	bl	8001f40 <UTILS_GetPLLOutputFrequency>
 8001ee4:	6138      	str	r0, [r7, #16]

    /* Enable HSE if not enabled */
    if (LL_RCC_HSE_IsReady() != 1U)
 8001ee6:	f7ff fe1f 	bl	8001b28 <LL_RCC_HSE_IsReady>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d00f      	beq.n	8001f10 <LL_PLL_ConfigSystemClock_HSE+0x54>
    {
      /* Check if need to enable HSE bypass feature or not */
      if (HSEBypass == LL_UTILS_HSEBYPASS_ON)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d102      	bne.n	8001efc <LL_PLL_ConfigSystemClock_HSE+0x40>
      {
        LL_RCC_HSE_EnableBypass();
 8001ef6:	f7ff fded 	bl	8001ad4 <LL_RCC_HSE_EnableBypass>
 8001efa:	e001      	b.n	8001f00 <LL_PLL_ConfigSystemClock_HSE+0x44>
      }
      else
      {
        LL_RCC_HSE_DisableBypass();
 8001efc:	f7ff fdf8 	bl	8001af0 <LL_RCC_HSE_DisableBypass>
      }

      /* Enable HSE */
      LL_RCC_HSE_Enable();
 8001f00:	f7ff fe04 	bl	8001b0c <LL_RCC_HSE_Enable>
      while (LL_RCC_HSE_IsReady() != 1U)
 8001f04:	bf00      	nop
 8001f06:	f7ff fe0f 	bl	8001b28 <LL_RCC_HSE_IsReady>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d1fa      	bne.n	8001f06 <LL_PLL_ConfigSystemClock_HSE+0x4a>
        /* Wait for HSE ready */
      }
    }

    /* Configure PLL */
    LL_RCC_PLL_ConfigDomain_SYS((RCC_CFGR_PLLSRC | UTILS_PLLInitStruct->Prediv), UTILS_PLLInitStruct->PLLMul);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4610      	mov	r0, r2
 8001f20:	f7ff febc 	bl	8001c9c <LL_RCC_PLL_ConfigDomain_SYS>

    /* Enable PLL and switch system clock to PLL */
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8001f24:	6839      	ldr	r1, [r7, #0]
 8001f26:	6938      	ldr	r0, [r7, #16]
 8001f28:	f000 f836 	bl	8001f98 <UTILS_EnablePLLAndSwitchSystem>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	75fb      	strb	r3, [r7, #23]
 8001f30:	e001      	b.n	8001f36 <LL_PLL_ConfigSystemClock_HSE+0x7a>
  }
  else
  {
    /* Current PLL configuration cannot be modified */
    status = ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001f36:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <UTILS_GetPLLOutputFrequency>:
  * @param  UTILS_PLLInitStruct pointer to a @ref LL_UTILS_PLLInitTypeDef structure that contains
  *                             the configuration information for the PLL.
  * @retval PLL output frequency (in Hz)
  */
static uint32_t UTILS_GetPLLOutputFrequency(uint32_t PLL_InputFrequency, LL_UTILS_PLLInitTypeDef *UTILS_PLLInitStruct)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  uint32_t pllfreq = 0U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]

  /* Check different PLL parameters according to RM                          */
#if defined (RCC_CFGR2_PREDIV1)
  pllfreq = __LL_RCC_CALC_PLLCLK_FREQ(PLL_InputFrequency / (UTILS_PLLInitStruct->Prediv + 1U), UTILS_PLLInitStruct->PLLMul);
#else
  pllfreq = __LL_RCC_CALC_PLLCLK_FREQ(PLL_InputFrequency / ((UTILS_PLLInitStruct->Prediv >> RCC_CFGR_PLLXTPRE_Pos) + 1U), UTILS_PLLInitStruct->PLLMul);
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	0c5b      	lsrs	r3, r3, #17
 8001f54:	3301      	adds	r3, #1
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	6812      	ldr	r2, [r2, #0]
 8001f60:	0c92      	lsrs	r2, r2, #18
 8001f62:	3202      	adds	r2, #2
 8001f64:	fb02 f303 	mul.w	r3, r2, r3
 8001f68:	60fb      	str	r3, [r7, #12]
#endif /*RCC_CFGR2_PREDIV1SRC*/
  assert_param(IS_LL_UTILS_PLL_FREQUENCY(pllfreq));

  return pllfreq;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3714      	adds	r7, #20
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr

08001f76 <UTILS_PLL_IsBusy>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: PLL modification can be done
  *          - ERROR: PLL is busy
  */
static ErrorStatus UTILS_PLL_IsBusy(void)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
  ErrorStatus status = SUCCESS;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	71fb      	strb	r3, [r7, #7]

  /* Check if PLL is busy*/
  if (LL_RCC_PLL_IsReady() != 0U)
 8001f80:	f7ff fe7a 	bl	8001c78 <LL_RCC_PLL_IsReady>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <UTILS_PLL_IsBusy+0x18>
  {
    /* PLL configuration cannot be modified */
    status = ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	71fb      	strb	r3, [r7, #7]
    /* PLLI2S configuration cannot be modified */
    status = ERROR;
  }
#endif /* RCC_PLLI2S_SUPPORT */

  return status;
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <UTILS_EnablePLLAndSwitchSystem>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: No problem to switch system to PLL
  *          - ERROR: Problem to switch system to PLL
  */
static ErrorStatus UTILS_EnablePLLAndSwitchSystem(uint32_t SYSCLK_Frequency, LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct)
{
 8001f98:	b590      	push	{r4, r7, lr}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	73fb      	strb	r3, [r7, #15]
#if defined(FLASH_ACR_LATENCY)
  uint32_t sysclk_frequency_current = 0U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

#if defined(FLASH_ACR_LATENCY)
  /* Calculate current SYSCLK frequency */
  sysclk_frequency_current = (SystemCoreClock << AHBPrescTable[LL_RCC_GetAHBPrescaler() >> RCC_CFGR_HPRE_Pos]);
 8001faa:	4b2a      	ldr	r3, [pc, #168]	; (8002054 <UTILS_EnablePLLAndSwitchSystem+0xbc>)
 8001fac:	681c      	ldr	r4, [r3, #0]
 8001fae:	f7ff fe49 	bl	8001c44 <LL_RCC_GetAHBPrescaler>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	091b      	lsrs	r3, r3, #4
 8001fb6:	4a28      	ldr	r2, [pc, #160]	; (8002058 <UTILS_EnablePLLAndSwitchSystem+0xc0>)
 8001fb8:	5cd3      	ldrb	r3, [r2, r3]
 8001fba:	fa04 f303 	lsl.w	r3, r4, r3
 8001fbe:	60bb      	str	r3, [r7, #8]
#endif /* FLASH_ACR_LATENCY */

  /* Increasing the number of wait states because of higher CPU frequency */
#if defined (FLASH_ACR_LATENCY)
  if (sysclk_frequency_current < SYSCLK_Frequency)
 8001fc0:	68ba      	ldr	r2, [r7, #8]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d204      	bcs.n	8001fd2 <UTILS_EnablePLLAndSwitchSystem+0x3a>
  {
    /* Set FLASH latency to highest latency */
    status = LL_SetFlashLatency(SYSCLK_Frequency);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff fef7 	bl	8001dbc <LL_SetFlashLatency>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	73fb      	strb	r3, [r7, #15]
  }
#endif /* FLASH_ACR_LATENCY */

  /* Update system clock configuration */
  if (status == SUCCESS)
 8001fd2:	7bfb      	ldrb	r3, [r7, #15]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d11f      	bne.n	8002018 <UTILS_EnablePLLAndSwitchSystem+0x80>
        /* Wait for PLL2 ready */
      }
    }
#endif /* RCC_PLL2_SUPPORT */
    /* Enable PLL */
    LL_RCC_PLL_Enable();
 8001fd8:	f7ff fe40 	bl	8001c5c <LL_RCC_PLL_Enable>
    while (LL_RCC_PLL_IsReady() != 1U)
 8001fdc:	bf00      	nop
 8001fde:	f7ff fe4b 	bl	8001c78 <LL_RCC_PLL_IsReady>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d1fa      	bne.n	8001fde <UTILS_EnablePLLAndSwitchSystem+0x46>
    {
      /* Wait for PLL ready */
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff fded 	bl	8001bcc <LL_RCC_SetAHBPrescaler>
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001ff2:	2002      	movs	r0, #2
 8001ff4:	f7ff fdca 	bl	8001b8c <LL_RCC_SetSysClkSource>
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001ff8:	bf00      	nop
 8001ffa:	f7ff fddb 	bl	8001bb4 <LL_RCC_GetSysClkSource>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b08      	cmp	r3, #8
 8002002:	d1fa      	bne.n	8001ffa <UTILS_EnablePLLAndSwitchSystem+0x62>
    {
      /* Wait for system clock switch to PLL */
    }

    /* Set APB1 & APB2 prescaler*/
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff fdf3 	bl	8001bf4 <LL_RCC_SetAPB1Prescaler>
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff fe02 	bl	8001c1c <LL_RCC_SetAPB2Prescaler>
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
#if defined (FLASH_ACR_LATENCY)
  if (sysclk_frequency_current > SYSCLK_Frequency)
 8002018:	68ba      	ldr	r2, [r7, #8]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	429a      	cmp	r2, r3
 800201e:	d904      	bls.n	800202a <UTILS_EnablePLLAndSwitchSystem+0x92>
  {
    /* Set FLASH latency to lowest latency */
    status = LL_SetFlashLatency(SYSCLK_Frequency);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7ff fecb 	bl	8001dbc <LL_SetFlashLatency>
 8002026:	4603      	mov	r3, r0
 8002028:	73fb      	strb	r3, [r7, #15]
  }
#endif /* FLASH_ACR_LATENCY */

  /* Update SystemCoreClock variable */
  if (status == SUCCESS)
 800202a:	7bfb      	ldrb	r3, [r7, #15]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10c      	bne.n	800204a <UTILS_EnablePLLAndSwitchSystem+0xb2>
  {
    LL_SetSystemCoreClock(__LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider));
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	091b      	lsrs	r3, r3, #4
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	4a07      	ldr	r2, [pc, #28]	; (8002058 <UTILS_EnablePLLAndSwitchSystem+0xc0>)
 800203c:	5cd3      	ldrb	r3, [r2, r3]
 800203e:	461a      	mov	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	40d3      	lsrs	r3, r2
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff feab 	bl	8001da0 <LL_SetSystemCoreClock>
  }

  return status;
 800204a:	7bfb      	ldrb	r3, [r7, #15]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	bd90      	pop	{r4, r7, pc}
 8002054:	20000010 	.word	0x20000010
 8002058:	08002108 	.word	0x08002108

0800205c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800205c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800205e:	e003      	b.n	8002068 <LoopCopyDataInit>

08002060 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002060:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002062:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002064:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002066:	3104      	adds	r1, #4

08002068 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002068:	480a      	ldr	r0, [pc, #40]	; (8002094 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800206a:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800206c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800206e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002070:	d3f6      	bcc.n	8002060 <CopyDataInit>
  ldr r2, =_sbss
 8002072:	4a0a      	ldr	r2, [pc, #40]	; (800209c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002074:	e002      	b.n	800207c <LoopFillZerobss>

08002076 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002076:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002078:	f842 3b04 	str.w	r3, [r2], #4

0800207c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800207c:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800207e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002080:	d3f9      	bcc.n	8002076 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002082:	f7fe fd3f 	bl	8000b04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002086:	f000 f80f 	bl	80020a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800208a:	f7fe fb8f 	bl	80007ac <main>
  bx lr
 800208e:	4770      	bx	lr
  ldr r3, =_sidata
 8002090:	08002120 	.word	0x08002120
  ldr r0, =_sdata
 8002094:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002098:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 800209c:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 80020a0:	20000044 	.word	0x20000044

080020a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020a4:	e7fe      	b.n	80020a4 <ADC1_2_IRQHandler>
	...

080020a8 <__libc_init_array>:
 80020a8:	b570      	push	{r4, r5, r6, lr}
 80020aa:	2500      	movs	r5, #0
 80020ac:	4e0c      	ldr	r6, [pc, #48]	; (80020e0 <__libc_init_array+0x38>)
 80020ae:	4c0d      	ldr	r4, [pc, #52]	; (80020e4 <__libc_init_array+0x3c>)
 80020b0:	1ba4      	subs	r4, r4, r6
 80020b2:	10a4      	asrs	r4, r4, #2
 80020b4:	42a5      	cmp	r5, r4
 80020b6:	d109      	bne.n	80020cc <__libc_init_array+0x24>
 80020b8:	f000 f81a 	bl	80020f0 <_init>
 80020bc:	2500      	movs	r5, #0
 80020be:	4e0a      	ldr	r6, [pc, #40]	; (80020e8 <__libc_init_array+0x40>)
 80020c0:	4c0a      	ldr	r4, [pc, #40]	; (80020ec <__libc_init_array+0x44>)
 80020c2:	1ba4      	subs	r4, r4, r6
 80020c4:	10a4      	asrs	r4, r4, #2
 80020c6:	42a5      	cmp	r5, r4
 80020c8:	d105      	bne.n	80020d6 <__libc_init_array+0x2e>
 80020ca:	bd70      	pop	{r4, r5, r6, pc}
 80020cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020d0:	4798      	blx	r3
 80020d2:	3501      	adds	r5, #1
 80020d4:	e7ee      	b.n	80020b4 <__libc_init_array+0xc>
 80020d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020da:	4798      	blx	r3
 80020dc:	3501      	adds	r5, #1
 80020de:	e7f2      	b.n	80020c6 <__libc_init_array+0x1e>
 80020e0:	08002118 	.word	0x08002118
 80020e4:	08002118 	.word	0x08002118
 80020e8:	08002118 	.word	0x08002118
 80020ec:	0800211c 	.word	0x0800211c

080020f0 <_init>:
 80020f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020f2:	bf00      	nop
 80020f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020f6:	bc08      	pop	{r3}
 80020f8:	469e      	mov	lr, r3
 80020fa:	4770      	bx	lr

080020fc <_fini>:
 80020fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020fe:	bf00      	nop
 8002100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002102:	bc08      	pop	{r3}
 8002104:	469e      	mov	lr, r3
 8002106:	4770      	bx	lr
